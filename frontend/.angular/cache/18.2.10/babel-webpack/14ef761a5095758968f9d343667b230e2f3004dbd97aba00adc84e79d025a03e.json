{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ConfigError } from '../../util/Errors.js';\nimport Logger from '../../util/Logger.js';\nimport { FORMS } from '../ion/RemediationConstants.js';\nimport { CONFIGURED_FLOW } from './constants.js';\n\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n// checks if \"desired\" remeidation is available before calling `.proceed`\n// if not available, returns original idxResponse (and logs warning)\nfunction proceedIfAvailable(_x, _x2, _x3) {\n  return _proceedIfAvailable.apply(this, arguments);\n} // attempts to \"step into\" a specific flow by calling `.proceed` with a specific remeidation (or calls an action)\n// the \"desired\" remeidation is not guaranteed to be available, depends upon Org configurations\nfunction _proceedIfAvailable() {\n  _proceedIfAvailable = _asyncToGenerator(function* (idxState, remediation, flow) {\n    const rem = idxState.neededToProceed.find(item => item.name === remediation);\n    if (!rem) {\n      Logger.warn('Expected remediation not found, Org may be misconfigured for this flow');\n      return idxState;\n    }\n    try {\n      const nextIdxState = yield idxState.proceed(remediation);\n      return nextIdxState;\n    } catch (err) {\n      // catches and handles `Unknown remediation` errors thrown okta-idx-js\n      if (typeof err === 'string' && err.startsWith('Unknown remediation choice')) {\n        Logger.warn(`flow [${flow}] not valid with current Org configurations`);\n        return idxState;\n      } else {\n        // do not catch non-`Unknown remediation` errors here\n        throw err;\n      }\n    }\n  });\n  return _proceedIfAvailable.apply(this, arguments);\n}\nfunction stepIntoSpecificIdxFlow(_x4) {\n  return _stepIntoSpecificIdxFlow.apply(this, arguments);\n} // ensures the `flow` stored in the transaction meta matches the flow configuration\n// if they do not match, abandon the current (meta) flow and start a new (configured) flow\nfunction _stepIntoSpecificIdxFlow() {\n  _stepIntoSpecificIdxFlow = _asyncToGenerator(function* (idxState, flow = 'default') {\n    switch (flow) {\n      case CONFIGURED_FLOW.DEFAULT:\n      case CONFIGURED_FLOW.PROCEED:\n      case CONFIGURED_FLOW.LOGIN:\n        // default IDX response from interact is \"Login\" page/flow. Do nothing\n        return idxState;\n\n      // step logic is handled by auth-js\n      case CONFIGURED_FLOW.REGISTRATION:\n      case CONFIGURED_FLOW.RESET_PASSWORD:\n        return idxState;\n      case CONFIGURED_FLOW.UNLOCK_ACCOUNT:\n        // requires: introspect -> identify-recovery -> select-authenticator-unlock-account\n        return yield proceedIfAvailable(idxState, FORMS.UNLOCK_ACCOUNT, flow);\n      default:\n        Logger.warn(`Unknown \\`flow\\` value: ${flow}`);\n        throw new ConfigError('Invalid \"flow\" configuration');\n    }\n  });\n  return _stepIntoSpecificIdxFlow.apply(this, arguments);\n}\nfunction handleConfiguredFlow(_x5, _x6) {\n  return _handleConfiguredFlow.apply(this, arguments);\n}\nfunction _handleConfiguredFlow() {\n  _handleConfiguredFlow = _asyncToGenerator(function* (originalResp, settings) {\n    const authClient = settings.getAuthClient();\n    const configuredFlow = authClient.idx.getFlow();\n\n    // attempts to step into the desired flow\n    const idxState = yield stepIntoSpecificIdxFlow(originalResp, configuredFlow);\n    return idxState;\n  });\n  return _handleConfiguredFlow.apply(this, arguments);\n}\nexport { handleConfiguredFlow };","map":{"version":3,"names":["ConfigError","Logger","FORMS","CONFIGURED_FLOW","proceedIfAvailable","_x","_x2","_x3","_proceedIfAvailable","apply","arguments","_asyncToGenerator","idxState","remediation","flow","rem","neededToProceed","find","item","name","warn","nextIdxState","proceed","err","startsWith","stepIntoSpecificIdxFlow","_x4","_stepIntoSpecificIdxFlow","DEFAULT","PROCEED","LOGIN","REGISTRATION","RESET_PASSWORD","UNLOCK_ACCOUNT","handleConfiguredFlow","_x5","_x6","_handleConfiguredFlow","originalResp","settings","authClient","getAuthClient","configuredFlow","idx","getFlow"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/client/handleConfiguredFlow.js"],"sourcesContent":["import { ConfigError } from '../../util/Errors.js';\nimport Logger from '../../util/Logger.js';\nimport { FORMS } from '../ion/RemediationConstants.js';\nimport { CONFIGURED_FLOW } from './constants.js';\n\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n// checks if \"desired\" remeidation is available before calling `.proceed`\n// if not available, returns original idxResponse (and logs warning)\nasync function proceedIfAvailable(idxState, remediation, flow) {\n  const rem = idxState.neededToProceed.find(item => item.name === remediation);\n  if (!rem) {\n    Logger.warn('Expected remediation not found, Org may be misconfigured for this flow');\n    return idxState;\n  }\n  try {\n    const nextIdxState = await idxState.proceed(remediation);\n    return nextIdxState;\n  } catch (err) {\n    // catches and handles `Unknown remediation` errors thrown okta-idx-js\n    if (typeof err === 'string' && err.startsWith('Unknown remediation choice')) {\n      Logger.warn(`flow [${flow}] not valid with current Org configurations`);\n      return idxState;\n    } else {\n      // do not catch non-`Unknown remediation` errors here\n      throw err;\n    }\n  }\n}\n\n// attempts to \"step into\" a specific flow by calling `.proceed` with a specific remeidation (or calls an action)\n// the \"desired\" remeidation is not guaranteed to be available, depends upon Org configurations\nasync function stepIntoSpecificIdxFlow(idxState, flow = 'default') {\n  switch (flow) {\n    case CONFIGURED_FLOW.DEFAULT:\n    case CONFIGURED_FLOW.PROCEED:\n    case CONFIGURED_FLOW.LOGIN:\n      // default IDX response from interact is \"Login\" page/flow. Do nothing\n      return idxState;\n\n    // step logic is handled by auth-js\n    case CONFIGURED_FLOW.REGISTRATION:\n    case CONFIGURED_FLOW.RESET_PASSWORD:\n      return idxState;\n    case CONFIGURED_FLOW.UNLOCK_ACCOUNT:\n      // requires: introspect -> identify-recovery -> select-authenticator-unlock-account\n      return await proceedIfAvailable(idxState, FORMS.UNLOCK_ACCOUNT, flow);\n    default:\n      Logger.warn(`Unknown \\`flow\\` value: ${flow}`);\n      throw new ConfigError('Invalid \"flow\" configuration');\n  }\n}\n\n// ensures the `flow` stored in the transaction meta matches the flow configuration\n// if they do not match, abandon the current (meta) flow and start a new (configured) flow\nasync function handleConfiguredFlow(originalResp, settings) {\n  const authClient = settings.getAuthClient();\n  const configuredFlow = authClient.idx.getFlow();\n\n  // attempts to step into the desired flow\n  const idxState = await stepIntoSpecificIdxFlow(originalResp, configuredFlow);\n  return idxState;\n}\n\nexport { handleConfiguredFlow };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}