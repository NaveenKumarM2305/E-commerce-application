{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../errors/WWWAuthError.js';\nimport { getRemediator, handleFailedResponse, isTerminalResponse, filterValuesForRemediation, getNextStep } from './util.js';\nfunction getActionFromValues(values, idxResponse) {\n  return Object.keys(idxResponse.actions).find(action => !!values.resend && action.includes('-resend'));\n}\nfunction removeActionFromValues(values) {\n  return Object.assign(Object.assign({}, values), {\n    resend: undefined\n  });\n}\nfunction removeActionFromOptions(options, actionName) {\n  let actions = options.actions || [];\n  actions = actions.filter(entry => {\n    if (typeof entry === 'string') {\n      return entry !== actionName;\n    }\n    return entry.name !== actionName;\n  });\n  return Object.assign(Object.assign({}, options), {\n    actions\n  });\n}\nfunction remediate(_x, _x2, _x3, _x4) {\n  return _remediate.apply(this, arguments);\n}\nfunction _remediate() {\n  _remediate = _asyncToGenerator(function* (authClient, idxResponse, values, options) {\n    let {\n      neededToProceed,\n      interactionCode\n    } = idxResponse;\n    const {\n      flow\n    } = options;\n    if (interactionCode) {\n      return {\n        idxResponse\n      };\n    }\n    const remediator = getRemediator(idxResponse, values, options);\n    const actionFromValues = getActionFromValues(values, idxResponse);\n    const actionFromOptions = options.actions || [];\n    const actions = [...actionFromOptions, ...(actionFromValues && [actionFromValues] || [])];\n    if (actions) {\n      for (let action of actions) {\n        let params = {};\n        if (typeof action !== 'string') {\n          params = action.params || {};\n          action = action.name;\n        }\n        let valuesWithoutExecutedAction = removeActionFromValues(values);\n        let optionsWithoutExecutedAction = removeActionFromOptions(options, action);\n        if (typeof idxResponse.actions[action] === 'function') {\n          idxResponse = yield idxResponse.actions[action](params);\n          if (idxResponse.requestDidSucceed === false) {\n            return handleFailedResponse(authClient, idxResponse, options);\n          }\n          if (action === 'cancel') {\n            return {\n              idxResponse,\n              canceled: true\n            };\n          }\n          return remediate(authClient, idxResponse, valuesWithoutExecutedAction, optionsWithoutExecutedAction);\n        }\n        const remediationAction = neededToProceed.find(({\n          name\n        }) => name === action);\n        if (remediationAction) {\n          idxResponse = yield idxResponse.proceed(action, params);\n          if (idxResponse.requestDidSucceed === false) {\n            return handleFailedResponse(authClient, idxResponse, options);\n          }\n          return remediate(authClient, idxResponse, values, optionsWithoutExecutedAction);\n        }\n      }\n    }\n    const terminal = isTerminalResponse(idxResponse);\n    if (terminal) {\n      return {\n        idxResponse,\n        terminal\n      };\n    }\n    if (!remediator) {\n      if (options.step) {\n        values = filterValuesForRemediation(idxResponse, options.step, values);\n        idxResponse = yield idxResponse.proceed(options.step, values);\n        if (idxResponse.requestDidSucceed === false) {\n          return handleFailedResponse(authClient, idxResponse, options);\n        }\n        return {\n          idxResponse\n        };\n      }\n      if (flow === 'default') {\n        return {\n          idxResponse\n        };\n      }\n      throw new AuthSdkError(`\n      No remediation can match current flow, check policy settings in your org.\n      Remediations: [${neededToProceed.reduce((acc, curr) => acc ? acc + ' ,' + curr.name : curr.name, '')}]\n    `);\n    }\n    if (!remediator.canRemediate()) {\n      const nextStep = getNextStep(authClient, remediator, idxResponse);\n      return {\n        idxResponse,\n        nextStep\n      };\n    }\n    const name = remediator.getName();\n    const data = remediator.getData();\n    idxResponse = yield idxResponse.proceed(name, data);\n    if (idxResponse.requestDidSucceed === false) {\n      return handleFailedResponse(authClient, idxResponse, options);\n    }\n    values = remediator.getValuesAfterProceed();\n    options = Object.assign(Object.assign({}, options), {\n      step: undefined\n    });\n    if (options.useGenericRemediator && !idxResponse.interactionCode && !isTerminalResponse(idxResponse)) {\n      const gr = getRemediator(idxResponse, values, options);\n      const nextStep = getNextStep(authClient, gr, idxResponse);\n      return {\n        idxResponse,\n        nextStep\n      };\n    }\n    return remediate(authClient, idxResponse, values, options);\n  });\n  return _remediate.apply(this, arguments);\n}\nexport { remediate };","map":{"version":3,"names":["AuthSdkError","getRemediator","handleFailedResponse","isTerminalResponse","filterValuesForRemediation","getNextStep","getActionFromValues","values","idxResponse","Object","keys","actions","find","action","resend","includes","removeActionFromValues","assign","undefined","removeActionFromOptions","options","actionName","filter","entry","name","remediate","_x","_x2","_x3","_x4","_remediate","apply","arguments","_asyncToGenerator","authClient","neededToProceed","interactionCode","flow","remediator","actionFromValues","actionFromOptions","params","valuesWithoutExecutedAction","optionsWithoutExecutedAction","requestDidSucceed","canceled","remediationAction","proceed","terminal","step","reduce","acc","curr","canRemediate","nextStep","getName","data","getData","getValuesAfterProceed","useGenericRemediator","gr"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/remediate.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../errors/WWWAuthError.js';\nimport { getRemediator, handleFailedResponse, isTerminalResponse, filterValuesForRemediation, getNextStep } from './util.js';\n\nfunction getActionFromValues(values, idxResponse) {\n    return Object.keys(idxResponse.actions).find(action => !!values.resend && action.includes('-resend'));\n}\nfunction removeActionFromValues(values) {\n    return Object.assign(Object.assign({}, values), { resend: undefined });\n}\nfunction removeActionFromOptions(options, actionName) {\n    let actions = options.actions || [];\n    actions = actions.filter(entry => {\n        if (typeof entry === 'string') {\n            return entry !== actionName;\n        }\n        return entry.name !== actionName;\n    });\n    return Object.assign(Object.assign({}, options), { actions });\n}\nasync function remediate(authClient, idxResponse, values, options) {\n    let { neededToProceed, interactionCode } = idxResponse;\n    const { flow } = options;\n    if (interactionCode) {\n        return { idxResponse };\n    }\n    const remediator = getRemediator(idxResponse, values, options);\n    const actionFromValues = getActionFromValues(values, idxResponse);\n    const actionFromOptions = options.actions || [];\n    const actions = [\n        ...actionFromOptions,\n        ...(actionFromValues && [actionFromValues] || []),\n    ];\n    if (actions) {\n        for (let action of actions) {\n            let params = {};\n            if (typeof action !== 'string') {\n                params = action.params || {};\n                action = action.name;\n            }\n            let valuesWithoutExecutedAction = removeActionFromValues(values);\n            let optionsWithoutExecutedAction = removeActionFromOptions(options, action);\n            if (typeof idxResponse.actions[action] === 'function') {\n                idxResponse = await idxResponse.actions[action](params);\n                if (idxResponse.requestDidSucceed === false) {\n                    return handleFailedResponse(authClient, idxResponse, options);\n                }\n                if (action === 'cancel') {\n                    return { idxResponse, canceled: true };\n                }\n                return remediate(authClient, idxResponse, valuesWithoutExecutedAction, optionsWithoutExecutedAction);\n            }\n            const remediationAction = neededToProceed.find(({ name }) => name === action);\n            if (remediationAction) {\n                idxResponse = await idxResponse.proceed(action, params);\n                if (idxResponse.requestDidSucceed === false) {\n                    return handleFailedResponse(authClient, idxResponse, options);\n                }\n                return remediate(authClient, idxResponse, values, optionsWithoutExecutedAction);\n            }\n        }\n    }\n    const terminal = isTerminalResponse(idxResponse);\n    if (terminal) {\n        return { idxResponse, terminal };\n    }\n    if (!remediator) {\n        if (options.step) {\n            values = filterValuesForRemediation(idxResponse, options.step, values);\n            idxResponse = await idxResponse.proceed(options.step, values);\n            if (idxResponse.requestDidSucceed === false) {\n                return handleFailedResponse(authClient, idxResponse, options);\n            }\n            return { idxResponse };\n        }\n        if (flow === 'default') {\n            return { idxResponse };\n        }\n        throw new AuthSdkError(`\n      No remediation can match current flow, check policy settings in your org.\n      Remediations: [${neededToProceed.reduce((acc, curr) => acc ? acc + ' ,' + curr.name : curr.name, '')}]\n    `);\n    }\n    if (!remediator.canRemediate()) {\n        const nextStep = getNextStep(authClient, remediator, idxResponse);\n        return {\n            idxResponse,\n            nextStep,\n        };\n    }\n    const name = remediator.getName();\n    const data = remediator.getData();\n    idxResponse = await idxResponse.proceed(name, data);\n    if (idxResponse.requestDidSucceed === false) {\n        return handleFailedResponse(authClient, idxResponse, options);\n    }\n    values = remediator.getValuesAfterProceed();\n    options = Object.assign(Object.assign({}, options), { step: undefined });\n    if (options.useGenericRemediator && !idxResponse.interactionCode && !isTerminalResponse(idxResponse)) {\n        const gr = getRemediator(idxResponse, values, options);\n        const nextStep = getNextStep(authClient, gr, idxResponse);\n        return {\n            idxResponse,\n            nextStep,\n        };\n    }\n    return remediate(authClient, idxResponse, values, options);\n}\n\nexport { remediate };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}