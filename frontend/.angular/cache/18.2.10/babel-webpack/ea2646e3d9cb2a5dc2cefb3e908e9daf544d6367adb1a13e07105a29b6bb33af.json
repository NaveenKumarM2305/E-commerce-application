{"ast":null,"code":"import _ from '../../packages/@okta/courage-dist/esm/lib/underscore/underscore-min.js';\nimport { loc } from './loc.js';\nimport Bundles from './Bundles.js';\nimport countryCallingCodes from './countryCallingCodes.js';\n\n/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst fn = {};\n\n// () => [{ countryCode: countryName }], sorted by countryName\nfn.getCountries = function () {\n  const countries = _.omit(Bundles.country, 'HM', 'BV', 'TF');\n  // HM, BV, and TF do not have phone prefixes, so don't give the\n  // user the option to choose these countries. FYI it appears that these\n  // countries do not have calling codes because they are ~~uninhabited~~\n\n  let collection = _.map(countries, function (name, code) {\n    return {\n      name: name,\n      code: code\n    };\n  });\n\n  // Sort it; figure out if there is a better way to do this (best would\n  // be to sort it in the properties file!!)\n\n  collection = _.sortBy(collection, 'name');\n  const sorted = {};\n  _.each(collection, function (country) {\n    sorted[country.code] = country.name;\n  });\n  return sorted;\n};\nfn.getCountryCode = function () {\n  const countries = _.omit(Bundles.country, 'HM', 'BV', 'TF');\n  // HM, BV, and TF do not have phone prefixes, so don't give the\n  // user the option to choose these countries. FYI it appears that these\n  // countries do not have calling codes because they are ~~uninhabited~~\n\n  let collection = _.map(countries, function (name, code) {\n    return {\n      name: name,\n      code: code\n    };\n  });\n  collection = _.sortBy(collection, 'name');\n  const sorted = {};\n  _.each(collection, function (country) {\n    sorted[country.code] = loc('country.option.label', 'login', [country.name, country.code]);\n  });\n  return sorted;\n};\nfn.getCallingCodeForCountry = function (countryCode) {\n  return countryCallingCodes[countryCode];\n};\nexport { fn as default };","map":{"version":3,"names":["_","loc","Bundles","countryCallingCodes","fn","getCountries","countries","omit","country","collection","map","name","code","sortBy","sorted","each","getCountryCode","getCallingCodeForCountry","countryCode","default"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/util/CountryUtil.js"],"sourcesContent":["import _ from '../../packages/@okta/courage-dist/esm/lib/underscore/underscore-min.js';\nimport { loc } from './loc.js';\nimport Bundles from './Bundles.js';\nimport countryCallingCodes from './countryCallingCodes.js';\n\n/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst fn = {};\n\n// () => [{ countryCode: countryName }], sorted by countryName\nfn.getCountries = function () {\n  const countries = _.omit(Bundles.country, 'HM', 'BV', 'TF');\n  // HM, BV, and TF do not have phone prefixes, so don't give the\n  // user the option to choose these countries. FYI it appears that these\n  // countries do not have calling codes because they are ~~uninhabited~~\n\n  let collection = _.map(countries, function (name, code) {\n    return {\n      name: name,\n      code: code\n    };\n  });\n\n  // Sort it; figure out if there is a better way to do this (best would\n  // be to sort it in the properties file!!)\n\n  collection = _.sortBy(collection, 'name');\n  const sorted = {};\n  _.each(collection, function (country) {\n    sorted[country.code] = country.name;\n  });\n  return sorted;\n};\nfn.getCountryCode = function () {\n  const countries = _.omit(Bundles.country, 'HM', 'BV', 'TF');\n  // HM, BV, and TF do not have phone prefixes, so don't give the\n  // user the option to choose these countries. FYI it appears that these\n  // countries do not have calling codes because they are ~~uninhabited~~\n\n  let collection = _.map(countries, function (name, code) {\n    return {\n      name: name,\n      code: code\n    };\n  });\n  collection = _.sortBy(collection, 'name');\n  const sorted = {};\n  _.each(collection, function (country) {\n    sorted[country.code] = loc('country.option.label', 'login', [country.name, country.code]);\n  });\n  return sorted;\n};\nfn.getCallingCodeForCountry = function (countryCode) {\n  return countryCallingCodes[countryCode];\n};\n\nexport { fn as default };\n"],"mappings":"AAAA,OAAOA,CAAC,MAAM,wEAAwE;AACtF,SAASC,GAAG,QAAQ,UAAU;AAC9B,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,mBAAmB,MAAM,0BAA0B;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,EAAE,GAAG,CAAC,CAAC;;AAEb;AACAA,EAAE,CAACC,YAAY,GAAG,YAAY;EAC5B,MAAMC,SAAS,GAAGN,CAAC,CAACO,IAAI,CAACL,OAAO,CAACM,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAC3D;EACA;EACA;;EAEA,IAAIC,UAAU,GAAGT,CAAC,CAACU,GAAG,CAACJ,SAAS,EAAE,UAAUK,IAAI,EAAEC,IAAI,EAAE;IACtD,OAAO;MACLD,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA;IACR,CAAC;EACH,CAAC,CAAC;;EAEF;EACA;;EAEAH,UAAU,GAAGT,CAAC,CAACa,MAAM,CAACJ,UAAU,EAAE,MAAM,CAAC;EACzC,MAAMK,MAAM,GAAG,CAAC,CAAC;EACjBd,CAAC,CAACe,IAAI,CAACN,UAAU,EAAE,UAAUD,OAAO,EAAE;IACpCM,MAAM,CAACN,OAAO,CAACI,IAAI,CAAC,GAAGJ,OAAO,CAACG,IAAI;EACrC,CAAC,CAAC;EACF,OAAOG,MAAM;AACf,CAAC;AACDV,EAAE,CAACY,cAAc,GAAG,YAAY;EAC9B,MAAMV,SAAS,GAAGN,CAAC,CAACO,IAAI,CAACL,OAAO,CAACM,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAC3D;EACA;EACA;;EAEA,IAAIC,UAAU,GAAGT,CAAC,CAACU,GAAG,CAACJ,SAAS,EAAE,UAAUK,IAAI,EAAEC,IAAI,EAAE;IACtD,OAAO;MACLD,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA;IACR,CAAC;EACH,CAAC,CAAC;EACFH,UAAU,GAAGT,CAAC,CAACa,MAAM,CAACJ,UAAU,EAAE,MAAM,CAAC;EACzC,MAAMK,MAAM,GAAG,CAAC,CAAC;EACjBd,CAAC,CAACe,IAAI,CAACN,UAAU,EAAE,UAAUD,OAAO,EAAE;IACpCM,MAAM,CAACN,OAAO,CAACI,IAAI,CAAC,GAAGX,GAAG,CAAC,sBAAsB,EAAE,OAAO,EAAE,CAACO,OAAO,CAACG,IAAI,EAAEH,OAAO,CAACI,IAAI,CAAC,CAAC;EAC3F,CAAC,CAAC;EACF,OAAOE,MAAM;AACf,CAAC;AACDV,EAAE,CAACa,wBAAwB,GAAG,UAAUC,WAAW,EAAE;EACnD,OAAOf,mBAAmB,CAACe,WAAW,CAAC;AACzC,CAAC;AAED,SAASd,EAAE,IAAIe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}