{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../errors/WWWAuthError.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { isSameRefreshToken } from './util/refreshToken.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nimport { postRefreshToken } from './endpoints/token.js';\nimport { findKeyPair } from './dpop.js';\nimport { isRefreshTokenInvalidError } from './util/errors.js';\nfunction renewTokensWithRefresh(_x, _x2, _x3) {\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\nfunction _renewTokensWithRefresh() {\n  _renewTokensWithRefresh = _asyncToGenerator(function* (sdk, tokenParams, refreshTokenObject) {\n    const {\n      clientId,\n      dpop\n    } = sdk.options;\n    if (!clientId) {\n      throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');\n    }\n    try {\n      const renewTokenParams = Object.assign({}, tokenParams, {\n        clientId\n      });\n      if (refreshTokenObject.extraParams) {\n        renewTokenParams.extraParams = refreshTokenObject.extraParams;\n      }\n      const endpointParams = Object.assign({}, renewTokenParams);\n      if (dpop) {\n        const keyPair = yield findKeyPair(refreshTokenObject === null || refreshTokenObject === void 0 ? void 0 : refreshTokenObject.dpopPairId);\n        endpointParams.dpopKeyPair = keyPair;\n        renewTokenParams.dpop = dpop;\n        renewTokenParams.dpopPairId = refreshTokenObject.dpopPairId;\n      }\n      const tokenResponse = yield postRefreshToken(sdk, endpointParams, refreshTokenObject);\n      const urls = getOAuthUrls(sdk, tokenParams);\n      const {\n        tokens\n      } = yield handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);\n      const {\n        refreshToken\n      } = tokens;\n      if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {\n        sdk.tokenManager.updateRefreshToken(refreshToken);\n      }\n      return tokens;\n    } catch (err) {\n      if (isRefreshTokenInvalidError(err)) {\n        sdk.tokenManager.removeRefreshToken();\n      }\n      throw err;\n    }\n  });\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\nexport { renewTokensWithRefresh };","map":{"version":3,"names":["AuthSdkError","getOAuthUrls","isSameRefreshToken","handleOAuthResponse","postRefreshToken","findKeyPair","isRefreshTokenInvalidError","renewTokensWithRefresh","_x","_x2","_x3","_renewTokensWithRefresh","apply","arguments","_asyncToGenerator","sdk","tokenParams","refreshTokenObject","clientId","dpop","options","renewTokenParams","Object","assign","extraParams","endpointParams","keyPair","dpopPairId","dpopKeyPair","tokenResponse","urls","tokens","refreshToken","tokenManager","updateRefreshToken","err","removeRefreshToken"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/renewTokensWithRefresh.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../errors/WWWAuthError.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { isSameRefreshToken } from './util/refreshToken.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nimport { postRefreshToken } from './endpoints/token.js';\nimport { findKeyPair } from './dpop.js';\nimport { isRefreshTokenInvalidError } from './util/errors.js';\n\nasync function renewTokensWithRefresh(sdk, tokenParams, refreshTokenObject) {\n    const { clientId, dpop } = sdk.options;\n    if (!clientId) {\n        throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');\n    }\n    try {\n        const renewTokenParams = Object.assign({}, tokenParams, { clientId });\n        if (refreshTokenObject.extraParams) {\n            renewTokenParams.extraParams = refreshTokenObject.extraParams;\n        }\n        const endpointParams = Object.assign({}, renewTokenParams);\n        if (dpop) {\n            const keyPair = await findKeyPair(refreshTokenObject === null || refreshTokenObject === void 0 ? void 0 : refreshTokenObject.dpopPairId);\n            endpointParams.dpopKeyPair = keyPair;\n            renewTokenParams.dpop = dpop;\n            renewTokenParams.dpopPairId = refreshTokenObject.dpopPairId;\n        }\n        const tokenResponse = await postRefreshToken(sdk, endpointParams, refreshTokenObject);\n        const urls = getOAuthUrls(sdk, tokenParams);\n        const { tokens } = await handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);\n        const { refreshToken } = tokens;\n        if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {\n            sdk.tokenManager.updateRefreshToken(refreshToken);\n        }\n        return tokens;\n    }\n    catch (err) {\n        if (isRefreshTokenInvalidError(err)) {\n            sdk.tokenManager.removeRefreshToken();\n        }\n        throw err;\n    }\n}\n\nexport { renewTokensWithRefresh };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,YAAY,MAAM,2BAA2B;AACpD,OAAO,2BAA2B;AAClC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,kBAAkB,QAAQ,wBAAwB;AAC3D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,WAAW,QAAQ,WAAW;AACvC,SAASC,0BAA0B,QAAQ,kBAAkB;AAAC,SAE/CC,sBAAsBA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,uBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,wBAAA;EAAAA,uBAAA,GAAAG,iBAAA,CAArC,WAAsCC,GAAG,EAAEC,WAAW,EAAEC,kBAAkB,EAAE;IACxE,MAAM;MAAEC,QAAQ;MAAEC;IAAK,CAAC,GAAGJ,GAAG,CAACK,OAAO;IACtC,IAAI,CAACF,QAAQ,EAAE;MACX,MAAM,IAAIlB,YAAY,CAAC,0EAA0E,CAAC;IACtG;IACA,IAAI;MACA,MAAMqB,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,WAAW,EAAE;QAAEE;MAAS,CAAC,CAAC;MACrE,IAAID,kBAAkB,CAACO,WAAW,EAAE;QAChCH,gBAAgB,CAACG,WAAW,GAAGP,kBAAkB,CAACO,WAAW;MACjE;MACA,MAAMC,cAAc,GAAGH,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,gBAAgB,CAAC;MAC1D,IAAIF,IAAI,EAAE;QACN,MAAMO,OAAO,SAASrB,WAAW,CAACY,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACU,UAAU,CAAC;QACxIF,cAAc,CAACG,WAAW,GAAGF,OAAO;QACpCL,gBAAgB,CAACF,IAAI,GAAGA,IAAI;QAC5BE,gBAAgB,CAACM,UAAU,GAAGV,kBAAkB,CAACU,UAAU;MAC/D;MACA,MAAME,aAAa,SAASzB,gBAAgB,CAACW,GAAG,EAAEU,cAAc,EAAER,kBAAkB,CAAC;MACrF,MAAMa,IAAI,GAAG7B,YAAY,CAACc,GAAG,EAAEC,WAAW,CAAC;MAC3C,MAAM;QAAEe;MAAO,CAAC,SAAS5B,mBAAmB,CAACY,GAAG,EAAEM,gBAAgB,EAAEQ,aAAa,EAAEC,IAAI,CAAC;MACxF,MAAM;QAAEE;MAAa,CAAC,GAAGD,MAAM;MAC/B,IAAIC,YAAY,IAAI,CAAC9B,kBAAkB,CAAC8B,YAAY,EAAEf,kBAAkB,CAAC,EAAE;QACvEF,GAAG,CAACkB,YAAY,CAACC,kBAAkB,CAACF,YAAY,CAAC;MACrD;MACA,OAAOD,MAAM;IACjB,CAAC,CACD,OAAOI,GAAG,EAAE;MACR,IAAI7B,0BAA0B,CAAC6B,GAAG,CAAC,EAAE;QACjCpB,GAAG,CAACkB,YAAY,CAACG,kBAAkB,CAAC,CAAC;MACzC;MACA,MAAMD,GAAG;IACb;EACJ,CAAC;EAAA,OAAAxB,uBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASN,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}