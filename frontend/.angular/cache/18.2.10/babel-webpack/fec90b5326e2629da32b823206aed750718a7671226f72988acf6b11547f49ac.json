{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Controller, loc } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport ViewFactory from '../view-builder/ViewFactory.js';\nimport IonResponseHelper from '../ion/IonResponseHelper.js';\nimport { getV1ClassName } from '../ion/ViewClassNamesFactory.js';\nimport { TERMINAL_FORMS, ORG_PASSWORD_RECOVERY_LINK, FORMS, FORM_NAME_TO_OPERATION_MAP } from '../ion/RemediationConstants.js';\nimport transformPayload from '../ion/payloadTransformer.js';\nimport Util from '../../util/Util.js';\nimport sessionStorageHelper from '../client/sessionStorageHelper.js';\nimport { IdxStatus } from '@okta/okta-auth-js';\nimport { CONFIGURED_FLOW } from '../client/constants.js';\nimport { ConfigError } from '../../util/Errors.js';\nimport 'cross-fetch';\nimport '../../../packages/@okta/courage-dist/esm/lib/underscore/underscore-min.js';\nimport '../../util/BrowserFeatures.js';\nimport { updateAppState } from '../client/updateAppState.js';\nimport fn from '../../util/CookieUtil.js';\n\n/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar FormController = Controller.extend({\n  className: 'form-controller',\n  appStateEvents: {\n    'change:currentFormName': 'handleFormNameChange',\n    'afterError': 'handleAfterError',\n    'invokeAction': 'handleInvokeAction',\n    'saveForm': 'handleSaveForm',\n    'switchForm': 'handleSwitchForm'\n  },\n  preRender: function () {\n    this.removeChildren();\n  },\n  postRender: function () {\n    const currentViewState = this.options.appState.getCurrentViewState();\n    // TODO: add comments regarding when `currentViewState` would be null?\n    if (!currentViewState) {\n      return;\n    }\n    this.clearMetadata();\n    let formName = currentViewState.name;\n    if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n      formName = 'identify-recovery';\n    }\n    const TheView = ViewFactory.create(formName, this.options.appState.get('authenticatorKey'));\n    try {\n      this.formView = this.add(TheView, {\n        options: {\n          currentViewState: currentViewState\n        }\n      }).last();\n    } catch (error) {\n      // This is the place where runtime error (NPE) happens at most of time.\n      // It has been swallowed by Q.js hence add try/catch to surface up errors.\n      this.options.settings.callGlobalError(error);\n      return;\n    }\n    this.triggerAfterRenderEvent();\n  },\n  clearMetadata: function () {\n    const formName = this.options.appState.get('currentFormName');\n    // TODO: OKTA-392835 shall not clear state handle at terminal page\n    if (TERMINAL_FORMS.includes(formName)) {\n      sessionStorageHelper.removeStateHandle();\n    }\n  },\n  triggerAfterRenderEvent: function () {\n    const contextData = this.createAfterEventContext();\n    this.trigger('afterRender', contextData);\n  },\n  handleFormNameChange: function () {\n    this.render();\n  },\n  handleAfterError: function (error) {\n    const contextData = this.createAfterEventContext();\n    const errorContextData = {\n      xhr: error,\n      errorSummary: error.responseJSON && error.responseJSON.errorSummary\n    };\n    // TODO: need some enhancement after https://github.com/okta/okta-idx-js/pull/27\n    // OKTA-318062\n    this.trigger('afterError', contextData, errorContextData);\n  },\n  createAfterEventContext: function () {\n    const formName = this.options.appState.get('currentFormName');\n    const authenticatorKey = this.options.appState.get('authenticatorKey');\n    const methodType = this.options.appState.get('authenticatorMethodType');\n    const isPasswordRecoveryFlow = this.options.appState.get('isPasswordRecoveryFlow');\n    const v1ControllerClassName = getV1ClassName(formName, authenticatorKey, methodType, isPasswordRecoveryFlow);\n    const eventData = {\n      controller: v1ControllerClassName,\n      formName: formName\n    };\n    if (authenticatorKey) {\n      eventData.authenticatorKey = authenticatorKey;\n    }\n    if (methodType) {\n      eventData.methodType = methodType;\n    }\n    return eventData;\n  },\n  handleSwitchForm: function (formName) {\n    // trigger formName change to change view\n    if (this.options.appState.get('messages')) {\n      // Clear messages before calling switch form.\n      // If a form has errors sent form API inside messages\n      // and user hits back to factors list which triggers switchForm,\n      // those error will show up on another screen that gets rendered after switchForm\n      this.options.appState.unset('messages');\n    }\n    this.options.appState.set('currentFormName', formName);\n  },\n  // eslint-disable-next-line max-statements\n  handleInvokeAction: function () {\n    var _ref = _asyncToGenerator(function* (actionPath = '', actionParams = {}) {\n      const {\n        appState: appState,\n        settings: settings\n      } = this.options;\n\n      // For self-hosted scenario we need to start reset flow at identify page from scratch.\n      //  (Reusing state handle of transaction after failed sign-in attempt for reset flow is error prone)\n      // For Okta-hosted scenario we don't need to cancel/restart flow because SIW receives fresh state token\n      //  from backend on page load and doesn't save state handle to session storage after error.\n      if (actionPath === ORG_PASSWORD_RECOVERY_LINK && settings.get('oauth2Enabled')) {\n        appState.trigger('restartLoginFlow', 'resetPassword');\n        return;\n      }\n      const idx = appState.get('idx');\n      const {\n        stateHandle: stateHandle\n      } = idx.context;\n      let invokeOptions = {\n        exchangeCodeForTokens: false,\n        // we handle this in interactionCodeFlow.js\n        stateHandle: stateHandle\n      };\n      let error;\n\n      // Cancel action is executes synchronously\n      if (actionPath === 'cancel') {\n        // TODO: resolve race conditions caused by event pattern: OKTA-490220\n        settings.getAuthClient().transactionManager.clear({\n          clearIdxResponse: false\n        });\n        sessionStorageHelper.removeStateHandle();\n        appState.clearAppStateCache();\n        if (settings.get('oauth2Enabled')) {\n          // In this case we need to restart login flow and recreate transaction meta\n          // that will be used in interactionCodeFlow function\n          appState.trigger('restartLoginFlow');\n          return;\n        }\n      }\n      const invokeableForms = [FORMS.LAUNCH_AUTHENTICATOR, FORMS.CHALLENGE_WEBAUTHN_AUTOFILLUI_AUTHENTICATOR];\n      if (invokeableForms.includes(actionPath) && actionParams) {\n        //https://oktainc.atlassian.net/browse/OKTA-562885  a temp solution to send rememberMe when click the launch OV buttion.\n        //will redesign to handle FastPass silent probing case where no username and rememberMe opiton at all.\n        invokeOptions = {\n          ...invokeOptions,\n          actions: [{\n            name: actionPath,\n            params: actionParams\n          }]\n        };\n      } else if (idx['neededToProceed'].find(item => item.name === actionPath)) {\n        invokeOptions = {\n          ...invokeOptions,\n          step: actionPath\n        };\n      } else if (oktaUnderscore.isFunction(idx['actions'][actionPath])) {\n        invokeOptions = {\n          ...invokeOptions,\n          actions: [{\n            name: actionPath,\n            params: actionParams\n          }]\n        };\n      } else {\n        error = new ConfigError(`Invalid action selected: ${actionPath}`);\n        this.options.settings.callGlobalError(error);\n        yield this.showFormErrors(this.formView.model, error, this.formView.form);\n        return;\n      }\n\n      // action will be executed asynchronously\n      yield this.invokeAction(invokeOptions);\n    });\n    return function handleInvokeAction() {\n      return _ref.apply(this, arguments);\n    };\n  }(),\n  invokeAction: function () {\n    var _ref2 = _asyncToGenerator(function* (invokeOptions) {\n      const authClient = this.options.settings.getAuthClient();\n      let resp;\n      let error;\n      try {\n        resp = yield authClient.idx.proceed(invokeOptions);\n        if (resp.requestDidSucceed === false) {\n          error = resp;\n        }\n      } catch (e) {\n        error = e;\n      }\n\n      // if request did not succeed, show error on the current form\n      if (error) {\n        yield this.showFormErrors(this.formView.model, error, this.formView.form);\n        return;\n      }\n\n      // process response, may render a new form\n      yield this.handleIdxResponse(resp);\n    });\n    return function invokeAction(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(),\n  // eslint-disable-next-line max-statements, complexity\n  handleSaveForm: function () {\n    var _ref3 = _asyncToGenerator(function* (model) {\n      const formName = model.get('formName');\n\n      // Toggle Form saving status (e.g. disabling save button, etc)\n      this.toggleFormButtonState(true);\n      model.trigger('request');\n\n      // Use full page redirection if necessary\n      if (model.get('useRedirect')) {\n        // Clear when navigates away from SIW page, e.g. success, IdP Authenticator.\n        // Because SIW sort of finished its current /transaction/\n        sessionStorageHelper.removeStateHandle();\n\n        // OKTA-635926: do not redirect without user gesture for ov enrollment on android\n        // if Util.isAndroidOVEnrollment() returns true we use a user gesture to complete the redirect in AutoRedirectView\n        if (!Util.isAndroidOVEnrollment()) {\n          const currentViewState = this.options.appState.getCurrentViewState();\n          // OKTA-702402: redirect only if/when the page is visible\n          Util.executeOnVisiblePage(() => {\n            Util.redirectWithFormGet(currentViewState.href);\n          });\n        }\n        return;\n      }\n      const payload = transformPayload(formName, model);\n      // Run hook: transform the user name (a.k.a identifier)\n      const values = this.transformIdentifier(formName, payload);\n\n      // widget rememberMe feature stores the entered identifier in a cookie, to pre-fill the form on subsequent visits to page\n      if (this.options.settings.get('features.rememberMe')) {\n        if (values.identifier) {\n          fn.setUsernameCookie(values.identifier);\n        }\n      } else {\n        fn.removeUsernameCookie();\n      }\n\n      // Error out when this is not a remediation form. Unexpected Exception.\n      if (!this.options.appState.hasRemediationObject(formName)) {\n        this.options.settings.callGlobalError(`Cannot find http action for \"${formName}\".`);\n        yield this.showFormErrors(this.formView.model, 'Cannot find action to proceed.', this.formView.form);\n        return;\n      }\n\n      // Reset password in identity-first flow needs some help to auto-select password and begin the reset flow\n      if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n        values.authenticator = 'okta_password';\n      }\n\n      // Submit request to idx endpoint\n      const authClient = this.options.settings.getAuthClient();\n      const idxOptions = {\n        exchangeCodeForTokens: false // we handle this in interactionCodeFlow.js\n      };\n      try {\n        const idx = this.options.appState.get('idx');\n        const {\n          stateHandle: stateHandle\n        } = idx.context;\n        const resp = yield authClient.idx.proceed({\n          ...idxOptions,\n          step: formName,\n          stateHandle: stateHandle,\n          ...values\n        });\n        if (resp.status === IdxStatus.FAILURE) {\n          throw resp.error; // caught and handled in this function\n        }\n        // follow idx transaction to render terminal view for session expired error\n        if (IonResponseHelper.isIdxSessionExpiredError(resp)) {\n          const authClient = this.settings.getAuthClient();\n          authClient.transactionManager.clear();\n          yield this.handleIdxResponse(resp);\n          return;\n        }\n        // If the last request did not succeed, show errors on the current form\n        // Special case: Okta server responds 401 status code with WWW-Authenticate header and new remediation\n        // so that the iOS/MacOS credential SSO extension (Okta Verify) can intercept\n        // the response reaches here when Okta Verify is not installed\n        // we need to return an idx object so that\n        // the SIW can proceed to the next step without showing error\n        if (resp.requestDidSucceed === false && !resp.stepUp) {\n          yield this.showFormErrors(model, resp, this.formView.form);\n          return;\n        }\n        const onSuccess = this.handleIdxResponse.bind(this, resp);\n        if (formName === FORMS.ENROLL_PROFILE) {\n          var _values$userProfile;\n          // call registration (aka enroll profile) hook\n          this.settings.postRegistrationSubmit(values === null || values === void 0 ? void 0 : (_values$userProfile = values.userProfile) === null || _values$userProfile === void 0 ? void 0 : _values$userProfile.email, onSuccess, error => {\n            model.trigger('error', model, {\n              responseJSON: error\n            });\n          });\n        } else {\n          yield onSuccess();\n        }\n      } catch (error) {\n        var _error$is;\n        if ((_error$is = error.is) !== null && _error$is !== void 0 && _error$is.call(error, 'terminal')) {\n          this.options.appState.setNonIdxError(error);\n        } else {\n          yield this.showFormErrors(model, error, this.formView.form);\n        }\n      } finally {\n        this.toggleFormButtonState(false);\n      }\n    });\n    return function handleSaveForm(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(),\n  transformIdentifier: function (formName, modelJSON) {\n    if (Object.prototype.hasOwnProperty.call(modelJSON, 'identifier')) {\n      // The callback function is passed two arguments:\n      // 1) username: The name entered by the user\n      // 2) operation: The type of operation the user is trying to perform:\n      //      - PRIMARY_AUTH\n      //      - FORGOT_PASSWORD\n      //      - UNLOCK_ACCOUNT\n      const operation = FORM_NAME_TO_OPERATION_MAP[formName];\n      modelJSON.identifier = this.settings.transformUsername(modelJSON.identifier, operation);\n    }\n    return modelJSON;\n  },\n  /**\n   * @param model current form model\n   * @param error any errors after user action\n   * @param form current form\n   * Handle errors that get displayed right after any user action. After such form errors widget doesn't\n   * reload or re-render, but updates the AppSate with latest remediation.\n   */\n  showFormErrors: function () {\n    var _ref4 = _asyncToGenerator(function* (model, error, form) {\n      var _error;\n      /* eslint max-statements: [2, 24] */\n      let errorObj;\n      let idxStateError;\n      let showErrorBanner = true;\n      model.trigger('clearFormError');\n      if (!error) {\n        error = 'FormController - unknown error found';\n        this.options.settings.callGlobalError(error);\n      }\n      if ((_error = error) !== null && _error !== void 0 && _error.rawIdxState) {\n        idxStateError = error;\n        error = error.rawIdxState;\n      }\n      if (IonResponseHelper.isIonErrorResponse(error)) {\n        errorObj = IonResponseHelper.convertFormErrors(error);\n      } else if (error.errorSummary) {\n        errorObj = {\n          responseJSON: error\n        };\n      } else {\n        Util.logConsoleError(error);\n        errorObj = {\n          responseJSON: {\n            errorSummary: loc('error.unsupported.response', 'login')\n          }\n        };\n      }\n      if (oktaUnderscore.isFunction(form === null || form === void 0 ? void 0 : form.showCustomFormErrorCallout)) {\n        var _idxStateError;\n        showErrorBanner = !form.showCustomFormErrorCallout(errorObj, (_idxStateError = idxStateError) === null || _idxStateError === void 0 ? void 0 : _idxStateError.messages);\n      }\n\n      // show error before updating app state.\n      model.trigger('error', model, errorObj, showErrorBanner);\n      idxStateError = Object.assign({}, idxStateError, {\n        hasFormError: true\n      });\n\n      // OKTA-725716: Don't save failed IDX response to state\n    });\n    return function showFormErrors(_x3, _x4, _x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }(),\n  handleIdxResponse: function () {\n    var _ref5 = _asyncToGenerator(function* (idxResp) {\n      yield updateAppState(this.options.appState, idxResp);\n    });\n    return function handleIdxResponse(_x6) {\n      return _ref5.apply(this, arguments);\n    };\n  }(),\n  /**\n   * SignIn widget has its own (hacky) way to customize the button disabled state:\n   * adding `link-button-disabled` despite the name was intend only to disable\n   * `link-button`.\n   * Instead of doing decent refactor, we want to follow the convention for now.\n   *\n   * @param {boolean} disabled whether add extra disable CSS class.\n   */\n  toggleFormButtonState: function (disabled) {\n    const button = this.$el.find('.o-form-button-bar .button');\n    button.toggleClass('link-button-disabled', disabled);\n  }\n});\nexport { FormController as default };","map":{"version":3,"names":["Controller","loc","oktaUnderscore","ViewFactory","IonResponseHelper","getV1ClassName","TERMINAL_FORMS","ORG_PASSWORD_RECOVERY_LINK","FORMS","FORM_NAME_TO_OPERATION_MAP","transformPayload","Util","sessionStorageHelper","IdxStatus","CONFIGURED_FLOW","ConfigError","updateAppState","fn","FormController","extend","className","appStateEvents","preRender","removeChildren","postRender","currentViewState","options","appState","getCurrentViewState","clearMetadata","formName","name","settings","get","RESET_PASSWORD","TheView","create","formView","add","last","error","callGlobalError","triggerAfterRenderEvent","includes","removeStateHandle","contextData","createAfterEventContext","trigger","handleFormNameChange","render","handleAfterError","errorContextData","xhr","errorSummary","responseJSON","authenticatorKey","methodType","isPasswordRecoveryFlow","v1ControllerClassName","eventData","controller","handleSwitchForm","unset","set","handleInvokeAction","_ref","_asyncToGenerator","actionPath","actionParams","idx","stateHandle","context","invokeOptions","exchangeCodeForTokens","getAuthClient","transactionManager","clear","clearIdxResponse","clearAppStateCache","invokeableForms","LAUNCH_AUTHENTICATOR","CHALLENGE_WEBAUTHN_AUTOFILLUI_AUTHENTICATOR","actions","params","find","item","step","isFunction","showFormErrors","model","form","invokeAction","apply","arguments","_ref2","authClient","resp","proceed","requestDidSucceed","e","handleIdxResponse","_x","handleSaveForm","_ref3","toggleFormButtonState","isAndroidOVEnrollment","executeOnVisiblePage","redirectWithFormGet","href","payload","values","transformIdentifier","identifier","setUsernameCookie","removeUsernameCookie","hasRemediationObject","authenticator","idxOptions","status","FAILURE","isIdxSessionExpiredError","stepUp","onSuccess","bind","ENROLL_PROFILE","_values$userProfile","postRegistrationSubmit","userProfile","email","_error$is","is","call","setNonIdxError","_x2","modelJSON","Object","prototype","hasOwnProperty","operation","transformUsername","_ref4","_error","errorObj","idxStateError","showErrorBanner","rawIdxState","isIonErrorResponse","convertFormErrors","logConsoleError","showCustomFormErrorCallout","_idxStateError","messages","assign","hasFormError","_x3","_x4","_x5","_ref5","idxResp","_x6","disabled","button","$el","toggleClass","default"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/controllers/FormController.js"],"sourcesContent":["import { Controller, loc } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport ViewFactory from '../view-builder/ViewFactory.js';\nimport IonResponseHelper from '../ion/IonResponseHelper.js';\nimport { getV1ClassName } from '../ion/ViewClassNamesFactory.js';\nimport { TERMINAL_FORMS, ORG_PASSWORD_RECOVERY_LINK, FORMS, FORM_NAME_TO_OPERATION_MAP } from '../ion/RemediationConstants.js';\nimport transformPayload from '../ion/payloadTransformer.js';\nimport Util from '../../util/Util.js';\nimport sessionStorageHelper from '../client/sessionStorageHelper.js';\nimport { IdxStatus } from '@okta/okta-auth-js';\nimport { CONFIGURED_FLOW } from '../client/constants.js';\nimport { ConfigError } from '../../util/Errors.js';\nimport 'cross-fetch';\nimport '../../../packages/@okta/courage-dist/esm/lib/underscore/underscore-min.js';\nimport '../../util/BrowserFeatures.js';\nimport { updateAppState } from '../client/updateAppState.js';\nimport fn from '../../util/CookieUtil.js';\n\n/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar FormController = Controller.extend({\n  className: 'form-controller',\n  appStateEvents: {\n    'change:currentFormName': 'handleFormNameChange',\n    'afterError': 'handleAfterError',\n    'invokeAction': 'handleInvokeAction',\n    'saveForm': 'handleSaveForm',\n    'switchForm': 'handleSwitchForm'\n  },\n  preRender: function () {\n    this.removeChildren();\n  },\n  postRender: function () {\n    const currentViewState = this.options.appState.getCurrentViewState();\n    // TODO: add comments regarding when `currentViewState` would be null?\n    if (!currentViewState) {\n      return;\n    }\n    this.clearMetadata();\n    let formName = currentViewState.name;\n    if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n      formName = 'identify-recovery';\n    }\n    const TheView = ViewFactory.create(formName, this.options.appState.get('authenticatorKey'));\n    try {\n      this.formView = this.add(TheView, {\n        options: {\n          currentViewState: currentViewState\n        }\n      }).last();\n    } catch (error) {\n      // This is the place where runtime error (NPE) happens at most of time.\n      // It has been swallowed by Q.js hence add try/catch to surface up errors.\n      this.options.settings.callGlobalError(error);\n      return;\n    }\n    this.triggerAfterRenderEvent();\n  },\n  clearMetadata: function () {\n    const formName = this.options.appState.get('currentFormName');\n    // TODO: OKTA-392835 shall not clear state handle at terminal page\n    if (TERMINAL_FORMS.includes(formName)) {\n      sessionStorageHelper.removeStateHandle();\n    }\n  },\n  triggerAfterRenderEvent: function () {\n    const contextData = this.createAfterEventContext();\n    this.trigger('afterRender', contextData);\n  },\n  handleFormNameChange: function () {\n    this.render();\n  },\n  handleAfterError: function (error) {\n    const contextData = this.createAfterEventContext();\n    const errorContextData = {\n      xhr: error,\n      errorSummary: error.responseJSON && error.responseJSON.errorSummary\n    };\n    // TODO: need some enhancement after https://github.com/okta/okta-idx-js/pull/27\n    // OKTA-318062\n    this.trigger('afterError', contextData, errorContextData);\n  },\n  createAfterEventContext: function () {\n    const formName = this.options.appState.get('currentFormName');\n    const authenticatorKey = this.options.appState.get('authenticatorKey');\n    const methodType = this.options.appState.get('authenticatorMethodType');\n    const isPasswordRecoveryFlow = this.options.appState.get('isPasswordRecoveryFlow');\n    const v1ControllerClassName = getV1ClassName(formName, authenticatorKey, methodType, isPasswordRecoveryFlow);\n    const eventData = {\n      controller: v1ControllerClassName,\n      formName: formName\n    };\n    if (authenticatorKey) {\n      eventData.authenticatorKey = authenticatorKey;\n    }\n    if (methodType) {\n      eventData.methodType = methodType;\n    }\n    return eventData;\n  },\n  handleSwitchForm: function (formName) {\n    // trigger formName change to change view\n    if (this.options.appState.get('messages')) {\n      // Clear messages before calling switch form.\n      // If a form has errors sent form API inside messages\n      // and user hits back to factors list which triggers switchForm,\n      // those error will show up on another screen that gets rendered after switchForm\n      this.options.appState.unset('messages');\n    }\n    this.options.appState.set('currentFormName', formName);\n  },\n  // eslint-disable-next-line max-statements\n  handleInvokeAction: async function (actionPath = '', actionParams = {}) {\n    const {\n      appState: appState,\n      settings: settings\n    } = this.options;\n\n    // For self-hosted scenario we need to start reset flow at identify page from scratch.\n    //  (Reusing state handle of transaction after failed sign-in attempt for reset flow is error prone)\n    // For Okta-hosted scenario we don't need to cancel/restart flow because SIW receives fresh state token\n    //  from backend on page load and doesn't save state handle to session storage after error.\n    if (actionPath === ORG_PASSWORD_RECOVERY_LINK && settings.get('oauth2Enabled')) {\n      appState.trigger('restartLoginFlow', 'resetPassword');\n      return;\n    }\n    const idx = appState.get('idx');\n    const {\n      stateHandle: stateHandle\n    } = idx.context;\n    let invokeOptions = {\n      exchangeCodeForTokens: false,\n      // we handle this in interactionCodeFlow.js\n      stateHandle: stateHandle\n    };\n    let error;\n\n    // Cancel action is executes synchronously\n    if (actionPath === 'cancel') {\n      // TODO: resolve race conditions caused by event pattern: OKTA-490220\n      settings.getAuthClient().transactionManager.clear({\n        clearIdxResponse: false\n      });\n      sessionStorageHelper.removeStateHandle();\n      appState.clearAppStateCache();\n      if (settings.get('oauth2Enabled')) {\n        // In this case we need to restart login flow and recreate transaction meta\n        // that will be used in interactionCodeFlow function\n        appState.trigger('restartLoginFlow');\n        return;\n      }\n    }\n    const invokeableForms = [FORMS.LAUNCH_AUTHENTICATOR, FORMS.CHALLENGE_WEBAUTHN_AUTOFILLUI_AUTHENTICATOR];\n    if (invokeableForms.includes(actionPath) && actionParams) {\n      //https://oktainc.atlassian.net/browse/OKTA-562885  a temp solution to send rememberMe when click the launch OV buttion.\n      //will redesign to handle FastPass silent probing case where no username and rememberMe opiton at all.\n      invokeOptions = {\n        ...invokeOptions,\n        actions: [{\n          name: actionPath,\n          params: actionParams\n        }]\n      };\n    } else if (idx['neededToProceed'].find(item => item.name === actionPath)) {\n      invokeOptions = {\n        ...invokeOptions,\n        step: actionPath\n      };\n    } else if (oktaUnderscore.isFunction(idx['actions'][actionPath])) {\n      invokeOptions = {\n        ...invokeOptions,\n        actions: [{\n          name: actionPath,\n          params: actionParams\n        }]\n      };\n    } else {\n      error = new ConfigError(`Invalid action selected: ${actionPath}`);\n      this.options.settings.callGlobalError(error);\n      await this.showFormErrors(this.formView.model, error, this.formView.form);\n      return;\n    }\n\n    // action will be executed asynchronously\n    await this.invokeAction(invokeOptions);\n  },\n  invokeAction: async function (invokeOptions) {\n    const authClient = this.options.settings.getAuthClient();\n    let resp;\n    let error;\n    try {\n      resp = await authClient.idx.proceed(invokeOptions);\n      if (resp.requestDidSucceed === false) {\n        error = resp;\n      }\n    } catch (e) {\n      error = e;\n    }\n\n    // if request did not succeed, show error on the current form\n    if (error) {\n      await this.showFormErrors(this.formView.model, error, this.formView.form);\n      return;\n    }\n\n    // process response, may render a new form\n    await this.handleIdxResponse(resp);\n  },\n  // eslint-disable-next-line max-statements, complexity\n  handleSaveForm: async function (model) {\n    const formName = model.get('formName');\n\n    // Toggle Form saving status (e.g. disabling save button, etc)\n    this.toggleFormButtonState(true);\n    model.trigger('request');\n\n    // Use full page redirection if necessary\n    if (model.get('useRedirect')) {\n      // Clear when navigates away from SIW page, e.g. success, IdP Authenticator.\n      // Because SIW sort of finished its current /transaction/\n      sessionStorageHelper.removeStateHandle();\n\n      // OKTA-635926: do not redirect without user gesture for ov enrollment on android\n      // if Util.isAndroidOVEnrollment() returns true we use a user gesture to complete the redirect in AutoRedirectView\n      if (!Util.isAndroidOVEnrollment()) {\n        const currentViewState = this.options.appState.getCurrentViewState();\n        // OKTA-702402: redirect only if/when the page is visible\n        Util.executeOnVisiblePage(() => {\n          Util.redirectWithFormGet(currentViewState.href);\n        });\n      }\n      return;\n    }\n    const payload = transformPayload(formName, model);\n    // Run hook: transform the user name (a.k.a identifier)\n    const values = this.transformIdentifier(formName, payload);\n\n    // widget rememberMe feature stores the entered identifier in a cookie, to pre-fill the form on subsequent visits to page\n    if (this.options.settings.get('features.rememberMe')) {\n      if (values.identifier) {\n        fn.setUsernameCookie(values.identifier);\n      }\n    } else {\n      fn.removeUsernameCookie();\n    }\n\n    // Error out when this is not a remediation form. Unexpected Exception.\n    if (!this.options.appState.hasRemediationObject(formName)) {\n      this.options.settings.callGlobalError(`Cannot find http action for \"${formName}\".`);\n      await this.showFormErrors(this.formView.model, 'Cannot find action to proceed.', this.formView.form);\n      return;\n    }\n\n    // Reset password in identity-first flow needs some help to auto-select password and begin the reset flow\n    if (formName === 'identify' && this.options.settings.get('flow') === CONFIGURED_FLOW.RESET_PASSWORD) {\n      values.authenticator = 'okta_password';\n    }\n\n    // Submit request to idx endpoint\n    const authClient = this.options.settings.getAuthClient();\n    const idxOptions = {\n      exchangeCodeForTokens: false // we handle this in interactionCodeFlow.js\n    };\n\n    try {\n      const idx = this.options.appState.get('idx');\n      const {\n        stateHandle: stateHandle\n      } = idx.context;\n      const resp = await authClient.idx.proceed({\n        ...idxOptions,\n        step: formName,\n        stateHandle: stateHandle,\n        ...values\n      });\n      if (resp.status === IdxStatus.FAILURE) {\n        throw resp.error; // caught and handled in this function\n      }\n      // follow idx transaction to render terminal view for session expired error\n      if (IonResponseHelper.isIdxSessionExpiredError(resp)) {\n        const authClient = this.settings.getAuthClient();\n        authClient.transactionManager.clear();\n        await this.handleIdxResponse(resp);\n        return;\n      }\n      // If the last request did not succeed, show errors on the current form\n      // Special case: Okta server responds 401 status code with WWW-Authenticate header and new remediation\n      // so that the iOS/MacOS credential SSO extension (Okta Verify) can intercept\n      // the response reaches here when Okta Verify is not installed\n      // we need to return an idx object so that\n      // the SIW can proceed to the next step without showing error\n      if (resp.requestDidSucceed === false && !resp.stepUp) {\n        await this.showFormErrors(model, resp, this.formView.form);\n        return;\n      }\n      const onSuccess = this.handleIdxResponse.bind(this, resp);\n      if (formName === FORMS.ENROLL_PROFILE) {\n        var _values$userProfile;\n        // call registration (aka enroll profile) hook\n        this.settings.postRegistrationSubmit(values === null || values === void 0 ? void 0 : (_values$userProfile = values.userProfile) === null || _values$userProfile === void 0 ? void 0 : _values$userProfile.email, onSuccess, error => {\n          model.trigger('error', model, {\n            responseJSON: error\n          });\n        });\n      } else {\n        await onSuccess();\n      }\n    } catch (error) {\n      var _error$is;\n      if ((_error$is = error.is) !== null && _error$is !== void 0 && _error$is.call(error, 'terminal')) {\n        this.options.appState.setNonIdxError(error);\n      } else {\n        await this.showFormErrors(model, error, this.formView.form);\n      }\n    } finally {\n      this.toggleFormButtonState(false);\n    }\n  },\n  transformIdentifier: function (formName, modelJSON) {\n    if (Object.prototype.hasOwnProperty.call(modelJSON, 'identifier')) {\n      // The callback function is passed two arguments:\n      // 1) username: The name entered by the user\n      // 2) operation: The type of operation the user is trying to perform:\n      //      - PRIMARY_AUTH\n      //      - FORGOT_PASSWORD\n      //      - UNLOCK_ACCOUNT\n      const operation = FORM_NAME_TO_OPERATION_MAP[formName];\n      modelJSON.identifier = this.settings.transformUsername(modelJSON.identifier, operation);\n    }\n    return modelJSON;\n  },\n  /**\n   * @param model current form model\n   * @param error any errors after user action\n   * @param form current form\n   * Handle errors that get displayed right after any user action. After such form errors widget doesn't\n   * reload or re-render, but updates the AppSate with latest remediation.\n   */\n  showFormErrors: async function (model, error, form) {\n    var _error;\n    /* eslint max-statements: [2, 24] */\n    let errorObj;\n    let idxStateError;\n    let showErrorBanner = true;\n    model.trigger('clearFormError');\n    if (!error) {\n      error = 'FormController - unknown error found';\n      this.options.settings.callGlobalError(error);\n    }\n    if ((_error = error) !== null && _error !== void 0 && _error.rawIdxState) {\n      idxStateError = error;\n      error = error.rawIdxState;\n    }\n    if (IonResponseHelper.isIonErrorResponse(error)) {\n      errorObj = IonResponseHelper.convertFormErrors(error);\n    } else if (error.errorSummary) {\n      errorObj = {\n        responseJSON: error\n      };\n    } else {\n      Util.logConsoleError(error);\n      errorObj = {\n        responseJSON: {\n          errorSummary: loc('error.unsupported.response', 'login')\n        }\n      };\n    }\n    if (oktaUnderscore.isFunction(form === null || form === void 0 ? void 0 : form.showCustomFormErrorCallout)) {\n      var _idxStateError;\n      showErrorBanner = !form.showCustomFormErrorCallout(errorObj, (_idxStateError = idxStateError) === null || _idxStateError === void 0 ? void 0 : _idxStateError.messages);\n    }\n\n    // show error before updating app state.\n    model.trigger('error', model, errorObj, showErrorBanner);\n    idxStateError = Object.assign({}, idxStateError, {\n      hasFormError: true\n    });\n\n    // OKTA-725716: Don't save failed IDX response to state\n  },\n  handleIdxResponse: async function (idxResp) {\n    await updateAppState(this.options.appState, idxResp);\n  },\n  /**\n   * SignIn widget has its own (hacky) way to customize the button disabled state:\n   * adding `link-button-disabled` despite the name was intend only to disable\n   * `link-button`.\n   * Instead of doing decent refactor, we want to follow the convention for now.\n   *\n   * @param {boolean} disabled whether add extra disable CSS class.\n   */\n  toggleFormButtonState: function (disabled) {\n    const button = this.$el.find('.o-form-button-bar .button');\n    button.toggleClass('link-button-disabled', disabled);\n  }\n});\n\nexport { FormController as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}