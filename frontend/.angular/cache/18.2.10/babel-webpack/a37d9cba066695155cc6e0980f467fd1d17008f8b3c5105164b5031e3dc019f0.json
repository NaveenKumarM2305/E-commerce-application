{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'http://localhost:8080/api/products';\n    this.categoryUrl = 'http://localhost:8080/api/product-category';\n  }\n  getProductList(theCategoryId) {\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n    return this.getProducts(searchUrl);\n  }\n  getProducts(searchUrl) {\n    return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n  }\n  getProductCategories() {\n    return this.httpClient.get(this.categoryUrl).pipe(map(response => response._embedded.productCategory));\n  }\n  static {\n    this.ɵfac = function ProductService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProductService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","ProductService","constructor","httpClient","baseUrl","categoryUrl","getProductList","theCategoryId","searchUrl","getProducts","get","pipe","response","_embedded","products","getProductCategories","productCategory","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\SpringBOot\\ecommerce-project\\03-frontend\\angular-ecommerce\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Product } from '../common/product';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ProductCategory } from '../common/product-category';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  private baseUrl = 'http://localhost:8080/api/products';\n\n  private categoryUrl = 'http://localhost:8080/api/product-category';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getProductList(theCategoryId: number): Observable<Product[]> {\n\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n\n    return this.getProducts(searchUrl);\n  }\n\n  \n\n  private getProducts(searchUrl: string): Observable<Product[]> {\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(map(response => response._embedded.products));\n  }\n\n  getProductCategories(): Observable<ProductCategory[]> {\n\n    return this.httpClient.get<GetResponseProductCategory>(this.categoryUrl).pipe(\n      map(response => response._embedded.productCategory)\n    );\n  }\n\n}\n\ninterface GetResponseProducts {\n  _embedded: {\n    products: Product[];\n  }\n}\n\ninterface GetResponseProductCategory {\n  _embedded: {\n    productCategory: ProductCategory[];\n  }\n}"],"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAJtB,KAAAC,OAAO,GAAG,oCAAoC;IAE9C,KAAAC,WAAW,GAAG,4CAA4C;EAEpB;EAE9CC,cAAcA,CAACC,aAAqB;IAElC;IACA,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACJ,OAAO,+BAA+BG,aAAa,EAAE;IAE/E,OAAO,IAAI,CAACE,WAAW,CAACD,SAAS,CAAC;EACpC;EAIQC,WAAWA,CAACD,SAAiB;IACnC,OAAO,IAAI,CAACL,UAAU,CAACO,GAAG,CAAsBF,SAAS,CAAC,CAACG,IAAI,CAACX,GAAG,CAACY,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC;EAC/G;EAEAC,oBAAoBA,CAAA;IAElB,OAAO,IAAI,CAACZ,UAAU,CAACO,GAAG,CAA6B,IAAI,CAACL,WAAW,CAAC,CAACM,IAAI,CAC3EX,GAAG,CAACY,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACG,eAAe,CAAC,CACpD;EACH;;;uCA3BWf,cAAc,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdnB,cAAc;MAAAoB,OAAA,EAAdpB,cAAc,CAAAqB,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}