{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../errors/WWWAuthError.js';\nimport { getWellKnown } from './endpoints/well-known.js';\nimport { btoa as b } from '../crypto/browser.js';\nimport { toQueryString } from '../util/url.js';\nimport { post } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport { TokenKind } from './types/Token.js';\nconst hintMap = {\n  accessToken: 'access_token',\n  idToken: 'id_token',\n  refreshToken: 'refresh_token'\n};\nfunction oidcIntrospect(_x, _x2, _x3) {\n  return _oidcIntrospect.apply(this, arguments);\n}\nfunction _oidcIntrospect() {\n  _oidcIntrospect = _asyncToGenerator(function* (sdk, kind, token) {\n    var _a;\n    let issuer;\n    let clientId = sdk.options.clientId;\n    let clientSecret = sdk.options.clientSecret;\n    if (!token) {\n      token = sdk.tokenManager.getTokens()[kind];\n    }\n    if (!token) {\n      throw new AuthSdkError(`unable to find ${kind} in storage or fn params`);\n    }\n    if (kind !== TokenKind.ACCESS) {\n      issuer = token === null || token === void 0 ? void 0 : token.issuer;\n    } else {\n      issuer = (_a = token === null || token === void 0 ? void 0 : token.claims) === null || _a === void 0 ? void 0 : _a.iss;\n    }\n    issuer = issuer || sdk.options.issuer;\n    if (!clientId) {\n      throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to introspect a token');\n    }\n    if (!issuer) {\n      throw new AuthSdkError('Unable to find issuer');\n    }\n    const {\n      introspection_endpoint: introspectUrl\n    } = yield getWellKnown(sdk, issuer);\n    const authHeader = clientSecret ? b(`${clientId}:${clientSecret}`) : b(clientId);\n    const args = toQueryString({\n      token_type_hint: hintMap[kind],\n      token: token[kind]\n    }).slice(1);\n    return post(sdk, introspectUrl, args, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + authHeader\n      }\n    });\n  });\n  return _oidcIntrospect.apply(this, arguments);\n}\nexport { oidcIntrospect };","map":{"version":3,"names":["AuthSdkError","getWellKnown","btoa","b","toQueryString","post","TokenKind","hintMap","accessToken","idToken","refreshToken","oidcIntrospect","_x","_x2","_x3","_oidcIntrospect","apply","arguments","_asyncToGenerator","sdk","kind","token","_a","issuer","clientId","options","clientSecret","tokenManager","getTokens","ACCESS","claims","iss","introspection_endpoint","introspectUrl","authHeader","args","token_type_hint","slice","headers"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/introspect.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../errors/WWWAuthError.js';\nimport { getWellKnown } from './endpoints/well-known.js';\nimport { btoa as b } from '../crypto/browser.js';\nimport { toQueryString } from '../util/url.js';\nimport { post } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport { TokenKind } from './types/Token.js';\n\nconst hintMap = {\n    accessToken: 'access_token',\n    idToken: 'id_token',\n    refreshToken: 'refresh_token'\n};\nasync function oidcIntrospect(sdk, kind, token) {\n    var _a;\n    let issuer;\n    let clientId = sdk.options.clientId;\n    let clientSecret = sdk.options.clientSecret;\n    if (!token) {\n        token = sdk.tokenManager.getTokens()[kind];\n    }\n    if (!token) {\n        throw new AuthSdkError(`unable to find ${kind} in storage or fn params`);\n    }\n    if (kind !== TokenKind.ACCESS) {\n        issuer = token === null || token === void 0 ? void 0 : token.issuer;\n    }\n    else {\n        issuer = (_a = token === null || token === void 0 ? void 0 : token.claims) === null || _a === void 0 ? void 0 : _a.iss;\n    }\n    issuer = issuer || sdk.options.issuer;\n    if (!clientId) {\n        throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to introspect a token');\n    }\n    if (!issuer) {\n        throw new AuthSdkError('Unable to find issuer');\n    }\n    const { introspection_endpoint: introspectUrl } = await getWellKnown(sdk, issuer);\n    const authHeader = clientSecret ? b(`${clientId}:${clientSecret}`) : b(clientId);\n    const args = toQueryString({\n        token_type_hint: hintMap[kind],\n        token: token[kind]\n    }).slice(1);\n    return post(sdk, introspectUrl, args, {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Authorization': 'Basic ' + authHeader\n        }\n    });\n}\n\nexport { oidcIntrospect };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,YAAY,MAAM,2BAA2B;AACpD,OAAO,2BAA2B;AAClC,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,IAAI,IAAIC,CAAC,QAAQ,sBAAsB;AAChD,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,SAASC,IAAI,QAAQ,oBAAoB;AACzC,OAAO,cAAc;AACrB,OAAO,WAAW;AAClB,OAAO,aAAa;AACpB,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,MAAMC,OAAO,GAAG;EACZC,WAAW,EAAE,cAAc;EAC3BC,OAAO,EAAE,UAAU;EACnBC,YAAY,EAAE;AAClB,CAAC;AAAC,SACaC,cAAcA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,gBAAA;EAAAA,eAAA,GAAAG,iBAAA,CAA7B,WAA8BC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC5C,IAAIC,EAAE;IACN,IAAIC,MAAM;IACV,IAAIC,QAAQ,GAAGL,GAAG,CAACM,OAAO,CAACD,QAAQ;IACnC,IAAIE,YAAY,GAAGP,GAAG,CAACM,OAAO,CAACC,YAAY;IAC3C,IAAI,CAACL,KAAK,EAAE;MACRA,KAAK,GAAGF,GAAG,CAACQ,YAAY,CAACC,SAAS,CAAC,CAAC,CAACR,IAAI,CAAC;IAC9C;IACA,IAAI,CAACC,KAAK,EAAE;MACR,MAAM,IAAIrB,YAAY,CAAC,kBAAkBoB,IAAI,0BAA0B,CAAC;IAC5E;IACA,IAAIA,IAAI,KAAKd,SAAS,CAACuB,MAAM,EAAE;MAC3BN,MAAM,GAAGF,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACE,MAAM;IACvE,CAAC,MACI;MACDA,MAAM,GAAG,CAACD,EAAE,GAAGD,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACS,MAAM,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACS,GAAG;IAC1H;IACAR,MAAM,GAAGA,MAAM,IAAIJ,GAAG,CAACM,OAAO,CAACF,MAAM;IACrC,IAAI,CAACC,QAAQ,EAAE;MACX,MAAM,IAAIxB,YAAY,CAAC,gFAAgF,CAAC;IAC5G;IACA,IAAI,CAACuB,MAAM,EAAE;MACT,MAAM,IAAIvB,YAAY,CAAC,uBAAuB,CAAC;IACnD;IACA,MAAM;MAAEgC,sBAAsB,EAAEC;IAAc,CAAC,SAAShC,YAAY,CAACkB,GAAG,EAAEI,MAAM,CAAC;IACjF,MAAMW,UAAU,GAAGR,YAAY,GAAGvB,CAAC,CAAC,GAAGqB,QAAQ,IAAIE,YAAY,EAAE,CAAC,GAAGvB,CAAC,CAACqB,QAAQ,CAAC;IAChF,MAAMW,IAAI,GAAG/B,aAAa,CAAC;MACvBgC,eAAe,EAAE7B,OAAO,CAACa,IAAI,CAAC;MAC9BC,KAAK,EAAEA,KAAK,CAACD,IAAI;IACrB,CAAC,CAAC,CAACiB,KAAK,CAAC,CAAC,CAAC;IACX,OAAOhC,IAAI,CAACc,GAAG,EAAEc,aAAa,EAAEE,IAAI,EAAE;MAClCG,OAAO,EAAE;QACL,cAAc,EAAE,mCAAmC;QACnD,eAAe,EAAE,QAAQ,GAAGJ;MAChC;IACJ,CAAC,CAAC;EACN,CAAC;EAAA,OAAAnB,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASN,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}