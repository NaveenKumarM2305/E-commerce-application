{"ast":null,"code":"import { map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Luv2ShopFormService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.countriesUrl = 'http://localhost:8080/api/countries';\n    this.statesUrl = 'http://localhost:8080/api/states';\n  }\n  getCreditCardMonths(startMonth) {\n    let data = [];\n    for (let theMonth = startMonth; theMonth <= 12; theMonth++) {\n      data.push(theMonth);\n    }\n    return of(data);\n  }\n  getCreditCardYears() {\n    let data = [];\n    const startYear = new Date().getFullYear();\n    const endYear = startYear + 10;\n    for (let theYear = startYear; theYear <= endYear; theYear++) {\n      data.push(theYear);\n    }\n    return of(data);\n  }\n  getCountries() {\n    return this.httpClient.get(this.countriesUrl).pipe(map(response => response._embedded.countries));\n  }\n  getStates(theCountryCode) {\n    const searchStatesUrl = `${this.statesUrl}/search/findByCountryCode?code=${theCountryCode}`;\n    return this.httpClient.get(searchStatesUrl).pipe(map(response => response._embedded.states));\n  }\n  static {\n    this.ɵfac = function Luv2ShopFormService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Luv2ShopFormService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: Luv2ShopFormService,\n      factory: Luv2ShopFormService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","of","Luv2ShopFormService","constructor","httpClient","countriesUrl","statesUrl","getCreditCardMonths","startMonth","data","theMonth","push","getCreditCardYears","startYear","Date","getFullYear","endYear","theYear","getCountries","get","pipe","response","_embedded","countries","getStates","theCountryCode","searchStatesUrl","states","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\SpringBOot\\ecommerce-project\\03-frontend\\angular-ecommerce\\src\\app\\services\\luv2-shop-form.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable, of } from 'rxjs';\nimport { Country } from '../common/country';\nimport { State } from '../common/state';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Luv2ShopFormService {\n\n  private countriesUrl='http://localhost:8080/api/countries';\n  private statesUrl='http://localhost:8080/api/states';\n\n  constructor(private httpClient:HttpClient) { }\n\n  getCreditCardMonths(startMonth:number):Observable<number[]>{\n    let data:number[]=[];\n    for(let theMonth=startMonth;theMonth<=12;theMonth++){\n      data.push(theMonth);\n    }\n    return of(data);\n  }\n\n  getCreditCardYears():Observable<number[]>{\n    let data:number[]=[];\n    const startYear:number=new Date().getFullYear();\n    const endYear:number=startYear+10;\n    for(let theYear=startYear;theYear<=endYear;theYear++){\n      data.push(theYear);\n    }\n    return of(data);\n  }\n  \n  getCountries():Observable<Country[]>{\n    return this.httpClient.get<GetResponseCountries>(this.countriesUrl).pipe(map(\n      response=>response._embedded.countries\n    ));\n  }\n\n  getStates(theCountryCode:string):Observable<State[]>{\n    const searchStatesUrl= `${this.statesUrl}/search/findByCountryCode?code=${theCountryCode}`;\n    return this.httpClient.get<GetResponseStates>(searchStatesUrl).pipe(map(\n      response=>response._embedded.states\n    ));\n  }\n}\n\ninterface GetResponseCountries{\n  _embedded:{\n    countries:Country[];\n  }\n}\ninterface GetResponseStates{\n  _embedded:{\n    states:State[];\n  }\n}\n\n"],"mappings":"AAEA,SAASA,GAAG,EAAcC,EAAE,QAAQ,MAAM;;;AAO1C,OAAM,MAAOC,mBAAmB;EAK9BC,YAAoBC,UAAqB;IAArB,KAAAA,UAAU,GAAVA,UAAU;IAHtB,KAAAC,YAAY,GAAC,qCAAqC;IAClD,KAAAC,SAAS,GAAC,kCAAkC;EAEP;EAE7CC,mBAAmBA,CAACC,UAAiB;IACnC,IAAIC,IAAI,GAAU,EAAE;IACpB,KAAI,IAAIC,QAAQ,GAACF,UAAU,EAACE,QAAQ,IAAE,EAAE,EAACA,QAAQ,EAAE,EAAC;MAClDD,IAAI,CAACE,IAAI,CAACD,QAAQ,CAAC;IACrB;IACA,OAAOT,EAAE,CAACQ,IAAI,CAAC;EACjB;EAEAG,kBAAkBA,CAAA;IAChB,IAAIH,IAAI,GAAU,EAAE;IACpB,MAAMI,SAAS,GAAQ,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;IAC/C,MAAMC,OAAO,GAAQH,SAAS,GAAC,EAAE;IACjC,KAAI,IAAII,OAAO,GAACJ,SAAS,EAACI,OAAO,IAAED,OAAO,EAACC,OAAO,EAAE,EAAC;MACnDR,IAAI,CAACE,IAAI,CAACM,OAAO,CAAC;IACpB;IACA,OAAOhB,EAAE,CAACQ,IAAI,CAAC;EACjB;EAEAS,YAAYA,CAAA;IACV,OAAO,IAAI,CAACd,UAAU,CAACe,GAAG,CAAuB,IAAI,CAACd,YAAY,CAAC,CAACe,IAAI,CAACpB,GAAG,CAC1EqB,QAAQ,IAAEA,QAAQ,CAACC,SAAS,CAACC,SAAS,CACvC,CAAC;EACJ;EAEAC,SAASA,CAACC,cAAqB;IAC7B,MAAMC,eAAe,GAAE,GAAG,IAAI,CAACpB,SAAS,kCAAkCmB,cAAc,EAAE;IAC1F,OAAO,IAAI,CAACrB,UAAU,CAACe,GAAG,CAAoBO,eAAe,CAAC,CAACN,IAAI,CAACpB,GAAG,CACrEqB,QAAQ,IAAEA,QAAQ,CAACC,SAAS,CAACK,MAAM,CACpC,CAAC;EACJ;;;uCApCWzB,mBAAmB,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAnB7B,mBAAmB;MAAA8B,OAAA,EAAnB9B,mBAAmB,CAAA+B,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}