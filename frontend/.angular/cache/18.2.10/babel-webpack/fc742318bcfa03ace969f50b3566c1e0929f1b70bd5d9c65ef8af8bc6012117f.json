{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'http://localhost:8080/api/products';\n    this.categoryUrl = 'http://localhost:8080/api/product-category';\n  }\n  getProductList(theCategoryId) {\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n    return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n  }\n  getProducts(searchUrl) {\n    return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n  }\n  getProductCategories() {\n    return this.httpClient.get(this.categoryUrl).pipe(map(response => response._embedded.productCategory));\n  }\n  searchProducts(theKeyword) {\n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\n    return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n  }\n  searchProductPaginate(thePage, thePageSize, theKeyword) {\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}}` + `&page=${thePage}&size=${thePageSize}`;\n    return this.httpClient.get(searchUrl);\n  }\n  getProduct(theProductId) {\n    const productUrl = `${this.baseUrl}/${theProductId}`;\n    return this.httpClient.get(productUrl);\n  }\n  getProductListPaginate(thePage, thePageSize, theCategoryId) {\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}` + `&page=${thePage}&size=${thePageSize}`;\n    return this.httpClient.get(searchUrl);\n  }\n  static {\n    this.ɵfac = function ProductService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProductService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","ProductService","constructor","httpClient","baseUrl","categoryUrl","getProductList","theCategoryId","searchUrl","get","pipe","response","_embedded","products","getProducts","getProductCategories","productCategory","searchProducts","theKeyword","searchProductPaginate","thePage","thePageSize","getProduct","theProductId","productUrl","getProductListPaginate","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\SpringBOot\\ecommerce-project\\03-frontend\\angular-ecommerce\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Product } from '../common/product';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ProductCategory } from '../common/product-category';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  \n  private baseUrl = 'http://localhost:8080/api/products';\n\n  private categoryUrl = 'http://localhost:8080/api/product-category';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getProductList(theCategoryId: number): Observable<Product[]> {\n\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(map(response=>response._embedded.products));\n  }\n\n  \n\n  private getProducts(searchUrl: string): Observable<Product[]> {\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(map(response => response._embedded.products));\n  }\n\n  getProductCategories(): Observable<ProductCategory[]> {\n\n    return this.httpClient.get<GetResponseProductCategory>(this.categoryUrl).pipe(\n      map(response => response._embedded.productCategory)\n    );\n  }\n\n  searchProducts(theKeyword: string):Observable<Product[]> {\n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\n\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(map(response=>response._embedded.products));\n  }\n\n  searchProductPaginate(thePage:number,thePageSize:number,theKeyword: number): Observable<GetResponseProducts> {\n\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}}`+`&page=${thePage}&size=${thePageSize}`;\n\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\n  }\n\n  getProduct(theProductId: number):Observable<Product> {\n    const productUrl=`${this.baseUrl}/${theProductId}`;\n    return this.httpClient.get<Product>(productUrl);\n  }\n \n  getProductListPaginate(thePage:number,thePageSize:number,theCategoryId: number): Observable<GetResponseProducts> {\n\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`+`&page=${thePage}&size=${thePageSize}`;\n\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\n  }\n\n\n}\n\ninterface GetResponseProducts {\n  _embedded: {\n    products: Product[];\n  },\n  page:{\n    size:number,\n    totalElements:number,\n    totalPages:number,\n    number:number\n  }\n}\n\ninterface GetResponseProductCategory {\n  _embedded: {\n    productCategory: ProductCategory[];\n  }\n}"],"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAJtB,KAAAC,OAAO,GAAG,oCAAoC;IAE9C,KAAAC,WAAW,GAAG,4CAA4C;EAEpB;EAE9CC,cAAcA,CAACC,aAAqB;IAElC;IACA,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACJ,OAAO,+BAA+BG,aAAa,EAAE;IAE/E,OAAO,IAAI,CAACJ,UAAU,CAACM,GAAG,CAAsBD,SAAS,CAAC,CAACE,IAAI,CAACV,GAAG,CAACW,QAAQ,IAAEA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC;EAC7G;EAIQC,WAAWA,CAACN,SAAiB;IACnC,OAAO,IAAI,CAACL,UAAU,CAACM,GAAG,CAAsBD,SAAS,CAAC,CAACE,IAAI,CAACV,GAAG,CAACW,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC;EAC/G;EAEAE,oBAAoBA,CAAA;IAElB,OAAO,IAAI,CAACZ,UAAU,CAACM,GAAG,CAA6B,IAAI,CAACJ,WAAW,CAAC,CAACK,IAAI,CAC3EV,GAAG,CAACW,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACI,eAAe,CAAC,CACpD;EACH;EAEAC,cAAcA,CAACC,UAAkB;IAC/B,MAAMV,SAAS,GAAG,GAAG,IAAI,CAACJ,OAAO,qCAAqCc,UAAU,EAAE;IAElF,OAAO,IAAI,CAACf,UAAU,CAACM,GAAG,CAAsBD,SAAS,CAAC,CAACE,IAAI,CAACV,GAAG,CAACW,QAAQ,IAAEA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC;EAC7G;EAEAM,qBAAqBA,CAACC,OAAc,EAACC,WAAkB,EAACH,UAAkB;IAExE;IACA,MAAMV,SAAS,GAAG,GAAG,IAAI,CAACJ,OAAO,qCAAqCc,UAAU,GAAG,GAAC,SAASE,OAAO,SAASC,WAAW,EAAE;IAE1H,OAAO,IAAI,CAAClB,UAAU,CAACM,GAAG,CAAsBD,SAAS,CAAC;EAC5D;EAEAc,UAAUA,CAACC,YAAoB;IAC7B,MAAMC,UAAU,GAAC,GAAG,IAAI,CAACpB,OAAO,IAAImB,YAAY,EAAE;IAClD,OAAO,IAAI,CAACpB,UAAU,CAACM,GAAG,CAAUe,UAAU,CAAC;EACjD;EAEAC,sBAAsBA,CAACL,OAAc,EAACC,WAAkB,EAACd,aAAqB;IAE5E;IACA,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACJ,OAAO,+BAA+BG,aAAa,EAAE,GAAC,SAASa,OAAO,SAASC,WAAW,EAAE;IAEtH,OAAO,IAAI,CAAClB,UAAU,CAACM,GAAG,CAAsBD,SAAS,CAAC;EAC5D;;;uCAtDWP,cAAc,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAd5B,cAAc;MAAA6B,OAAA,EAAd7B,cAAc,CAAA8B,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}