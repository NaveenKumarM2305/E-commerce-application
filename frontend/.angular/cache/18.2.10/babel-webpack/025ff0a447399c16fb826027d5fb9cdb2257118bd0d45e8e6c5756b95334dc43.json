{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport './types/Token.js';\nimport { isTransactionMeta } from './types/Transaction.js';\nimport { warn } from '../util/console.js';\nimport { clearTransactionFromSharedStorage, saveTransactionToSharedStorage, pruneSharedStorage, loadTransactionFromSharedStorage } from './util/sharedStorage.js';\nfunction createTransactionManager() {\n  return class TransactionManager {\n    constructor(options) {\n      this.storageManager = options.storageManager;\n      this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n      this.saveLastResponse = options.saveLastResponse === false ? false : true;\n      this.options = options;\n    }\n    clear(options = {}) {\n      const transactionStorage = this.storageManager.getTransactionStorage();\n      const meta = transactionStorage.getStorage();\n      transactionStorage.clearStorage();\n      if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n        const state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);\n        if (state) {\n          clearTransactionFromSharedStorage(this.storageManager, state);\n        }\n      }\n    }\n    save(meta, options = {}) {\n      let storage = this.storageManager.getTransactionStorage();\n      const obj = storage.getStorage();\n      if (isTransactionMeta(obj) && !options.muteWarning) {\n        warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n      }\n      storage.setStorage(meta);\n      if (this.enableSharedStorage && meta.state) {\n        saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n      }\n    }\n    exists(options = {}) {\n      try {\n        const meta = this.load(options);\n        return !!meta;\n      } catch (_a) {\n        return false;\n      }\n    }\n    load(options = {}) {\n      let meta;\n      if (this.enableSharedStorage && options.state) {\n        pruneSharedStorage(this.storageManager);\n        meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n        if (isTransactionMeta(meta)) {\n          return meta;\n        }\n      }\n      let storage = this.storageManager.getTransactionStorage();\n      meta = storage.getStorage();\n      if (isTransactionMeta(meta)) {\n        return meta;\n      }\n      return null;\n    }\n  };\n}\nexport { createTransactionManager };","map":{"version":3,"names":["isTransactionMeta","warn","clearTransactionFromSharedStorage","saveTransactionToSharedStorage","pruneSharedStorage","loadTransactionFromSharedStorage","createTransactionManager","TransactionManager","constructor","options","storageManager","enableSharedStorage","saveLastResponse","clear","transactionStorage","getTransactionStorage","meta","getStorage","clearStorage","clearSharedStorage","state","save","storage","obj","muteWarning","setStorage","exists","load","_a"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/TransactionManager.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport './types/Token.js';\nimport { isTransactionMeta } from './types/Transaction.js';\nimport { warn } from '../util/console.js';\nimport { clearTransactionFromSharedStorage, saveTransactionToSharedStorage, pruneSharedStorage, loadTransactionFromSharedStorage } from './util/sharedStorage.js';\n\nfunction createTransactionManager() {\n    return class TransactionManager {\n        constructor(options) {\n            this.storageManager = options.storageManager;\n            this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n            this.saveLastResponse = options.saveLastResponse === false ? false : true;\n            this.options = options;\n        }\n        clear(options = {}) {\n            const transactionStorage = this.storageManager.getTransactionStorage();\n            const meta = transactionStorage.getStorage();\n            transactionStorage.clearStorage();\n            if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n                const state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);\n                if (state) {\n                    clearTransactionFromSharedStorage(this.storageManager, state);\n                }\n            }\n        }\n        save(meta, options = {}) {\n            let storage = this.storageManager.getTransactionStorage();\n            const obj = storage.getStorage();\n            if (isTransactionMeta(obj) && !options.muteWarning) {\n                warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n            }\n            storage.setStorage(meta);\n            if (this.enableSharedStorage && meta.state) {\n                saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n            }\n        }\n        exists(options = {}) {\n            try {\n                const meta = this.load(options);\n                return !!meta;\n            }\n            catch (_a) {\n                return false;\n            }\n        }\n        load(options = {}) {\n            let meta;\n            if (this.enableSharedStorage && options.state) {\n                pruneSharedStorage(this.storageManager);\n                meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n                if (isTransactionMeta(meta)) {\n                    return meta;\n                }\n            }\n            let storage = this.storageManager.getTransactionStorage();\n            meta = storage.getStorage();\n            if (isTransactionMeta(meta)) {\n                return meta;\n            }\n            return null;\n        }\n    };\n}\n\nexport { createTransactionManager };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,kBAAkB;AACzB,SAASA,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,IAAI,QAAQ,oBAAoB;AACzC,SAASC,iCAAiC,EAAEC,8BAA8B,EAAEC,kBAAkB,EAAEC,gCAAgC,QAAQ,yBAAyB;AAEjK,SAASC,wBAAwBA,CAAA,EAAG;EAChC,OAAO,MAAMC,kBAAkB,CAAC;IAC5BC,WAAWA,CAACC,OAAO,EAAE;MACjB,IAAI,CAACC,cAAc,GAAGD,OAAO,CAACC,cAAc;MAC5C,IAAI,CAACC,mBAAmB,GAAGF,OAAO,CAACE,mBAAmB,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI;MAC/E,IAAI,CAACC,gBAAgB,GAAGH,OAAO,CAACG,gBAAgB,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI;MACzE,IAAI,CAACH,OAAO,GAAGA,OAAO;IAC1B;IACAI,KAAKA,CAACJ,OAAO,GAAG,CAAC,CAAC,EAAE;MAChB,MAAMK,kBAAkB,GAAG,IAAI,CAACJ,cAAc,CAACK,qBAAqB,CAAC,CAAC;MACtE,MAAMC,IAAI,GAAGF,kBAAkB,CAACG,UAAU,CAAC,CAAC;MAC5CH,kBAAkB,CAACI,YAAY,CAAC,CAAC;MACjC,IAAI,IAAI,CAACP,mBAAmB,IAAIF,OAAO,CAACU,kBAAkB,KAAK,KAAK,EAAE;QAClE,MAAMC,KAAK,GAAGX,OAAO,CAACW,KAAK,KAAKJ,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACI,KAAK,CAAC;QACvF,IAAIA,KAAK,EAAE;UACPlB,iCAAiC,CAAC,IAAI,CAACQ,cAAc,EAAEU,KAAK,CAAC;QACjE;MACJ;IACJ;IACAC,IAAIA,CAACL,IAAI,EAAEP,OAAO,GAAG,CAAC,CAAC,EAAE;MACrB,IAAIa,OAAO,GAAG,IAAI,CAACZ,cAAc,CAACK,qBAAqB,CAAC,CAAC;MACzD,MAAMQ,GAAG,GAAGD,OAAO,CAACL,UAAU,CAAC,CAAC;MAChC,IAAIjB,iBAAiB,CAACuB,GAAG,CAAC,IAAI,CAACd,OAAO,CAACe,WAAW,EAAE;QAChDvB,IAAI,CAAC,yGAAyG,CAAC;MACnH;MACAqB,OAAO,CAACG,UAAU,CAACT,IAAI,CAAC;MACxB,IAAI,IAAI,CAACL,mBAAmB,IAAIK,IAAI,CAACI,KAAK,EAAE;QACxCjB,8BAA8B,CAAC,IAAI,CAACO,cAAc,EAAEM,IAAI,CAACI,KAAK,EAAEJ,IAAI,CAAC;MACzE;IACJ;IACAU,MAAMA,CAACjB,OAAO,GAAG,CAAC,CAAC,EAAE;MACjB,IAAI;QACA,MAAMO,IAAI,GAAG,IAAI,CAACW,IAAI,CAAClB,OAAO,CAAC;QAC/B,OAAO,CAAC,CAACO,IAAI;MACjB,CAAC,CACD,OAAOY,EAAE,EAAE;QACP,OAAO,KAAK;MAChB;IACJ;IACAD,IAAIA,CAAClB,OAAO,GAAG,CAAC,CAAC,EAAE;MACf,IAAIO,IAAI;MACR,IAAI,IAAI,CAACL,mBAAmB,IAAIF,OAAO,CAACW,KAAK,EAAE;QAC3ChB,kBAAkB,CAAC,IAAI,CAACM,cAAc,CAAC;QACvCM,IAAI,GAAGX,gCAAgC,CAAC,IAAI,CAACK,cAAc,EAAED,OAAO,CAACW,KAAK,CAAC;QAC3E,IAAIpB,iBAAiB,CAACgB,IAAI,CAAC,EAAE;UACzB,OAAOA,IAAI;QACf;MACJ;MACA,IAAIM,OAAO,GAAG,IAAI,CAACZ,cAAc,CAACK,qBAAqB,CAAC,CAAC;MACzDC,IAAI,GAAGM,OAAO,CAACL,UAAU,CAAC,CAAC;MAC3B,IAAIjB,iBAAiB,CAACgB,IAAI,CAAC,EAAE;QACzB,OAAOA,IAAI;MACf;MACA,OAAO,IAAI;IACf;EACJ,CAAC;AACL;AAEA,SAASV,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}