{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Remediator.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { compareAuthenticators } from '../../authenticator/util.js';\nclass AuthenticatorData extends Remediator {\n  constructor(remediation, values = {}) {\n    super(remediation, values);\n    this.authenticator = this.getAuthenticator();\n    this.formatAuthenticatorData();\n  }\n  formatAuthenticatorData() {\n    const authenticatorData = this.getAuthenticatorData();\n    if (authenticatorData) {\n      this.values.authenticatorsData = this.values.authenticatorsData.map(data => {\n        if (compareAuthenticators(this.authenticator, data)) {\n          return this.mapAuthenticatorDataFromValues(data);\n        }\n        return data;\n      });\n    } else {\n      const data = this.mapAuthenticatorDataFromValues();\n      if (data) {\n        this.values.authenticatorsData.push(data);\n      }\n    }\n  }\n  getAuthenticatorData() {\n    return this.values.authenticatorsData.find(data => compareAuthenticators(this.authenticator, data));\n  }\n  canRemediate() {\n    return this.values.authenticatorsData.some(data => compareAuthenticators(this.authenticator, data));\n  }\n  mapAuthenticatorDataFromValues(authenticatorData) {\n    let {\n      methodType,\n      authenticator\n    } = this.values;\n    if (!methodType && isAuthenticator(authenticator)) {\n      methodType = authenticator === null || authenticator === void 0 ? void 0 : authenticator.methodType;\n    }\n    const {\n      id,\n      enrollmentId\n    } = this.authenticator;\n    const data = Object.assign(Object.assign({\n      id,\n      enrollmentId\n    }, authenticatorData && authenticatorData), methodType && {\n      methodType\n    });\n    return data.methodType ? data : null;\n  }\n  getAuthenticatorFromRemediation() {\n    const authenticator = this.remediation.value.find(({\n      name\n    }) => name === 'authenticator');\n    return authenticator;\n  }\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    const authenticatorsData = this.values.authenticatorsData.filter(data => compareAuthenticators(this.authenticator, data) !== true);\n    return Object.assign(Object.assign({}, this.values), {\n      authenticatorsData\n    });\n  }\n}\nexport { AuthenticatorData };","map":{"version":3,"names":["Remediator","isAuthenticator","compareAuthenticators","AuthenticatorData","constructor","remediation","values","authenticator","getAuthenticator","formatAuthenticatorData","authenticatorData","getAuthenticatorData","authenticatorsData","map","data","mapAuthenticatorDataFromValues","push","find","canRemediate","some","methodType","id","enrollmentId","Object","assign","getAuthenticatorFromRemediation","value","name","getValuesAfterProceed","filter"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/Base/AuthenticatorData.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Remediator.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { compareAuthenticators } from '../../authenticator/util.js';\n\nclass AuthenticatorData extends Remediator {\n    constructor(remediation, values = {}) {\n        super(remediation, values);\n        this.authenticator = this.getAuthenticator();\n        this.formatAuthenticatorData();\n    }\n    formatAuthenticatorData() {\n        const authenticatorData = this.getAuthenticatorData();\n        if (authenticatorData) {\n            this.values.authenticatorsData = this.values.authenticatorsData.map(data => {\n                if (compareAuthenticators(this.authenticator, data)) {\n                    return this.mapAuthenticatorDataFromValues(data);\n                }\n                return data;\n            });\n        }\n        else {\n            const data = this.mapAuthenticatorDataFromValues();\n            if (data) {\n                this.values.authenticatorsData.push(data);\n            }\n        }\n    }\n    getAuthenticatorData() {\n        return this.values.authenticatorsData\n            .find((data) => compareAuthenticators(this.authenticator, data));\n    }\n    canRemediate() {\n        return this.values.authenticatorsData\n            .some(data => compareAuthenticators(this.authenticator, data));\n    }\n    mapAuthenticatorDataFromValues(authenticatorData) {\n        let { methodType, authenticator } = this.values;\n        if (!methodType && isAuthenticator(authenticator)) {\n            methodType = authenticator === null || authenticator === void 0 ? void 0 : authenticator.methodType;\n        }\n        const { id, enrollmentId } = this.authenticator;\n        const data = Object.assign(Object.assign({ id,\n            enrollmentId }, (authenticatorData && authenticatorData)), (methodType && { methodType }));\n        return data.methodType ? data : null;\n    }\n    getAuthenticatorFromRemediation() {\n        const authenticator = this.remediation.value\n            .find(({ name }) => name === 'authenticator');\n        return authenticator;\n    }\n    getValuesAfterProceed() {\n        this.values = super.getValuesAfterProceed();\n        const authenticatorsData = this.values.authenticatorsData\n            .filter(data => compareAuthenticators(this.authenticator, data) !== true);\n        return Object.assign(Object.assign({}, this.values), { authenticatorsData });\n    }\n}\n\nexport { AuthenticatorData };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}