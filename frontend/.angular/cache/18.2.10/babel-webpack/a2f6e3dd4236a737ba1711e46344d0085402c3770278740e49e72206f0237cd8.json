{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport EmailStatusTransaction from './EmailStatusTransaction.js';\nimport BaseTransaction from './Base.js';\nimport { generateRequestFnFromLinks } from '../request.js';\nclass EmailChallengeTransaction extends BaseTransaction {\n  constructor(oktaAuth, options) {\n    super(oktaAuth, options);\n    const {\n      accessToken,\n      res\n    } = options;\n    const {\n      id,\n      expiresAt,\n      profile,\n      status,\n      _links\n    } = res;\n    this.id = id;\n    this.expiresAt = expiresAt;\n    this.profile = profile;\n    this.status = status;\n    this.poll = /*#__PURE__*/_asyncToGenerator(function* () {\n      const fn = generateRequestFnFromLinks({\n        oktaAuth,\n        accessToken,\n        methodName: 'poll',\n        links: _links\n      }, EmailStatusTransaction);\n      return yield fn();\n    });\n    this.verify = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (payload) {\n        const fn = generateRequestFnFromLinks({\n          oktaAuth,\n          accessToken,\n          methodName: 'verify',\n          links: _links\n        }, EmailChallengeTransaction);\n        return yield fn(payload);\n      });\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n}\nexport { EmailChallengeTransaction as default };","map":{"version":3,"names":["EmailStatusTransaction","BaseTransaction","generateRequestFnFromLinks","EmailChallengeTransaction","constructor","oktaAuth","options","accessToken","res","id","expiresAt","profile","status","_links","poll","_asyncToGenerator","fn","methodName","links","verify","_ref2","payload","_x","apply","arguments","default"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/myaccount/transactions/EmailChallengeTransaction.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport EmailStatusTransaction from './EmailStatusTransaction.js';\nimport BaseTransaction from './Base.js';\nimport { generateRequestFnFromLinks } from '../request.js';\n\nclass EmailChallengeTransaction extends BaseTransaction {\n    constructor(oktaAuth, options) {\n        super(oktaAuth, options);\n        const { accessToken, res } = options;\n        const { id, expiresAt, profile, status, _links } = res;\n        this.id = id;\n        this.expiresAt = expiresAt;\n        this.profile = profile;\n        this.status = status;\n        this.poll = async () => {\n            const fn = generateRequestFnFromLinks({\n                oktaAuth,\n                accessToken,\n                methodName: 'poll',\n                links: _links,\n            }, EmailStatusTransaction);\n            return await fn();\n        };\n        this.verify = async (payload) => {\n            const fn = generateRequestFnFromLinks({\n                oktaAuth,\n                accessToken,\n                methodName: 'verify',\n                links: _links,\n            }, EmailChallengeTransaction);\n            return await fn(payload);\n        };\n    }\n}\n\nexport { EmailChallengeTransaction as default };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,sBAAsB,MAAM,6BAA6B;AAChE,OAAOC,eAAe,MAAM,WAAW;AACvC,SAASC,0BAA0B,QAAQ,eAAe;AAE1D,MAAMC,yBAAyB,SAASF,eAAe,CAAC;EACpDG,WAAWA,CAACC,QAAQ,EAAEC,OAAO,EAAE;IAC3B,KAAK,CAACD,QAAQ,EAAEC,OAAO,CAAC;IACxB,MAAM;MAAEC,WAAW;MAAEC;IAAI,CAAC,GAAGF,OAAO;IACpC,MAAM;MAAEG,EAAE;MAAEC,SAAS;MAAEC,OAAO;MAAEC,MAAM;MAAEC;IAAO,CAAC,GAAGL,GAAG;IACtD,IAAI,CAACC,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,IAAI,gBAAAC,iBAAA,CAAG,aAAY;MACpB,MAAMC,EAAE,GAAGd,0BAA0B,CAAC;QAClCG,QAAQ;QACRE,WAAW;QACXU,UAAU,EAAE,MAAM;QAClBC,KAAK,EAAEL;MACX,CAAC,EAAEb,sBAAsB,CAAC;MAC1B,aAAagB,EAAE,CAAC,CAAC;IACrB,CAAC;IACD,IAAI,CAACG,MAAM;MAAA,IAAAC,KAAA,GAAAL,iBAAA,CAAG,WAAOM,OAAO,EAAK;QAC7B,MAAML,EAAE,GAAGd,0BAA0B,CAAC;UAClCG,QAAQ;UACRE,WAAW;UACXU,UAAU,EAAE,QAAQ;UACpBC,KAAK,EAAEL;QACX,CAAC,EAAEV,yBAAyB,CAAC;QAC7B,aAAaa,EAAE,CAACK,OAAO,CAAC;MAC5B,CAAC;MAAA,iBAAAC,EAAA;QAAA,OAAAF,KAAA,CAAAG,KAAA,OAAAC,SAAA;MAAA;IAAA;EACL;AACJ;AAEA,SAASrB,yBAAyB,IAAIsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}