{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../errors/WWWAuthError.js';\nimport { isRefreshToken } from '../oidc/types/Token.js';\nimport { EVENT_EXPIRED } from '../oidc/types/TokenManager.js';\nimport { isBrowser } from '../features.js';\nclass AutoRenewService {\n  constructor(tokenManager, options = {}) {\n    this.started = false;\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.renewTimeQueue = [];\n    this.onTokenExpiredHandler = this.onTokenExpiredHandler.bind(this);\n  }\n  shouldThrottleRenew() {\n    let res = false;\n    this.renewTimeQueue.push(Date.now());\n    if (this.renewTimeQueue.length >= 10) {\n      const firstTime = this.renewTimeQueue.shift();\n      const lastTime = this.renewTimeQueue[this.renewTimeQueue.length - 1];\n      res = lastTime - firstTime < 30 * 1000;\n    }\n    return res;\n  }\n  requiresLeadership() {\n    return !!this.options.syncStorage && isBrowser();\n  }\n  processExpiredTokens() {\n    const tokenStorage = this.tokenManager.getStorage();\n    const tokens = tokenStorage.getStorage();\n    Object.keys(tokens).forEach(key => {\n      const token = tokens[key];\n      if (!isRefreshToken(token) && this.tokenManager.hasExpired(token)) {\n        this.onTokenExpiredHandler(key);\n      }\n    });\n  }\n  onTokenExpiredHandler(key) {\n    if (this.options.autoRenew) {\n      if (this.shouldThrottleRenew()) {\n        const error = new AuthSdkError('Too many token renew requests');\n        this.tokenManager.emitError(error);\n      } else {\n        this.tokenManager.renew(key).catch(() => {});\n      }\n    } else if (this.options.autoRemove) {\n      this.tokenManager.remove(key);\n    }\n  }\n  canStart() {\n    return (!!this.options.autoRenew || !!this.options.autoRemove) && !this.started;\n  }\n  start() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.canStart()) {\n        _this.tokenManager.on(EVENT_EXPIRED, _this.onTokenExpiredHandler);\n        if (_this.tokenManager.isStarted()) {\n          _this.processExpiredTokens();\n        }\n        _this.started = true;\n      }\n    })();\n  }\n  stop() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.started) {\n        _this2.tokenManager.off(EVENT_EXPIRED, _this2.onTokenExpiredHandler);\n        _this2.renewTimeQueue = [];\n        _this2.started = false;\n      }\n    })();\n  }\n  isStarted() {\n    return this.started;\n  }\n}\nexport { AutoRenewService };","map":{"version":3,"names":["AuthSdkError","isRefreshToken","EVENT_EXPIRED","isBrowser","AutoRenewService","constructor","tokenManager","options","started","renewTimeQueue","onTokenExpiredHandler","bind","shouldThrottleRenew","res","push","Date","now","length","firstTime","shift","lastTime","requiresLeadership","syncStorage","processExpiredTokens","tokenStorage","getStorage","tokens","Object","keys","forEach","key","token","hasExpired","autoRenew","error","emitError","renew","catch","autoRemove","remove","canStart","start","_this","_asyncToGenerator","on","isStarted","stop","_this2","off"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/services/AutoRenewService.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../errors/WWWAuthError.js';\nimport { isRefreshToken } from '../oidc/types/Token.js';\nimport { EVENT_EXPIRED } from '../oidc/types/TokenManager.js';\nimport { isBrowser } from '../features.js';\n\nclass AutoRenewService {\n    constructor(tokenManager, options = {}) {\n        this.started = false;\n        this.tokenManager = tokenManager;\n        this.options = options;\n        this.renewTimeQueue = [];\n        this.onTokenExpiredHandler = this.onTokenExpiredHandler.bind(this);\n    }\n    shouldThrottleRenew() {\n        let res = false;\n        this.renewTimeQueue.push(Date.now());\n        if (this.renewTimeQueue.length >= 10) {\n            const firstTime = this.renewTimeQueue.shift();\n            const lastTime = this.renewTimeQueue[this.renewTimeQueue.length - 1];\n            res = (lastTime - firstTime) < 30 * 1000;\n        }\n        return res;\n    }\n    requiresLeadership() {\n        return !!this.options.syncStorage && isBrowser();\n    }\n    processExpiredTokens() {\n        const tokenStorage = this.tokenManager.getStorage();\n        const tokens = tokenStorage.getStorage();\n        Object.keys(tokens).forEach(key => {\n            const token = tokens[key];\n            if (!isRefreshToken(token) && this.tokenManager.hasExpired(token)) {\n                this.onTokenExpiredHandler(key);\n            }\n        });\n    }\n    onTokenExpiredHandler(key) {\n        if (this.options.autoRenew) {\n            if (this.shouldThrottleRenew()) {\n                const error = new AuthSdkError('Too many token renew requests');\n                this.tokenManager.emitError(error);\n            }\n            else {\n                this.tokenManager.renew(key).catch(() => { });\n            }\n        }\n        else if (this.options.autoRemove) {\n            this.tokenManager.remove(key);\n        }\n    }\n    canStart() {\n        return (!!this.options.autoRenew || !!this.options.autoRemove) && !this.started;\n    }\n    async start() {\n        if (this.canStart()) {\n            this.tokenManager.on(EVENT_EXPIRED, this.onTokenExpiredHandler);\n            if (this.tokenManager.isStarted()) {\n                this.processExpiredTokens();\n            }\n            this.started = true;\n        }\n    }\n    async stop() {\n        if (this.started) {\n            this.tokenManager.off(EVENT_EXPIRED, this.onTokenExpiredHandler);\n            this.renewTimeQueue = [];\n            this.started = false;\n        }\n    }\n    isStarted() {\n        return this.started;\n    }\n}\n\nexport { AutoRenewService };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}