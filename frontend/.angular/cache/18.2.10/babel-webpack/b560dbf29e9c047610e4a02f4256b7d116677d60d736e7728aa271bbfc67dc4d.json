{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Remediator.js';\nimport { getAuthenticatorFromRemediation } from '../util.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { findMatchedOption, compareAuthenticators } from '../../authenticator/util.js';\nclass SelectAuthenticator extends Remediator {\n  findMatchedOption(authenticators, options) {\n    let option;\n    for (let authenticator of authenticators) {\n      option = options.find(({\n        relatesTo\n      }) => relatesTo.key && relatesTo.key === authenticator.key);\n      if (option) {\n        break;\n      }\n    }\n    return option;\n  }\n  canRemediate(context) {\n    var _a, _b;\n    const {\n      authenticators,\n      authenticator\n    } = this.values;\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const {\n      options\n    } = authenticatorFromRemediation;\n    if (!authenticators || !authenticators.length) {\n      return false;\n    }\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      return true;\n    }\n    const matchedOption = this.findMatchedOption(authenticators, options);\n    if (matchedOption) {\n      const isCurrentAuthenticator = (context === null || context === void 0 ? void 0 : context.currentAuthenticator) && (context === null || context === void 0 ? void 0 : context.currentAuthenticator.value.id) === ((_a = matchedOption.relatesTo) === null || _a === void 0 ? void 0 : _a.id);\n      const isCurrentAuthenticatorEnrollment = (context === null || context === void 0 ? void 0 : context.currentAuthenticatorEnrollment) && (context === null || context === void 0 ? void 0 : context.currentAuthenticatorEnrollment.value.id) === ((_b = matchedOption.relatesTo) === null || _b === void 0 ? void 0 : _b.id);\n      return !isCurrentAuthenticator && !isCurrentAuthenticatorEnrollment;\n    }\n    return false;\n  }\n  mapAuthenticator(remediationValue) {\n    const {\n      authenticators,\n      authenticator\n    } = this.values;\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      this.selectedAuthenticator = authenticator;\n      return authenticator;\n    }\n    const {\n      options\n    } = remediationValue;\n    const selectedOption = findMatchedOption(authenticators, options);\n    this.selectedAuthenticator = selectedOption.relatesTo;\n    this.selectedOption = selectedOption;\n    return {\n      id: selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value.form.value.find(({\n        name\n      }) => name === 'id').value\n    };\n  }\n  getInputAuthenticator(remediation) {\n    const options = remediation.options.map(({\n      label,\n      relatesTo\n    }) => {\n      return {\n        label,\n        value: relatesTo.key\n      };\n    });\n    return {\n      name: 'authenticator',\n      type: 'string',\n      options\n    };\n  }\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    const authenticators = this.values.authenticators.filter(authenticator => {\n      return compareAuthenticators(authenticator, this.selectedAuthenticator) !== true;\n    });\n    return Object.assign(Object.assign({}, this.values), {\n      authenticators\n    });\n  }\n}\nexport { SelectAuthenticator };","map":{"version":3,"names":["Remediator","getAuthenticatorFromRemediation","isAuthenticator","findMatchedOption","compareAuthenticators","SelectAuthenticator","authenticators","options","option","authenticator","find","relatesTo","key","canRemediate","context","_a","_b","values","authenticatorFromRemediation","remediation","length","id","matchedOption","isCurrentAuthenticator","currentAuthenticator","value","isCurrentAuthenticatorEnrollment","currentAuthenticatorEnrollment","mapAuthenticator","remediationValue","selectedAuthenticator","selectedOption","form","name","getInputAuthenticator","map","label","type","getValuesAfterProceed","filter","Object","assign"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/Base/SelectAuthenticator.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator } from './Remediator.js';\nimport { getAuthenticatorFromRemediation } from '../util.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { findMatchedOption, compareAuthenticators } from '../../authenticator/util.js';\n\nclass SelectAuthenticator extends Remediator {\n    findMatchedOption(authenticators, options) {\n        let option;\n        for (let authenticator of authenticators) {\n            option = options\n                .find(({ relatesTo }) => relatesTo.key && relatesTo.key === authenticator.key);\n            if (option) {\n                break;\n            }\n        }\n        return option;\n    }\n    canRemediate(context) {\n        var _a, _b;\n        const { authenticators, authenticator } = this.values;\n        const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n        const { options } = authenticatorFromRemediation;\n        if (!authenticators || !authenticators.length) {\n            return false;\n        }\n        if (isAuthenticator(authenticator) && authenticator.id) {\n            return true;\n        }\n        const matchedOption = this.findMatchedOption(authenticators, options);\n        if (matchedOption) {\n            const isCurrentAuthenticator = (context === null || context === void 0 ? void 0 : context.currentAuthenticator)\n                && (context === null || context === void 0 ? void 0 : context.currentAuthenticator.value.id) === ((_a = matchedOption.relatesTo) === null || _a === void 0 ? void 0 : _a.id);\n            const isCurrentAuthenticatorEnrollment = (context === null || context === void 0 ? void 0 : context.currentAuthenticatorEnrollment)\n                && (context === null || context === void 0 ? void 0 : context.currentAuthenticatorEnrollment.value.id) === ((_b = matchedOption.relatesTo) === null || _b === void 0 ? void 0 : _b.id);\n            return !isCurrentAuthenticator && !isCurrentAuthenticatorEnrollment;\n        }\n        return false;\n    }\n    mapAuthenticator(remediationValue) {\n        const { authenticators, authenticator } = this.values;\n        if (isAuthenticator(authenticator) && authenticator.id) {\n            this.selectedAuthenticator = authenticator;\n            return authenticator;\n        }\n        const { options } = remediationValue;\n        const selectedOption = findMatchedOption(authenticators, options);\n        this.selectedAuthenticator = selectedOption.relatesTo;\n        this.selectedOption = selectedOption;\n        return {\n            id: selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value.form.value.find(({ name }) => name === 'id').value\n        };\n    }\n    getInputAuthenticator(remediation) {\n        const options = remediation.options.map(({ label, relatesTo }) => {\n            return {\n                label,\n                value: relatesTo.key\n            };\n        });\n        return { name: 'authenticator', type: 'string', options };\n    }\n    getValuesAfterProceed() {\n        this.values = super.getValuesAfterProceed();\n        const authenticators = this.values.authenticators\n            .filter(authenticator => {\n            return compareAuthenticators(authenticator, this.selectedAuthenticator) !== true;\n        });\n        return Object.assign(Object.assign({}, this.values), { authenticators });\n    }\n}\n\nexport { SelectAuthenticator };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}