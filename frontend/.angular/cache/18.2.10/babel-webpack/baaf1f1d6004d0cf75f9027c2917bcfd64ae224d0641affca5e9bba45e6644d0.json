{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport '../errors/WWWAuthError.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { clone } from '../util/object.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport './types/Token.js';\nimport { postToTokenEndpoint } from './endpoints/token.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nimport { findKeyPair, createDPoPKeyPair } from './dpop.js';\nfunction exchangeCodeForTokens(_x, _x2, _x3) {\n  return _exchangeCodeForTokens.apply(this, arguments);\n}\nfunction _exchangeCodeForTokens() {\n  _exchangeCodeForTokens = _asyncToGenerator(function* (sdk, tokenParams, urls) {\n    urls = urls || getOAuthUrls(sdk, tokenParams);\n    tokenParams = Object.assign({}, getDefaultTokenParams(sdk), clone(tokenParams));\n    const {\n      authorizationCode,\n      interactionCode,\n      codeVerifier,\n      clientId,\n      redirectUri,\n      scopes,\n      ignoreSignature,\n      state,\n      acrValues,\n      dpop,\n      dpopPairId,\n      extraParams\n    } = tokenParams;\n    const getTokenOptions = {\n      clientId,\n      redirectUri,\n      authorizationCode,\n      interactionCode,\n      codeVerifier,\n      dpop\n    };\n    const responseType = ['token'];\n    if (scopes.indexOf('openid') !== -1) {\n      responseType.push('id_token');\n    }\n    const handleResponseOptions = {\n      clientId,\n      redirectUri,\n      scopes,\n      responseType,\n      ignoreSignature,\n      acrValues,\n      extraParams\n    };\n    try {\n      if (dpop) {\n        if (dpopPairId) {\n          const keyPair = yield findKeyPair(dpopPairId);\n          getTokenOptions.dpopKeyPair = keyPair;\n          handleResponseOptions.dpop = dpop;\n          handleResponseOptions.dpopPairId = dpopPairId;\n        } else {\n          const {\n            keyPair,\n            keyPairId\n          } = yield createDPoPKeyPair();\n          getTokenOptions.dpopKeyPair = keyPair;\n          handleResponseOptions.dpop = dpop;\n          handleResponseOptions.dpopPairId = keyPairId;\n        }\n      }\n      const oauthResponse = yield postToTokenEndpoint(sdk, getTokenOptions, urls);\n      const tokenResponse = yield handleOAuthResponse(sdk, handleResponseOptions, oauthResponse, urls);\n      tokenResponse.code = authorizationCode;\n      tokenResponse.state = state;\n      return tokenResponse;\n    } finally {\n      sdk.transactionManager.clear();\n    }\n  });\n  return _exchangeCodeForTokens.apply(this, arguments);\n}\nexport { exchangeCodeForTokens };","map":{"version":3,"names":["getDefaultTokenParams","getOAuthUrls","clone","postToTokenEndpoint","handleOAuthResponse","findKeyPair","createDPoPKeyPair","exchangeCodeForTokens","_x","_x2","_x3","_exchangeCodeForTokens","apply","arguments","_asyncToGenerator","sdk","tokenParams","urls","Object","assign","authorizationCode","interactionCode","codeVerifier","clientId","redirectUri","scopes","ignoreSignature","state","acrValues","dpop","dpopPairId","extraParams","getTokenOptions","responseType","indexOf","push","handleResponseOptions","keyPair","dpopKeyPair","keyPairId","oauthResponse","tokenResponse","code","transactionManager","clear"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/oidc/exchangeCodeForTokens.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport '../errors/WWWAuthError.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { clone } from '../util/object.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\nimport './types/Token.js';\nimport { postToTokenEndpoint } from './endpoints/token.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nimport { findKeyPair, createDPoPKeyPair } from './dpop.js';\n\nasync function exchangeCodeForTokens(sdk, tokenParams, urls) {\n    urls = urls || getOAuthUrls(sdk, tokenParams);\n    tokenParams = Object.assign({}, getDefaultTokenParams(sdk), clone(tokenParams));\n    const { authorizationCode, interactionCode, codeVerifier, clientId, redirectUri, scopes, ignoreSignature, state, acrValues, dpop, dpopPairId, extraParams } = tokenParams;\n    const getTokenOptions = {\n        clientId,\n        redirectUri,\n        authorizationCode,\n        interactionCode,\n        codeVerifier,\n        dpop,\n    };\n    const responseType = ['token'];\n    if (scopes.indexOf('openid') !== -1) {\n        responseType.push('id_token');\n    }\n    const handleResponseOptions = {\n        clientId,\n        redirectUri,\n        scopes,\n        responseType,\n        ignoreSignature,\n        acrValues,\n        extraParams\n    };\n    try {\n        if (dpop) {\n            if (dpopPairId) {\n                const keyPair = await findKeyPair(dpopPairId);\n                getTokenOptions.dpopKeyPair = keyPair;\n                handleResponseOptions.dpop = dpop;\n                handleResponseOptions.dpopPairId = dpopPairId;\n            }\n            else {\n                const { keyPair, keyPairId } = await createDPoPKeyPair();\n                getTokenOptions.dpopKeyPair = keyPair;\n                handleResponseOptions.dpop = dpop;\n                handleResponseOptions.dpopPairId = keyPairId;\n            }\n        }\n        const oauthResponse = await postToTokenEndpoint(sdk, getTokenOptions, urls);\n        const tokenResponse = await handleOAuthResponse(sdk, handleResponseOptions, oauthResponse, urls);\n        tokenResponse.code = authorizationCode;\n        tokenResponse.state = state;\n        return tokenResponse;\n    }\n    finally {\n        sdk.transactionManager.clear();\n    }\n}\n\nexport { exchangeCodeForTokens };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,2BAA2B;AAClC,SAASA,qBAAqB,QAAQ,8BAA8B;AACpE,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,KAAK,QAAQ,mBAAmB;AACzC,OAAO,cAAc;AACrB,OAAO,WAAW;AAClB,OAAO,aAAa;AACpB,OAAO,kBAAkB;AACzB,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,WAAW,EAAEC,iBAAiB,QAAQ,WAAW;AAAC,SAE5CC,qBAAqBA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,uBAAA;EAAAA,sBAAA,GAAAG,iBAAA,CAApC,WAAqCC,GAAG,EAAEC,WAAW,EAAEC,IAAI,EAAE;IACzDA,IAAI,GAAGA,IAAI,IAAIhB,YAAY,CAACc,GAAG,EAAEC,WAAW,CAAC;IAC7CA,WAAW,GAAGE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEnB,qBAAqB,CAACe,GAAG,CAAC,EAAEb,KAAK,CAACc,WAAW,CAAC,CAAC;IAC/E,MAAM;MAAEI,iBAAiB;MAAEC,eAAe;MAAEC,YAAY;MAAEC,QAAQ;MAAEC,WAAW;MAAEC,MAAM;MAAEC,eAAe;MAAEC,KAAK;MAAEC,SAAS;MAAEC,IAAI;MAAEC,UAAU;MAAEC;IAAY,CAAC,GAAGf,WAAW;IACzK,MAAMgB,eAAe,GAAG;MACpBT,QAAQ;MACRC,WAAW;MACXJ,iBAAiB;MACjBC,eAAe;MACfC,YAAY;MACZO;IACJ,CAAC;IACD,MAAMI,YAAY,GAAG,CAAC,OAAO,CAAC;IAC9B,IAAIR,MAAM,CAACS,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;MACjCD,YAAY,CAACE,IAAI,CAAC,UAAU,CAAC;IACjC;IACA,MAAMC,qBAAqB,GAAG;MAC1Bb,QAAQ;MACRC,WAAW;MACXC,MAAM;MACNQ,YAAY;MACZP,eAAe;MACfE,SAAS;MACTG;IACJ,CAAC;IACD,IAAI;MACA,IAAIF,IAAI,EAAE;QACN,IAAIC,UAAU,EAAE;UACZ,MAAMO,OAAO,SAAShC,WAAW,CAACyB,UAAU,CAAC;UAC7CE,eAAe,CAACM,WAAW,GAAGD,OAAO;UACrCD,qBAAqB,CAACP,IAAI,GAAGA,IAAI;UACjCO,qBAAqB,CAACN,UAAU,GAAGA,UAAU;QACjD,CAAC,MACI;UACD,MAAM;YAAEO,OAAO;YAAEE;UAAU,CAAC,SAASjC,iBAAiB,CAAC,CAAC;UACxD0B,eAAe,CAACM,WAAW,GAAGD,OAAO;UACrCD,qBAAqB,CAACP,IAAI,GAAGA,IAAI;UACjCO,qBAAqB,CAACN,UAAU,GAAGS,SAAS;QAChD;MACJ;MACA,MAAMC,aAAa,SAASrC,mBAAmB,CAACY,GAAG,EAAEiB,eAAe,EAAEf,IAAI,CAAC;MAC3E,MAAMwB,aAAa,SAASrC,mBAAmB,CAACW,GAAG,EAAEqB,qBAAqB,EAAEI,aAAa,EAAEvB,IAAI,CAAC;MAChGwB,aAAa,CAACC,IAAI,GAAGtB,iBAAiB;MACtCqB,aAAa,CAACd,KAAK,GAAGA,KAAK;MAC3B,OAAOc,aAAa;IACxB,CAAC,SACO;MACJ1B,GAAG,CAAC4B,kBAAkB,CAACC,KAAK,CAAC,CAAC;IAClC;EACJ,CAAC;EAAA,OAAAjC,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASN,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}