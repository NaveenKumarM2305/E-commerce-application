{"ast":null,"code":"import Bundles from '../../util/Bundles.js';\nimport Logger from '../../util/Logger.js';\nimport { loc } from '../../util/loc.js';\nimport { getAuthenticatorDisplayName } from '../view-builder/utils/AuthenticatorUtil.js';\nimport { FORMS, AUTHENTICATOR_KEY } from './RemediationConstants.js';\nimport { I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS } from '../view-builder/views/enroll-profile/i18nBaseAttributeMappings.js';\n\n/* eslint-disable max-len */\nconst WEBAUTHN_API_GENERIC_ERROR_KEY = 'authfactor.webauthn.error';\nconst SECURITY_QUESTION_PREFIXES = ['enroll-authenticator.security_question.credentials.questionKey.', 'challenge-authenticator.security_question.credentials.questionKey.'];\nconst I18N_OVERRIDE_MAPPINGS = {\n  'identify.identifier': 'primaryauth.username.placeholder',\n  'select-authenticator-unlock-account.identifier': 'primaryauth.username.placeholder',\n  'unlock-account.identifier': 'primaryauth.username.placeholder',\n  'identify.credentials.passcode': 'primaryauth.password.placeholder',\n  'identify.rememberMe': 'oie.remember',\n  'enroll-profile.userProfile.rememberMe': 'oie.remember',\n  'identify-recovery.identifier': 'password.forgot.email.or.username.placeholder',\n  'select-authenticator-enroll.authenticator.duo': 'factor.duo',\n  'select-authenticator-enroll.authenticator.google_otp': 'oie.google_authenticator.label',\n  'select-authenticator-enroll.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-enroll.authenticator.okta_password': 'oie.password.label',\n  'select-authenticator-enroll.authenticator.okta_verify': 'oie.okta_verify.label',\n  'select-authenticator-enroll.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-enroll.authenticator.rsa_token': 'factor.totpHard.rsaSecurId',\n  'select-authenticator-enroll.authenticator.security_question': 'oie.security.question.label',\n  'select-authenticator-enroll.authenticator.symantec_vip': 'factor.totpHard.symantecVip',\n  'select-authenticator-enroll.authenticator.webauthn': 'oie.webauthn.label',\n  'select-authenticator-enroll.authenticator.yubikey_token': 'oie.yubikey.label',\n  'select-authenticator-authenticate.authenticator.duo': 'factor.duo',\n  'select-authenticator-authenticate.authenticator.google_otp': 'oie.google_authenticator.label',\n  'select-authenticator-authenticate.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-authenticate.authenticator.okta_password': 'oie.password.label',\n  'select-authenticator-authenticate.authenticator.okta_verify.push': 'oie.okta_verify.push.title',\n  'select-authenticator-authenticate.authenticator.okta_verify.signed_nonce': 'oie.okta_verify.signed_nonce.label',\n  'select-authenticator-authenticate.authenticator.okta_verify.totp': 'oie.okta_verify.totp.title',\n  'select-authenticator-authenticate.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-authenticate.authenticator.rsa_token': 'factor.totpHard.rsaSecurId',\n  'select-authenticator-authenticate.authenticator.security_question': 'oie.security.question.label',\n  'select-authenticator-authenticate.authenticator.symantec_vip': 'factor.totpHard.symantecVip',\n  'select-authenticator-authenticate.authenticator.webauthn': 'oie.webauthn.label',\n  'select-authenticator-authenticate.authenticator.yubikey_token': 'oie.yubikey.label',\n  'select-authenticator-authenticate.authenticator.custom_app': 'oie.custom.app.authenticator.title',\n  'select-authenticator-unlock-account.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-unlock-account.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-unlock-account.authenticator.okta_verify.push': 'oie.okta_verify.push.title',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.signed_nonce': 'oie.okta_verify.signed_nonce.label',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.push': 'oie.okta_verify.push.title',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.totp': 'oie.okta_verify.totp.title',\n  'authenticator-enrollment-data.phone_number.authenticator.phoneNumber': 'mfa.phoneNumber.placeholder',\n  'authenticator-enrollment-data.phone_number.authenticator.methodType.sms': 'oie.phone.enroll.sms.label',\n  'authenticator-enrollment-data.phone_number.authenticator.methodType.voice': 'oie.phone.enroll.voice.label',\n  'enroll-authenticator.okta_password.credentials.passcode': 'oie.password.passwordLabel',\n  'enroll-authenticator.okta_email.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'enroll-authenticator.phone_number.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'enroll-authenticator.security_question.sub_schema_local_credentials.0': 'oie.security.question.questionKey.label',\n  'enroll-authenticator.security_question.sub_schema_local_credentials.1': 'oie.security.question.createQuestion.label',\n  'enroll-authenticator.security_question.credentials.answer': 'mfa.challenge.answer.placeholder',\n  'enroll-authenticator.security_question.credentials.question': 'oie.security.question.createQuestion.label',\n  'enroll-authenticator.security_question.credentials.questionKey': 'oie.security.question.questionKey.label',\n  'enroll-authenticator.google_otp.credentials.passcode': 'oie.google_authenticator.otp.enterCodeText',\n  'enroll-authenticator.onprem_mfa.credentials.clientData': 'enroll.onprem.username.placeholder',\n  'enroll-authenticator.onprem_mfa.credentials.passcode': 'enroll.onprem.passcode.placeholder',\n  'enroll-authenticator.rsa_token.credentials.clientData': 'enroll.onprem.username.placeholder',\n  'enroll-authenticator.rsa_token.credentials.passcode': 'enroll.onprem.passcode.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.credentialId': 'enroll.symantecVip.credentialId.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.passcode': 'enroll.symantecVip.passcode1.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.nextPasscode': 'enroll.symantecVip.passcode2.placeholder',\n  'enroll-authenticator.yubikey_token.credentials.passcode': 'oie.yubikey.passcode.label',\n  'enrollment-channel-data.email': 'oie.enroll.okta_verify.channel.email.label',\n  'enrollment-channel-data.phoneNumber': 'mfa.phoneNumber.placeholder',\n  'select-enrollment-channel.authenticator.channel.qrcode': 'oie.enroll.okta_verify.select.channel.qrcode.label',\n  'select-enrollment-channel.authenticator.channel.email': 'oie.enroll.okta_verify.select.channel.email.label',\n  'select-enrollment-channel.authenticator.channel.sms': 'oie.enroll.okta_verify.select.channel.sms.label',\n  'challenge-authenticator.okta_email.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.okta_password.credentials.passcode': 'mfa.challenge.password.placeholder',\n  'challenge-authenticator.phone_number.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.security_question.credentials.answer': 'mfa.challenge.answer.placeholder',\n  'challenge-authenticator.okta_verify.credentials.totp': 'oie.okta_verify.totp.enterCodeText',\n  'challenge-authenticator.google_otp.credentials.passcode': 'oie.google_authenticator.otp.enterCodeText',\n  'challenge-authenticator.onprem_mfa.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.rsa_token.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.custom_otp.credentials.passcode': 'oie.custom_otp.verify.passcode.label',\n  'challenge-authenticator.symantec_vip.credentials.passcode': 'oie.symantecVip.verify.passcode.label',\n  'challenge-authenticator.yubikey_token.credentials.passcode': 'oie.yubikey.passcode.label',\n  'challenge-authenticator.credentials.passcode': 'oie.password.label',\n  'reset-authenticator.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reset-authenticator.okta_password.confirmPassword': 'oie.password.confirmPasswordLabel',\n  'reset-authenticator.okta_password.credentials.revokeSessions': 'password.reset.revokeSessions',\n  'reenroll-authenticator.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reenroll-authenticator.okta_password.confirmPassword': 'oie.password.confirmPasswordLabel',\n  'reenroll-authenticator.okta_password.credentials.revokeSessions': 'password.reset.revokeSessions',\n  'reenroll-authenticator-warning.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reenroll-authenticator-warning.okta_password.confirmPassword': 'oie.password.confirmPasswordLabel',\n  'reenroll-authenticator-warning.okta_password.credentials.revokeSessions': 'password.reset.revokeSessions',\n  'enroll-authenticator.okta_password.confirmPassword': 'oie.password.confirmPasswordLabel',\n  'enroll-authenticator.okta_password.credentials.revokeSessions': 'password.reset.revokeSessions',\n  'incorrectPassword': 'oie.password.incorrect.message',\n  'profile-update.userProfile.secondEmail': 'oie.user.profile.secondary.email',\n  'user-code.userCode': 'device.code.activate.label',\n  // Remap authn API errors to OIE\n  'api.authn.poll.error.push_rejected': 'oktaverify.rejected',\n  // Remap duo API errors to OIE\n  'oie.authenticator.duo.method.duo.verification_timeout': 'oie.authenticator.duo.error',\n  'oie.authenticator.duo.method.duo.verification_failed': 'oie.authenticator.duo.error',\n  'idx.email.verification.required': 'registration.complete.confirm.text',\n  'tooManyRequests': 'oie.tooManyRequests',\n  'api.users.auth.error.POST_PASSWORD_UPDATE_AUTH_FAILURE': 'oie.post.password.update.auth.failure.error',\n  'security.access_denied': 'errors.E0000006',\n  'E0000009': 'errors.E0000009',\n  'E0000020': 'errors.E0000020',\n  'api.factors.error.sms.invalid_phone': 'oie.phone.invalid',\n  'app.ldap.password.reset.failed': 'errors.E0000017',\n  'oie.selfservice.unlock_user.challenge.failed.permissions': 'errors.E0000006',\n  'core.auth.factor.signedNonce.error.invalidEnrollment': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.invalidFactor': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.deletedDevice': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.invalidDeviceStatus': 'core.auth.factor.signedNonce.error.invalidDevice',\n  // re-map autoPush: \"Send push automatically\"\n  'challenge-poll.custom_app.autoChallenge': 'autoPush',\n  // authenticator-verification-custom-app-push-autochallenge\n  'challenge-poll.okta_verify.autoChallenge': 'autoPush',\n  // authenticator-verification-okta-verify-push-autoChallenge-on\n  'authenticator-verification-data.authenticator.autoChallenge': 'autoPush',\n  // authenticator-verification-data-okta-verify-push-autoChallenge-off.json\n  'authenticator-verification-data.okta_verify.authenticator.autoChallenge': 'autoPush',\n  'authenticator-verification-data.custom_app.authenticator.autoChallenge': 'autoPush',\n  // Existing overrides\n  ...I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS //enroll-profile strings\n};\nconst I18N_PARAMS_MAPPING = {\n  [FORMS.ENROLL_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.ON_PREM]: {\n      getParam: getAuthenticatorDisplayName\n    },\n    [AUTHENTICATOR_KEY.RSA]: {\n      getParam: getAuthenticatorDisplayName\n    }\n  }\n};\n\n/**\n * For i18n keys that require string interpolation using values from \"params\".\n * {baseKey} : {params}\n */\nconst I18N_OVERRIDE_WITH_PARAMS_MAP = {\n  'registration.error.invalidLoginEmail': {\n    Email: 'Email'\n  },\n  'registration.error.doesNotMatchPattern': {\n    Email: 'Email'\n  },\n  'registration.error.notUniqueWithinOrg': {\n    Email: 'Email'\n  }\n};\n\n/**\n * For messages that need to be interpolated with param values.\n *\n * Enumerate each possible param interpolation and hardcode that into properties file.\n * This is to ensure proper translation.\n *\n * Example - a known param:\n *\n * input =\n *  \"i18n\": {\n      \"key\": \"registration.error.doesNotMatchPattern\",\n      \"params\": [\n        \"Email\"\n      ]\n    }\n * output = registration.error.doesNotMatchPattern.Email\n *\n * Example - an unknown param:\n *\n * input =\n *  \"i18n\": {\n      \"key\": \"registration.error.doesNotMatchPattern\",\n      \"params\": [\n        \"Custom Property\"\n      ]\n    }\n * output = registration.error.doesNotMatchPattern.custom\n *\n * @param {String} key\n * @param {String} param\n * @returns {String}\n */\nconst getI8nKeyUsingParams = (key, param) => {\n  let i18nKey = key;\n  if (I18N_OVERRIDE_WITH_PARAMS_MAP[i18nKey][param]) {\n    i18nKey += `.${param}`;\n  } else {\n    i18nKey += '.custom';\n  }\n  return i18nKey;\n};\nconst getI18NParams = (remediation, authenticatorKey) => {\n  const params = [];\n  const formName = remediation.name;\n  if (I18N_PARAMS_MAPPING[formName] && I18N_PARAMS_MAPPING[formName][authenticatorKey]) {\n    const config = I18N_PARAMS_MAPPING[formName][authenticatorKey];\n    const param = config.getParam(remediation);\n    params.push(param);\n  }\n  return params;\n};\nconst getI18nKey = i18nPath => {\n  let i18nKey;\n  // Extract security question value from i18nPath\n  SECURITY_QUESTION_PREFIXES.forEach(prefix => {\n    if (i18nPath.indexOf(prefix) === 0) {\n      const securityQuestionValue = i18nPath.replace(prefix, '');\n      i18nKey = `security.${securityQuestionValue}`;\n    }\n  });\n  if (I18N_OVERRIDE_MAPPINGS[i18nPath]) {\n    i18nKey = I18N_OVERRIDE_MAPPINGS[i18nPath];\n  }\n  if (i18nKey && !Bundles.login[i18nKey]) {\n    Logger.warn(`expect i18n key ${i18nKey} for ${i18nPath} but not found in 'login' bundle.`);\n    i18nKey = null;\n  }\n  return i18nKey;\n};\nconst doesI18NKeyExist = i18nKey => {\n  return !!Bundles.login[i18nKey];\n};\n\n/**\n * Find i18n value using {@code i18nPath} if it exists.\n * Otherwise return {@code defaultValue}.\n *\n * @param {string} i18nPath\n * @param {string} defaultValue\n * @param {string[]} params\n */\nconst getI18NValue = (i18nPath, defaultValue, params = []) => {\n  const i18nKey = getI18nKey(i18nPath);\n  if (i18nKey) {\n    return loc(i18nKey, 'login', params);\n  } else {\n    Logger.warn(`Avoid rendering unlocalized text sent from the API: ${defaultValue}`);\n    return defaultValue;\n  }\n};\nconst isWebAuthnAPIError = i18nKey => i18nKey.startsWith(WEBAUTHN_API_GENERIC_ERROR_KEY);\n\n/**\n * @typedef {Object} Message\n * @property {string} message\n * @property {Object=} i18n\n * @property {string} i18n.key\n * @property {string[]} i18n.params\n */\n/**\n * - If `message.i18n.key` exists and has a value in 'login.properties'\n *   through the given key or via I18N_OVERRIDE_MAPPINGS, return the value.\n *\n * - returns `message.message` otherwise\n *\n * @param {Message} message\n */\nconst getMessage = message => {\n  var _message$i18n;\n  if ((_message$i18n = message.i18n) !== null && _message$i18n !== void 0 && _message$i18n.key) {\n    var _message$i18n2;\n    let i18nKey = message.i18n.key;\n    let i18nParams = message.i18n.params || [];\n\n    // TODO - remove this block once API fix is done - OKTA-398080\n    // Sometimes API sends params: [\"\"] an array with empty string.\n    // example - error-authenticator-enroll-password-common mock\n    if (i18nParams.length === 1 && i18nParams[0] === '') {\n      i18nParams = [];\n    }\n    if (I18N_OVERRIDE_MAPPINGS[(_message$i18n2 = message.i18n) === null || _message$i18n2 === void 0 ? void 0 : _message$i18n2.key]) {\n      var _message$i18n3;\n      i18nKey = I18N_OVERRIDE_MAPPINGS[(_message$i18n3 = message.i18n) === null || _message$i18n3 === void 0 ? void 0 : _message$i18n3.key];\n    } else if (I18N_OVERRIDE_WITH_PARAMS_MAP[i18nKey]) {\n      var _message$i18n$params;\n      const param = (_message$i18n$params = message.i18n.params) === null || _message$i18n$params === void 0 ? void 0 : _message$i18n$params[0];\n      i18nKey = getI8nKeyUsingParams(i18nKey, param);\n      i18nParams = i18nKey.endsWith('custom') ? [param] : [];\n    }\n    if (Bundles.login[i18nKey]) {\n      Logger.info(`Override messages using i18n key ${i18nKey}`);\n      // expect user config i18n properly.\n      // e.g. the i18n value shall have placeholders like `{0}`, when params is not empty.\n      return loc(i18nKey, 'login', i18nParams);\n    }\n    if (isWebAuthnAPIError(i18nKey)) {\n      // The WebAuthn api error doesn't make much sense to a typical end user, but useful for developer.\n      // So keep the api message in response, but show a generic error message on UI.\n      return loc(WEBAUTHN_API_GENERIC_ERROR_KEY, 'login');\n    }\n  }\n  Logger.warn(`Avoid rendering unlocalized text sent from the API: ${message.message}`);\n  return message.message;\n};\n\n/**\n * @param {Object} error\n */\nconst getMessageFromBrowserError = error => {\n  if (error.name) {\n    const key = `oie.browser.error.${error.name}`;\n    if (Bundles.login[key]) {\n      Logger.info(`Override messages using i18n key ${key}`);\n      // expect user config i18n properly.\n      return loc(key, 'login');\n    }\n  }\n  return error.message;\n};\n\n/**\n * - iff `message.i18n.key` exists return the key.\n *\n * @param {Message} message\n */\nconst getMessageKey = message => {\n  var _message$i18n4;\n  return (message === null || message === void 0 ? void 0 : (_message$i18n4 = message.i18n) === null || _message$i18n4 === void 0 ? void 0 : _message$i18n4.key) || '';\n};\n\n/**\n * Has this i18n key been overridden for customization?\n * @param {String} i18nKey\n * @param {Object} settings\n * @returns Boolean\n */\nconst isCustomizedI18nKey = (i18nKey, settings) => {\n  const language = settings.get('languageCode');\n  const i18n = settings.get('i18n');\n  const customizedProperty = i18n && i18n[language] && i18n[language][i18nKey];\n  return !!customizedProperty;\n};\nexport { doesI18NKeyExist, getI18NParams, getI18NValue, getI18nKey, getMessage, getMessageFromBrowserError, getMessageKey, isCustomizedI18nKey };","map":{"version":3,"names":["Bundles","Logger","loc","getAuthenticatorDisplayName","FORMS","AUTHENTICATOR_KEY","I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS","WEBAUTHN_API_GENERIC_ERROR_KEY","SECURITY_QUESTION_PREFIXES","I18N_OVERRIDE_MAPPINGS","I18N_PARAMS_MAPPING","ENROLL_AUTHENTICATOR","ON_PREM","getParam","RSA","I18N_OVERRIDE_WITH_PARAMS_MAP","Email","getI8nKeyUsingParams","key","param","i18nKey","getI18NParams","remediation","authenticatorKey","params","formName","name","config","push","getI18nKey","i18nPath","forEach","prefix","indexOf","securityQuestionValue","replace","login","warn","doesI18NKeyExist","getI18NValue","defaultValue","isWebAuthnAPIError","startsWith","getMessage","message","_message$i18n","i18n","_message$i18n2","i18nParams","length","_message$i18n3","_message$i18n$params","endsWith","info","getMessageFromBrowserError","error","getMessageKey","_message$i18n4","isCustomizedI18nKey","settings","language","get","customizedProperty"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/ion/i18nUtils.js"],"sourcesContent":["import Bundles from '../../util/Bundles.js';\nimport Logger from '../../util/Logger.js';\nimport { loc } from '../../util/loc.js';\nimport { getAuthenticatorDisplayName } from '../view-builder/utils/AuthenticatorUtil.js';\nimport { FORMS, AUTHENTICATOR_KEY } from './RemediationConstants.js';\nimport { I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS } from '../view-builder/views/enroll-profile/i18nBaseAttributeMappings.js';\n\n/* eslint-disable max-len */\nconst WEBAUTHN_API_GENERIC_ERROR_KEY = 'authfactor.webauthn.error';\nconst SECURITY_QUESTION_PREFIXES = ['enroll-authenticator.security_question.credentials.questionKey.', 'challenge-authenticator.security_question.credentials.questionKey.'];\nconst I18N_OVERRIDE_MAPPINGS = {\n  'identify.identifier': 'primaryauth.username.placeholder',\n  'select-authenticator-unlock-account.identifier': 'primaryauth.username.placeholder',\n  'unlock-account.identifier': 'primaryauth.username.placeholder',\n  'identify.credentials.passcode': 'primaryauth.password.placeholder',\n  'identify.rememberMe': 'oie.remember',\n  'enroll-profile.userProfile.rememberMe': 'oie.remember',\n  'identify-recovery.identifier': 'password.forgot.email.or.username.placeholder',\n  'select-authenticator-enroll.authenticator.duo': 'factor.duo',\n  'select-authenticator-enroll.authenticator.google_otp': 'oie.google_authenticator.label',\n  'select-authenticator-enroll.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-enroll.authenticator.okta_password': 'oie.password.label',\n  'select-authenticator-enroll.authenticator.okta_verify': 'oie.okta_verify.label',\n  'select-authenticator-enroll.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-enroll.authenticator.rsa_token': 'factor.totpHard.rsaSecurId',\n  'select-authenticator-enroll.authenticator.security_question': 'oie.security.question.label',\n  'select-authenticator-enroll.authenticator.symantec_vip': 'factor.totpHard.symantecVip',\n  'select-authenticator-enroll.authenticator.webauthn': 'oie.webauthn.label',\n  'select-authenticator-enroll.authenticator.yubikey_token': 'oie.yubikey.label',\n  'select-authenticator-authenticate.authenticator.duo': 'factor.duo',\n  'select-authenticator-authenticate.authenticator.google_otp': 'oie.google_authenticator.label',\n  'select-authenticator-authenticate.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-authenticate.authenticator.okta_password': 'oie.password.label',\n  'select-authenticator-authenticate.authenticator.okta_verify.push': 'oie.okta_verify.push.title',\n  'select-authenticator-authenticate.authenticator.okta_verify.signed_nonce': 'oie.okta_verify.signed_nonce.label',\n  'select-authenticator-authenticate.authenticator.okta_verify.totp': 'oie.okta_verify.totp.title',\n  'select-authenticator-authenticate.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-authenticate.authenticator.rsa_token': 'factor.totpHard.rsaSecurId',\n  'select-authenticator-authenticate.authenticator.security_question': 'oie.security.question.label',\n  'select-authenticator-authenticate.authenticator.symantec_vip': 'factor.totpHard.symantecVip',\n  'select-authenticator-authenticate.authenticator.webauthn': 'oie.webauthn.label',\n  'select-authenticator-authenticate.authenticator.yubikey_token': 'oie.yubikey.label',\n  'select-authenticator-authenticate.authenticator.custom_app': 'oie.custom.app.authenticator.title',\n  'select-authenticator-unlock-account.authenticator.okta_email': 'oie.email.label',\n  'select-authenticator-unlock-account.authenticator.phone_number': 'oie.phone.label',\n  'select-authenticator-unlock-account.authenticator.okta_verify.push': 'oie.okta_verify.push.title',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.signed_nonce': 'oie.okta_verify.signed_nonce.label',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.push': 'oie.okta_verify.push.title',\n  'authenticator-verification-data.okta_verify.authenticator.methodType.totp': 'oie.okta_verify.totp.title',\n  'authenticator-enrollment-data.phone_number.authenticator.phoneNumber': 'mfa.phoneNumber.placeholder',\n  'authenticator-enrollment-data.phone_number.authenticator.methodType.sms': 'oie.phone.enroll.sms.label',\n  'authenticator-enrollment-data.phone_number.authenticator.methodType.voice': 'oie.phone.enroll.voice.label',\n  'enroll-authenticator.okta_password.credentials.passcode': 'oie.password.passwordLabel',\n  'enroll-authenticator.okta_email.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'enroll-authenticator.phone_number.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'enroll-authenticator.security_question.sub_schema_local_credentials.0': 'oie.security.question.questionKey.label',\n  'enroll-authenticator.security_question.sub_schema_local_credentials.1': 'oie.security.question.createQuestion.label',\n  'enroll-authenticator.security_question.credentials.answer': 'mfa.challenge.answer.placeholder',\n  'enroll-authenticator.security_question.credentials.question': 'oie.security.question.createQuestion.label',\n  'enroll-authenticator.security_question.credentials.questionKey': 'oie.security.question.questionKey.label',\n  'enroll-authenticator.google_otp.credentials.passcode': 'oie.google_authenticator.otp.enterCodeText',\n  'enroll-authenticator.onprem_mfa.credentials.clientData': 'enroll.onprem.username.placeholder',\n  'enroll-authenticator.onprem_mfa.credentials.passcode': 'enroll.onprem.passcode.placeholder',\n  'enroll-authenticator.rsa_token.credentials.clientData': 'enroll.onprem.username.placeholder',\n  'enroll-authenticator.rsa_token.credentials.passcode': 'enroll.onprem.passcode.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.credentialId': 'enroll.symantecVip.credentialId.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.passcode': 'enroll.symantecVip.passcode1.placeholder',\n  'enroll-authenticator.symantec_vip.credentials.nextPasscode': 'enroll.symantecVip.passcode2.placeholder',\n  'enroll-authenticator.yubikey_token.credentials.passcode': 'oie.yubikey.passcode.label',\n  'enrollment-channel-data.email': 'oie.enroll.okta_verify.channel.email.label',\n  'enrollment-channel-data.phoneNumber': 'mfa.phoneNumber.placeholder',\n  'select-enrollment-channel.authenticator.channel.qrcode': 'oie.enroll.okta_verify.select.channel.qrcode.label',\n  'select-enrollment-channel.authenticator.channel.email': 'oie.enroll.okta_verify.select.channel.email.label',\n  'select-enrollment-channel.authenticator.channel.sms': 'oie.enroll.okta_verify.select.channel.sms.label',\n  'challenge-authenticator.okta_email.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.okta_password.credentials.passcode': 'mfa.challenge.password.placeholder',\n  'challenge-authenticator.phone_number.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.security_question.credentials.answer': 'mfa.challenge.answer.placeholder',\n  'challenge-authenticator.okta_verify.credentials.totp': 'oie.okta_verify.totp.enterCodeText',\n  'challenge-authenticator.google_otp.credentials.passcode': 'oie.google_authenticator.otp.enterCodeText',\n  'challenge-authenticator.onprem_mfa.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.rsa_token.credentials.passcode': 'mfa.challenge.enterCode.placeholder',\n  'challenge-authenticator.custom_otp.credentials.passcode': 'oie.custom_otp.verify.passcode.label',\n  'challenge-authenticator.symantec_vip.credentials.passcode': 'oie.symantecVip.verify.passcode.label',\n  'challenge-authenticator.yubikey_token.credentials.passcode': 'oie.yubikey.passcode.label',\n  'challenge-authenticator.credentials.passcode': 'oie.password.label',\n  'reset-authenticator.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reset-authenticator.okta_password.confirmPassword': 'oie.password.confirmPasswordLabel',\n  'reset-authenticator.okta_password.credentials.revokeSessions': 'password.reset.revokeSessions',\n  'reenroll-authenticator.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reenroll-authenticator.okta_password.confirmPassword': 'oie.password.confirmPasswordLabel',\n  'reenroll-authenticator.okta_password.credentials.revokeSessions': 'password.reset.revokeSessions',\n  'reenroll-authenticator-warning.okta_password.credentials.passcode': 'oie.password.newPasswordLabel',\n  'reenroll-authenticator-warning.okta_password.confirmPassword': 'oie.password.confirmPasswordLabel',\n  'reenroll-authenticator-warning.okta_password.credentials.revokeSessions': 'password.reset.revokeSessions',\n  'enroll-authenticator.okta_password.confirmPassword': 'oie.password.confirmPasswordLabel',\n  'enroll-authenticator.okta_password.credentials.revokeSessions': 'password.reset.revokeSessions',\n  'incorrectPassword': 'oie.password.incorrect.message',\n  'profile-update.userProfile.secondEmail': 'oie.user.profile.secondary.email',\n  'user-code.userCode': 'device.code.activate.label',\n  // Remap authn API errors to OIE\n  'api.authn.poll.error.push_rejected': 'oktaverify.rejected',\n  // Remap duo API errors to OIE\n  'oie.authenticator.duo.method.duo.verification_timeout': 'oie.authenticator.duo.error',\n  'oie.authenticator.duo.method.duo.verification_failed': 'oie.authenticator.duo.error',\n  'idx.email.verification.required': 'registration.complete.confirm.text',\n  'tooManyRequests': 'oie.tooManyRequests',\n  'api.users.auth.error.POST_PASSWORD_UPDATE_AUTH_FAILURE': 'oie.post.password.update.auth.failure.error',\n  'security.access_denied': 'errors.E0000006',\n  'E0000009': 'errors.E0000009',\n  'E0000020': 'errors.E0000020',\n  'api.factors.error.sms.invalid_phone': 'oie.phone.invalid',\n  'app.ldap.password.reset.failed': 'errors.E0000017',\n  'oie.selfservice.unlock_user.challenge.failed.permissions': 'errors.E0000006',\n  'core.auth.factor.signedNonce.error.invalidEnrollment': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.invalidFactor': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.deletedDevice': 'core.auth.factor.signedNonce.error',\n  'core.auth.factor.signedNonce.error.invalidDeviceStatus': 'core.auth.factor.signedNonce.error.invalidDevice',\n  // re-map autoPush: \"Send push automatically\"\n  'challenge-poll.custom_app.autoChallenge': 'autoPush',\n  // authenticator-verification-custom-app-push-autochallenge\n  'challenge-poll.okta_verify.autoChallenge': 'autoPush',\n  // authenticator-verification-okta-verify-push-autoChallenge-on\n  'authenticator-verification-data.authenticator.autoChallenge': 'autoPush',\n  // authenticator-verification-data-okta-verify-push-autoChallenge-off.json\n  'authenticator-verification-data.okta_verify.authenticator.autoChallenge': 'autoPush',\n  'authenticator-verification-data.custom_app.authenticator.autoChallenge': 'autoPush',\n  // Existing overrides\n  ...I18N_BASE_ATTRIBUTE_ENROLL_PROFILE_MAPPINGS //enroll-profile strings\n};\n\nconst I18N_PARAMS_MAPPING = {\n  [FORMS.ENROLL_AUTHENTICATOR]: {\n    [AUTHENTICATOR_KEY.ON_PREM]: {\n      getParam: getAuthenticatorDisplayName\n    },\n    [AUTHENTICATOR_KEY.RSA]: {\n      getParam: getAuthenticatorDisplayName\n    }\n  }\n};\n\n/**\n * For i18n keys that require string interpolation using values from \"params\".\n * {baseKey} : {params}\n */\nconst I18N_OVERRIDE_WITH_PARAMS_MAP = {\n  'registration.error.invalidLoginEmail': {\n    Email: 'Email'\n  },\n  'registration.error.doesNotMatchPattern': {\n    Email: 'Email'\n  },\n  'registration.error.notUniqueWithinOrg': {\n    Email: 'Email'\n  }\n};\n\n/**\n * For messages that need to be interpolated with param values.\n *\n * Enumerate each possible param interpolation and hardcode that into properties file.\n * This is to ensure proper translation.\n *\n * Example - a known param:\n *\n * input =\n *  \"i18n\": {\n      \"key\": \"registration.error.doesNotMatchPattern\",\n      \"params\": [\n        \"Email\"\n      ]\n    }\n * output = registration.error.doesNotMatchPattern.Email\n *\n * Example - an unknown param:\n *\n * input =\n *  \"i18n\": {\n      \"key\": \"registration.error.doesNotMatchPattern\",\n      \"params\": [\n        \"Custom Property\"\n      ]\n    }\n * output = registration.error.doesNotMatchPattern.custom\n *\n * @param {String} key\n * @param {String} param\n * @returns {String}\n */\nconst getI8nKeyUsingParams = (key, param) => {\n  let i18nKey = key;\n  if (I18N_OVERRIDE_WITH_PARAMS_MAP[i18nKey][param]) {\n    i18nKey += `.${param}`;\n  } else {\n    i18nKey += '.custom';\n  }\n  return i18nKey;\n};\nconst getI18NParams = (remediation, authenticatorKey) => {\n  const params = [];\n  const formName = remediation.name;\n  if (I18N_PARAMS_MAPPING[formName] && I18N_PARAMS_MAPPING[formName][authenticatorKey]) {\n    const config = I18N_PARAMS_MAPPING[formName][authenticatorKey];\n    const param = config.getParam(remediation);\n    params.push(param);\n  }\n  return params;\n};\nconst getI18nKey = i18nPath => {\n  let i18nKey;\n  // Extract security question value from i18nPath\n  SECURITY_QUESTION_PREFIXES.forEach(prefix => {\n    if (i18nPath.indexOf(prefix) === 0) {\n      const securityQuestionValue = i18nPath.replace(prefix, '');\n      i18nKey = `security.${securityQuestionValue}`;\n    }\n  });\n  if (I18N_OVERRIDE_MAPPINGS[i18nPath]) {\n    i18nKey = I18N_OVERRIDE_MAPPINGS[i18nPath];\n  }\n  if (i18nKey && !Bundles.login[i18nKey]) {\n    Logger.warn(`expect i18n key ${i18nKey} for ${i18nPath} but not found in 'login' bundle.`);\n    i18nKey = null;\n  }\n  return i18nKey;\n};\nconst doesI18NKeyExist = i18nKey => {\n  return !!Bundles.login[i18nKey];\n};\n\n/**\n * Find i18n value using {@code i18nPath} if it exists.\n * Otherwise return {@code defaultValue}.\n *\n * @param {string} i18nPath\n * @param {string} defaultValue\n * @param {string[]} params\n */\nconst getI18NValue = (i18nPath, defaultValue, params = []) => {\n  const i18nKey = getI18nKey(i18nPath);\n  if (i18nKey) {\n    return loc(i18nKey, 'login', params);\n  } else {\n    Logger.warn(`Avoid rendering unlocalized text sent from the API: ${defaultValue}`);\n    return defaultValue;\n  }\n};\nconst isWebAuthnAPIError = i18nKey => i18nKey.startsWith(WEBAUTHN_API_GENERIC_ERROR_KEY);\n\n/**\n * @typedef {Object} Message\n * @property {string} message\n * @property {Object=} i18n\n * @property {string} i18n.key\n * @property {string[]} i18n.params\n */\n/**\n * - If `message.i18n.key` exists and has a value in 'login.properties'\n *   through the given key or via I18N_OVERRIDE_MAPPINGS, return the value.\n *\n * - returns `message.message` otherwise\n *\n * @param {Message} message\n */\nconst getMessage = message => {\n  var _message$i18n;\n  if ((_message$i18n = message.i18n) !== null && _message$i18n !== void 0 && _message$i18n.key) {\n    var _message$i18n2;\n    let i18nKey = message.i18n.key;\n    let i18nParams = message.i18n.params || [];\n\n    // TODO - remove this block once API fix is done - OKTA-398080\n    // Sometimes API sends params: [\"\"] an array with empty string.\n    // example - error-authenticator-enroll-password-common mock\n    if (i18nParams.length === 1 && i18nParams[0] === '') {\n      i18nParams = [];\n    }\n    if (I18N_OVERRIDE_MAPPINGS[(_message$i18n2 = message.i18n) === null || _message$i18n2 === void 0 ? void 0 : _message$i18n2.key]) {\n      var _message$i18n3;\n      i18nKey = I18N_OVERRIDE_MAPPINGS[(_message$i18n3 = message.i18n) === null || _message$i18n3 === void 0 ? void 0 : _message$i18n3.key];\n    } else if (I18N_OVERRIDE_WITH_PARAMS_MAP[i18nKey]) {\n      var _message$i18n$params;\n      const param = (_message$i18n$params = message.i18n.params) === null || _message$i18n$params === void 0 ? void 0 : _message$i18n$params[0];\n      i18nKey = getI8nKeyUsingParams(i18nKey, param);\n      i18nParams = i18nKey.endsWith('custom') ? [param] : [];\n    }\n    if (Bundles.login[i18nKey]) {\n      Logger.info(`Override messages using i18n key ${i18nKey}`);\n      // expect user config i18n properly.\n      // e.g. the i18n value shall have placeholders like `{0}`, when params is not empty.\n      return loc(i18nKey, 'login', i18nParams);\n    }\n    if (isWebAuthnAPIError(i18nKey)) {\n      // The WebAuthn api error doesn't make much sense to a typical end user, but useful for developer.\n      // So keep the api message in response, but show a generic error message on UI.\n      return loc(WEBAUTHN_API_GENERIC_ERROR_KEY, 'login');\n    }\n  }\n  Logger.warn(`Avoid rendering unlocalized text sent from the API: ${message.message}`);\n  return message.message;\n};\n\n/**\n * @param {Object} error\n */\nconst getMessageFromBrowserError = error => {\n  if (error.name) {\n    const key = `oie.browser.error.${error.name}`;\n    if (Bundles.login[key]) {\n      Logger.info(`Override messages using i18n key ${key}`);\n      // expect user config i18n properly.\n      return loc(key, 'login');\n    }\n  }\n  return error.message;\n};\n\n/**\n * - iff `message.i18n.key` exists return the key.\n *\n * @param {Message} message\n */\nconst getMessageKey = message => {\n  var _message$i18n4;\n  return (message === null || message === void 0 ? void 0 : (_message$i18n4 = message.i18n) === null || _message$i18n4 === void 0 ? void 0 : _message$i18n4.key) || '';\n};\n\n/**\n * Has this i18n key been overridden for customization?\n * @param {String} i18nKey\n * @param {Object} settings\n * @returns Boolean\n */\nconst isCustomizedI18nKey = (i18nKey, settings) => {\n  const language = settings.get('languageCode');\n  const i18n = settings.get('i18n');\n  const customizedProperty = i18n && i18n[language] && i18n[language][i18nKey];\n  return !!customizedProperty;\n};\n\nexport { doesI18NKeyExist, getI18NParams, getI18NValue, getI18nKey, getMessage, getMessageFromBrowserError, getMessageKey, isCustomizedI18nKey };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}