{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { interact } from './interact.js';\nimport { introspect } from './introspect.js';\nimport { remediate } from './remediate.js';\nimport { IdxStatus } from './types/api.js';\nimport { saveTransactionMeta, getSavedTransactionMeta } from './transactionMeta.js';\nimport { getFlowSpecification, getEnabledFeatures, getAvailableSteps, getMessagesFromResponse, isTerminalResponse } from './util.js';\nfunction initializeValues(options) {\n  const knownOptions = ['flow', 'remediators', 'actions', 'withCredentials', 'step', 'useGenericRemediator', 'exchangeCodeForTokens'];\n  const values = Object.assign({}, options);\n  knownOptions.forEach(option => {\n    delete values[option];\n  });\n  return values;\n}\nfunction initializeData(authClient, data) {\n  var _a, _b, _c, _d;\n  let {\n    options\n  } = data;\n  options = Object.assign(Object.assign({}, authClient.options.idx), options);\n  let {\n    flow,\n    withCredentials,\n    remediators,\n    actions\n  } = options;\n  const status = IdxStatus.PENDING;\n  flow = flow || ((_b = (_a = authClient.idx).getFlow) === null || _b === void 0 ? void 0 : _b.call(_a)) || 'default';\n  if (flow) {\n    (_d = (_c = authClient.idx).setFlow) === null || _d === void 0 ? void 0 : _d.call(_c, flow);\n    const flowSpec = getFlowSpecification(authClient, flow);\n    withCredentials = typeof withCredentials !== 'undefined' ? withCredentials : flowSpec.withCredentials;\n    remediators = remediators || flowSpec.remediators;\n    actions = actions || flowSpec.actions;\n  }\n  return Object.assign(Object.assign({}, data), {\n    options: Object.assign(Object.assign({}, options), {\n      flow,\n      withCredentials,\n      remediators,\n      actions\n    }),\n    status\n  });\n}\nfunction getDataFromIntrospect(_x, _x2) {\n  return _getDataFromIntrospect.apply(this, arguments);\n}\nfunction _getDataFromIntrospect() {\n  _getDataFromIntrospect = _asyncToGenerator(function* (authClient, data) {\n    const {\n      options\n    } = data;\n    const {\n      stateHandle,\n      withCredentials,\n      version,\n      state,\n      scopes,\n      recoveryToken,\n      activationToken,\n      maxAge,\n      acrValues,\n      nonce,\n      useGenericRemediator\n    } = options;\n    let idxResponse;\n    let meta = getSavedTransactionMeta(authClient, {\n      state,\n      recoveryToken,\n      activationToken\n    });\n    if (stateHandle) {\n      idxResponse = yield introspect(authClient, {\n        withCredentials,\n        version,\n        stateHandle,\n        useGenericRemediator\n      });\n    } else {\n      let interactionHandle = meta === null || meta === void 0 ? void 0 : meta.interactionHandle;\n      if (!interactionHandle) {\n        authClient.transactionManager.clear();\n        const interactResponse = yield interact(authClient, {\n          withCredentials,\n          state,\n          scopes,\n          activationToken,\n          recoveryToken,\n          maxAge,\n          acrValues,\n          nonce\n        });\n        interactionHandle = interactResponse.interactionHandle;\n        meta = interactResponse.meta;\n      }\n      idxResponse = yield introspect(authClient, {\n        withCredentials,\n        version,\n        interactionHandle,\n        useGenericRemediator\n      });\n    }\n    return Object.assign(Object.assign({}, data), {\n      idxResponse,\n      meta\n    });\n  });\n  return _getDataFromIntrospect.apply(this, arguments);\n}\nfunction getDataFromRemediate(_x3, _x4) {\n  return _getDataFromRemediate.apply(this, arguments);\n}\nfunction _getDataFromRemediate() {\n  _getDataFromRemediate = _asyncToGenerator(function* (authClient, data) {\n    let {\n      idxResponse,\n      options,\n      values\n    } = data;\n    const {\n      autoRemediate,\n      remediators,\n      actions,\n      flow,\n      step,\n      useGenericRemediator\n    } = options;\n    const shouldRemediate = autoRemediate !== false && (remediators || actions || step);\n    if (!shouldRemediate) {\n      return data;\n    }\n    values = Object.assign(Object.assign({}, values), {\n      stateHandle: idxResponse.rawIdxState.stateHandle\n    });\n    const {\n      idxResponse: idxResponseFromRemediation,\n      nextStep,\n      canceled\n    } = yield remediate(authClient, idxResponse, values, {\n      remediators,\n      actions,\n      flow,\n      step,\n      useGenericRemediator\n    });\n    idxResponse = idxResponseFromRemediation;\n    return Object.assign(Object.assign({}, data), {\n      idxResponse,\n      nextStep,\n      canceled\n    });\n  });\n  return _getDataFromRemediate.apply(this, arguments);\n}\nfunction getTokens(_x5, _x6) {\n  return _getTokens.apply(this, arguments);\n}\nfunction _getTokens() {\n  _getTokens = _asyncToGenerator(function* (authClient, data) {\n    let {\n      meta,\n      idxResponse\n    } = data;\n    const {\n      interactionCode\n    } = idxResponse;\n    const {\n      clientId,\n      codeVerifier,\n      ignoreSignature,\n      redirectUri,\n      urls,\n      scopes\n    } = meta;\n    const tokenResponse = yield authClient.token.exchangeCodeForTokens({\n      interactionCode,\n      clientId,\n      codeVerifier,\n      ignoreSignature,\n      redirectUri,\n      scopes\n    }, urls);\n    return tokenResponse.tokens;\n  });\n  return _getTokens.apply(this, arguments);\n}\nfunction finalizeData(_x7, _x8) {\n  return _finalizeData.apply(this, arguments);\n}\nfunction _finalizeData() {\n  _finalizeData = _asyncToGenerator(function* (authClient, data) {\n    let {\n      options,\n      idxResponse,\n      canceled,\n      status\n    } = data;\n    const {\n      exchangeCodeForTokens\n    } = options;\n    let shouldSaveResponse = false;\n    let shouldClearTransaction = false;\n    let clearSharedStorage = true;\n    let interactionCode;\n    let tokens;\n    let enabledFeatures;\n    let availableSteps;\n    let messages;\n    let terminal;\n    if (idxResponse) {\n      shouldSaveResponse = !!(idxResponse.requestDidSucceed || idxResponse.stepUp);\n      enabledFeatures = getEnabledFeatures(idxResponse);\n      availableSteps = getAvailableSteps(authClient, idxResponse, options.useGenericRemediator);\n      messages = getMessagesFromResponse(idxResponse, options);\n      terminal = isTerminalResponse(idxResponse);\n    }\n    if (terminal) {\n      status = IdxStatus.TERMINAL;\n      const hasActions = Object.keys(idxResponse.actions).length > 0;\n      const hasErrors = !!messages.find(msg => msg.class === 'ERROR');\n      const isTerminalSuccess = !hasActions && !hasErrors && idxResponse.requestDidSucceed === true;\n      if (isTerminalSuccess) {\n        shouldClearTransaction = true;\n      } else {\n        shouldSaveResponse = !!hasActions;\n      }\n      clearSharedStorage = false;\n    } else if (canceled) {\n      status = IdxStatus.CANCELED;\n      shouldClearTransaction = true;\n    } else if (idxResponse === null || idxResponse === void 0 ? void 0 : idxResponse.interactionCode) {\n      interactionCode = idxResponse.interactionCode;\n      if (exchangeCodeForTokens === false) {\n        status = IdxStatus.SUCCESS;\n        shouldClearTransaction = false;\n      } else {\n        tokens = yield getTokens(authClient, data);\n        status = IdxStatus.SUCCESS;\n        shouldClearTransaction = true;\n      }\n    }\n    return Object.assign(Object.assign({}, data), {\n      status,\n      interactionCode,\n      tokens,\n      shouldSaveResponse,\n      shouldClearTransaction,\n      clearSharedStorage,\n      enabledFeatures,\n      availableSteps,\n      messages,\n      terminal\n    });\n  });\n  return _finalizeData.apply(this, arguments);\n}\nfunction run(_x9) {\n  return _run.apply(this, arguments);\n}\nfunction _run() {\n  _run = _asyncToGenerator(function* (authClient, options = {}) {\n    var _a;\n    let data = {\n      options,\n      values: initializeValues(options)\n    };\n    data = initializeData(authClient, data);\n    data = yield getDataFromIntrospect(authClient, data);\n    data = yield getDataFromRemediate(authClient, data);\n    data = yield finalizeData(authClient, data);\n    const {\n      idxResponse,\n      meta,\n      shouldSaveResponse,\n      shouldClearTransaction,\n      clearSharedStorage,\n      status,\n      enabledFeatures,\n      availableSteps,\n      tokens,\n      nextStep,\n      messages,\n      error,\n      interactionCode\n    } = data;\n    if (shouldClearTransaction) {\n      authClient.transactionManager.clear({\n        clearSharedStorage\n      });\n    } else {\n      saveTransactionMeta(authClient, Object.assign({}, meta));\n      if (shouldSaveResponse) {\n        const {\n          rawIdxState: rawIdxResponse,\n          requestDidSucceed\n        } = idxResponse;\n        authClient.transactionManager.saveIdxResponse({\n          rawIdxResponse,\n          requestDidSucceed,\n          stateHandle: (_a = idxResponse.context) === null || _a === void 0 ? void 0 : _a.stateHandle,\n          interactionHandle: meta === null || meta === void 0 ? void 0 : meta.interactionHandle\n        });\n      }\n    }\n    const {\n      actions,\n      context,\n      neededToProceed,\n      proceed,\n      rawIdxState,\n      requestDidSucceed,\n      stepUp\n    } = idxResponse || {};\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n      status: status\n    }, meta && {\n      meta\n    }), enabledFeatures && {\n      enabledFeatures\n    }), availableSteps && {\n      availableSteps\n    }), tokens && {\n      tokens\n    }), nextStep && {\n      nextStep\n    }), messages && messages.length && {\n      messages\n    }), error && {\n      error\n    }), stepUp && {\n      stepUp\n    }), {\n      interactionCode,\n      actions: actions,\n      context: context,\n      neededToProceed: neededToProceed,\n      proceed: proceed,\n      rawIdxState: rawIdxState,\n      requestDidSucceed\n    });\n  });\n  return _run.apply(this, arguments);\n}\nexport { run };","map":{"version":3,"names":["interact","introspect","remediate","IdxStatus","saveTransactionMeta","getSavedTransactionMeta","getFlowSpecification","getEnabledFeatures","getAvailableSteps","getMessagesFromResponse","isTerminalResponse","initializeValues","options","knownOptions","values","Object","assign","forEach","option","initializeData","authClient","data","_a","_b","_c","_d","idx","flow","withCredentials","remediators","actions","status","PENDING","getFlow","call","setFlow","flowSpec","getDataFromIntrospect","_x","_x2","_getDataFromIntrospect","apply","arguments","_asyncToGenerator","stateHandle","version","state","scopes","recoveryToken","activationToken","maxAge","acrValues","nonce","useGenericRemediator","idxResponse","meta","interactionHandle","transactionManager","clear","interactResponse","getDataFromRemediate","_x3","_x4","_getDataFromRemediate","autoRemediate","step","shouldRemediate","rawIdxState","idxResponseFromRemediation","nextStep","canceled","getTokens","_x5","_x6","_getTokens","interactionCode","clientId","codeVerifier","ignoreSignature","redirectUri","urls","tokenResponse","token","exchangeCodeForTokens","tokens","finalizeData","_x7","_x8","_finalizeData","shouldSaveResponse","shouldClearTransaction","clearSharedStorage","enabledFeatures","availableSteps","messages","terminal","requestDidSucceed","stepUp","TERMINAL","hasActions","keys","length","hasErrors","find","msg","class","isTerminalSuccess","CANCELED","SUCCESS","run","_x9","_run","error","rawIdxResponse","saveIdxResponse","context","neededToProceed","proceed"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/run.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { interact } from './interact.js';\nimport { introspect } from './introspect.js';\nimport { remediate } from './remediate.js';\nimport { IdxStatus } from './types/api.js';\nimport { saveTransactionMeta, getSavedTransactionMeta } from './transactionMeta.js';\nimport { getFlowSpecification, getEnabledFeatures, getAvailableSteps, getMessagesFromResponse, isTerminalResponse } from './util.js';\n\nfunction initializeValues(options) {\n    const knownOptions = [\n        'flow',\n        'remediators',\n        'actions',\n        'withCredentials',\n        'step',\n        'useGenericRemediator',\n        'exchangeCodeForTokens',\n    ];\n    const values = Object.assign({}, options);\n    knownOptions.forEach(option => {\n        delete values[option];\n    });\n    return values;\n}\nfunction initializeData(authClient, data) {\n    var _a, _b, _c, _d;\n    let { options } = data;\n    options = Object.assign(Object.assign({}, authClient.options.idx), options);\n    let { flow, withCredentials, remediators, actions, } = options;\n    const status = IdxStatus.PENDING;\n    flow = flow || ((_b = (_a = authClient.idx).getFlow) === null || _b === void 0 ? void 0 : _b.call(_a)) || 'default';\n    if (flow) {\n        (_d = (_c = authClient.idx).setFlow) === null || _d === void 0 ? void 0 : _d.call(_c, flow);\n        const flowSpec = getFlowSpecification(authClient, flow);\n        withCredentials = (typeof withCredentials !== 'undefined') ? withCredentials : flowSpec.withCredentials;\n        remediators = remediators || flowSpec.remediators;\n        actions = actions || flowSpec.actions;\n    }\n    return Object.assign(Object.assign({}, data), { options: Object.assign(Object.assign({}, options), { flow,\n            withCredentials,\n            remediators,\n            actions }), status });\n}\nasync function getDataFromIntrospect(authClient, data) {\n    const { options } = data;\n    const { stateHandle, withCredentials, version, state, scopes, recoveryToken, activationToken, maxAge, acrValues, nonce, useGenericRemediator, } = options;\n    let idxResponse;\n    let meta = getSavedTransactionMeta(authClient, { state, recoveryToken, activationToken });\n    if (stateHandle) {\n        idxResponse = await introspect(authClient, { withCredentials, version, stateHandle, useGenericRemediator });\n    }\n    else {\n        let interactionHandle = meta === null || meta === void 0 ? void 0 : meta.interactionHandle;\n        if (!interactionHandle) {\n            authClient.transactionManager.clear();\n            const interactResponse = await interact(authClient, {\n                withCredentials,\n                state,\n                scopes,\n                activationToken,\n                recoveryToken,\n                maxAge,\n                acrValues,\n                nonce,\n            });\n            interactionHandle = interactResponse.interactionHandle;\n            meta = interactResponse.meta;\n        }\n        idxResponse = await introspect(authClient, { withCredentials, version, interactionHandle, useGenericRemediator });\n    }\n    return Object.assign(Object.assign({}, data), { idxResponse, meta });\n}\nasync function getDataFromRemediate(authClient, data) {\n    let { idxResponse, options, values } = data;\n    const { autoRemediate, remediators, actions, flow, step, useGenericRemediator, } = options;\n    const shouldRemediate = (autoRemediate !== false && (remediators || actions || step));\n    if (!shouldRemediate) {\n        return data;\n    }\n    values = Object.assign(Object.assign({}, values), { stateHandle: idxResponse.rawIdxState.stateHandle });\n    const { idxResponse: idxResponseFromRemediation, nextStep, canceled, } = await remediate(authClient, idxResponse, values, {\n        remediators,\n        actions,\n        flow,\n        step,\n        useGenericRemediator,\n    });\n    idxResponse = idxResponseFromRemediation;\n    return Object.assign(Object.assign({}, data), { idxResponse, nextStep, canceled });\n}\nasync function getTokens(authClient, data) {\n    let { meta, idxResponse } = data;\n    const { interactionCode } = idxResponse;\n    const { clientId, codeVerifier, ignoreSignature, redirectUri, urls, scopes, } = meta;\n    const tokenResponse = await authClient.token.exchangeCodeForTokens({\n        interactionCode,\n        clientId,\n        codeVerifier,\n        ignoreSignature,\n        redirectUri,\n        scopes\n    }, urls);\n    return tokenResponse.tokens;\n}\nasync function finalizeData(authClient, data) {\n    let { options, idxResponse, canceled, status, } = data;\n    const { exchangeCodeForTokens } = options;\n    let shouldSaveResponse = false;\n    let shouldClearTransaction = false;\n    let clearSharedStorage = true;\n    let interactionCode;\n    let tokens;\n    let enabledFeatures;\n    let availableSteps;\n    let messages;\n    let terminal;\n    if (idxResponse) {\n        shouldSaveResponse = !!(idxResponse.requestDidSucceed || idxResponse.stepUp);\n        enabledFeatures = getEnabledFeatures(idxResponse);\n        availableSteps = getAvailableSteps(authClient, idxResponse, options.useGenericRemediator);\n        messages = getMessagesFromResponse(idxResponse, options);\n        terminal = isTerminalResponse(idxResponse);\n    }\n    if (terminal) {\n        status = IdxStatus.TERMINAL;\n        const hasActions = Object.keys(idxResponse.actions).length > 0;\n        const hasErrors = !!messages.find(msg => msg.class === 'ERROR');\n        const isTerminalSuccess = !hasActions && !hasErrors && idxResponse.requestDidSucceed === true;\n        if (isTerminalSuccess) {\n            shouldClearTransaction = true;\n        }\n        else {\n            shouldSaveResponse = !!hasActions;\n        }\n        clearSharedStorage = false;\n    }\n    else if (canceled) {\n        status = IdxStatus.CANCELED;\n        shouldClearTransaction = true;\n    }\n    else if (idxResponse === null || idxResponse === void 0 ? void 0 : idxResponse.interactionCode) {\n        interactionCode = idxResponse.interactionCode;\n        if (exchangeCodeForTokens === false) {\n            status = IdxStatus.SUCCESS;\n            shouldClearTransaction = false;\n        }\n        else {\n            tokens = await getTokens(authClient, data);\n            status = IdxStatus.SUCCESS;\n            shouldClearTransaction = true;\n        }\n    }\n    return Object.assign(Object.assign({}, data), { status,\n        interactionCode,\n        tokens,\n        shouldSaveResponse,\n        shouldClearTransaction,\n        clearSharedStorage,\n        enabledFeatures,\n        availableSteps,\n        messages,\n        terminal });\n}\nasync function run(authClient, options = {}) {\n    var _a;\n    let data = {\n        options,\n        values: initializeValues(options)\n    };\n    data = initializeData(authClient, data);\n    data = await getDataFromIntrospect(authClient, data);\n    data = await getDataFromRemediate(authClient, data);\n    data = await finalizeData(authClient, data);\n    const { idxResponse, meta, shouldSaveResponse, shouldClearTransaction, clearSharedStorage, status, enabledFeatures, availableSteps, tokens, nextStep, messages, error, interactionCode } = data;\n    if (shouldClearTransaction) {\n        authClient.transactionManager.clear({ clearSharedStorage });\n    }\n    else {\n        saveTransactionMeta(authClient, Object.assign({}, meta));\n        if (shouldSaveResponse) {\n            const { rawIdxState: rawIdxResponse, requestDidSucceed } = idxResponse;\n            authClient.transactionManager.saveIdxResponse({\n                rawIdxResponse,\n                requestDidSucceed,\n                stateHandle: (_a = idxResponse.context) === null || _a === void 0 ? void 0 : _a.stateHandle,\n                interactionHandle: meta === null || meta === void 0 ? void 0 : meta.interactionHandle\n            });\n        }\n    }\n    const { actions, context, neededToProceed, proceed, rawIdxState, requestDidSucceed, stepUp } = idxResponse || {};\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ status: status }, (meta && { meta })), (enabledFeatures && { enabledFeatures })), (availableSteps && { availableSteps })), (tokens && { tokens })), (nextStep && { nextStep })), (messages && messages.length && { messages })), (error && { error })), (stepUp && { stepUp })), { interactionCode,\n        actions: actions, context: context, neededToProceed: neededToProceed, proceed: proceed, rawIdxState: rawIdxState, requestDidSucceed });\n}\n\nexport { run };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}