{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cartItems = [];\n    this.totalPrice = new Subject();\n    this.totalQuantity = new Subject();\n  }\n  addToCart(theCartItem) {\n    console.log(\"Adding to cart:\", theCartItem); // Debug log\n    let alreadyExistsInCart = false;\n    let existingCartItem = undefined;\n    if (this.cartItems.length > 0) {\n      for (let tempCartItem of this.cartItems) {\n        if (tempCartItem.id === theCartItem.id) {\n          existingCartItem = tempCartItem;\n          console.log(\"Item already exists in cart:\", existingCartItem);\n          break;\n        }\n      }\n      alreadyExistsInCart = existingCartItem !== undefined;\n    }\n    if (alreadyExistsInCart) {\n      existingCartItem.quantity++;\n    } else {\n      this.cartItems.push(theCartItem);\n      console.log(\"New item added to cart:\", theCartItem); // Debug log\n    }\n    // Call computeCartTotals after modifying the cartItems array\n    this.computeCartTotals();\n  }\n  computeCartTotals() {\n    let totalPriceValue = 0;\n    let totalQuantityValue = 0;\n    for (let currentCartItem of this.cartItems) {\n      totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n      totalQuantityValue += currentCartItem.quantity;\n    }\n    this.totalPrice.next(totalPriceValue);\n    this.totalQuantity.next(totalQuantityValue);\n    this.logCartData(totalPriceValue, totalQuantityValue);\n  }\n  logCartData(totalPriceValue, totalQuantityValue) {\n    console.log(\"Contents of the cart:\", this.cartItems); // Debug log for cartItems\n    console.log(`Total Price: ${totalPriceValue}, Total Quantity: ${totalQuantityValue}`);\n    console.log(\"Cart items length:\", this.cartItems.length); // Check the length of cartItems\n    for (let tempCartItem of this.cartItems) {\n      const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\n      console.log(`Item ID: ${tempCartItem.id}, Quantity: ${tempCartItem.quantity}, Unit Price: ${tempCartItem.unitPrice}, SubTotal: ${subTotalPrice}`);\n    }\n    console.log(`Total Price (fixed): ${totalPriceValue.toFixed(2)}`);\n  }\n  static {\n    this.ɵfac = function CartService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CartService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Subject","CartService","constructor","cartItems","totalPrice","totalQuantity","addToCart","theCartItem","console","log","alreadyExistsInCart","existingCartItem","undefined","length","tempCartItem","id","quantity","push","computeCartTotals","totalPriceValue","totalQuantityValue","currentCartItem","unitPrice","next","logCartData","subTotalPrice","toFixed","factory","ɵfac","providedIn"],"sources":["C:\\SpringBOot\\ecommerce-project\\03-frontend\\angular-ecommerce\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CartItem } from '../common/cart-item';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  cartItems: CartItem[] = [];\n  totalPrice: Subject<number> = new Subject<number>();\n  totalQuantity: Subject<number> = new Subject<number>();\n\n  constructor() { }\n\n  addToCart(theCartItem: CartItem) {\n    console.log(\"Adding to cart:\", theCartItem); // Debug log\n    let alreadyExistsInCart: boolean = false;\n    let existingCartItem: CartItem | undefined = undefined;\n\n    if (this.cartItems.length > 0) {\n      for (let tempCartItem of this.cartItems) {\n        if (tempCartItem.id === theCartItem.id) {\n          existingCartItem = tempCartItem;\n          console.log(\"Item already exists in cart:\", existingCartItem);\n          break;\n        }\n      }\n      alreadyExistsInCart = (existingCartItem !== undefined);\n    }\n\n    if (alreadyExistsInCart) {\n      existingCartItem!.quantity++;\n    } else {\n      this.cartItems.push(theCartItem);\n      console.log(\"New item added to cart:\", theCartItem); // Debug log\n    }\n\n    // Call computeCartTotals after modifying the cartItems array\n    this.computeCartTotals();\n  }\n\n  computeCartTotals() {\n    let totalPriceValue: number = 0;\n    let totalQuantityValue: number = 0;\n\n    for (let currentCartItem of this.cartItems) {\n      totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n      totalQuantityValue += currentCartItem.quantity;\n    }\n\n    this.totalPrice.next(totalPriceValue);\n    this.totalQuantity.next(totalQuantityValue);\n    this.logCartData(totalPriceValue, totalQuantityValue);\n  }\n\n  logCartData(totalPriceValue: number, totalQuantityValue: number) {\n    console.log(\"Contents of the cart:\", this.cartItems); // Debug log for cartItems\n\n    console.log(`Total Price: ${totalPriceValue}, Total Quantity: ${totalQuantityValue}`);\n    console.log(\"Cart items length:\", this.cartItems.length); // Check the length of cartItems\n\n    for (let tempCartItem of this.cartItems) {\n      const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\n      console.log(`Item ID: ${tempCartItem.id}, Quantity: ${tempCartItem.quantity}, Unit Price: ${tempCartItem.unitPrice}, SubTotal: ${subTotalPrice}`);\n    }\n    console.log(`Total Price (fixed): ${totalPriceValue.toFixed(2)}`);\n  }\n}\n"],"mappings":"AAEA,SAASA,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,WAAW;EAKtBC,YAAA;IAJA,KAAAC,SAAS,GAAe,EAAE;IAC1B,KAAAC,UAAU,GAAoB,IAAIJ,OAAO,EAAU;IACnD,KAAAK,aAAa,GAAoB,IAAIL,OAAO,EAAU;EAEtC;EAEhBM,SAASA,CAACC,WAAqB;IAC7BC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,WAAW,CAAC,CAAC,CAAC;IAC7C,IAAIG,mBAAmB,GAAY,KAAK;IACxC,IAAIC,gBAAgB,GAAyBC,SAAS;IAEtD,IAAI,IAAI,CAACT,SAAS,CAACU,MAAM,GAAG,CAAC,EAAE;MAC7B,KAAK,IAAIC,YAAY,IAAI,IAAI,CAACX,SAAS,EAAE;QACvC,IAAIW,YAAY,CAACC,EAAE,KAAKR,WAAW,CAACQ,EAAE,EAAE;UACtCJ,gBAAgB,GAAGG,YAAY;UAC/BN,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEE,gBAAgB,CAAC;UAC7D;QACF;MACF;MACAD,mBAAmB,GAAIC,gBAAgB,KAAKC,SAAU;IACxD;IAEA,IAAIF,mBAAmB,EAAE;MACvBC,gBAAiB,CAACK,QAAQ,EAAE;IAC9B,CAAC,MAAM;MACL,IAAI,CAACb,SAAS,CAACc,IAAI,CAACV,WAAW,CAAC;MAChCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,WAAW,CAAC,CAAC,CAAC;IACvD;IAEA;IACA,IAAI,CAACW,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiBA,CAAA;IACf,IAAIC,eAAe,GAAW,CAAC;IAC/B,IAAIC,kBAAkB,GAAW,CAAC;IAElC,KAAK,IAAIC,eAAe,IAAI,IAAI,CAAClB,SAAS,EAAE;MAC1CgB,eAAe,IAAIE,eAAe,CAACL,QAAQ,GAAGK,eAAe,CAACC,SAAS;MACvEF,kBAAkB,IAAIC,eAAe,CAACL,QAAQ;IAChD;IAEA,IAAI,CAACZ,UAAU,CAACmB,IAAI,CAACJ,eAAe,CAAC;IACrC,IAAI,CAACd,aAAa,CAACkB,IAAI,CAACH,kBAAkB,CAAC;IAC3C,IAAI,CAACI,WAAW,CAACL,eAAe,EAAEC,kBAAkB,CAAC;EACvD;EAEAI,WAAWA,CAACL,eAAuB,EAAEC,kBAA0B;IAC7DZ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACN,SAAS,CAAC,CAAC,CAAC;IAEtDK,OAAO,CAACC,GAAG,CAAC,gBAAgBU,eAAe,qBAAqBC,kBAAkB,EAAE,CAAC;IACrFZ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACN,SAAS,CAACU,MAAM,CAAC,CAAC,CAAC;IAE1D,KAAK,IAAIC,YAAY,IAAI,IAAI,CAACX,SAAS,EAAE;MACvC,MAAMsB,aAAa,GAAGX,YAAY,CAACE,QAAQ,GAAGF,YAAY,CAACQ,SAAS;MACpEd,OAAO,CAACC,GAAG,CAAC,YAAYK,YAAY,CAACC,EAAE,eAAeD,YAAY,CAACE,QAAQ,iBAAiBF,YAAY,CAACQ,SAAS,eAAeG,aAAa,EAAE,CAAC;IACnJ;IACAjB,OAAO,CAACC,GAAG,CAAC,wBAAwBU,eAAe,CAACO,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;EACnE;;;uCA3DWzB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}