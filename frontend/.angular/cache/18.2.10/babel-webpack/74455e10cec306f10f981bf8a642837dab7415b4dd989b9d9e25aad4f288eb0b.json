{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nfunction emailVerifyCallback(_x) {\n  return _emailVerifyCallback.apply(this, arguments);\n}\nfunction _emailVerifyCallback() {\n  _emailVerifyCallback = _asyncToGenerator(function* (settings) {\n    const authClient = settings.getAuthClient();\n    const idxOptions = {\n      exchangeCodeForTokens: false // we handle this in interactionCodeFlow.js\n    };\n    const meta = yield authClient.idx.getSavedTransactionMeta(); // meta can load in another tab using state if it matches\n    if (!meta || !meta.interactionHandle) {\n      // Flow can not continue in this tab. Create a synthetic server response and use it to display a message to the user\n      const messages = {\n        type: 'array',\n        value: [\n        // terminal-return-otp-only-no-location.json\n        {\n          'message': 'Enter the OTP in your original browser or device.',\n          'i18n': {\n            'key': 'idx.enter.otp.in.original.tab'\n          },\n          'class': 'INFO'\n        }]\n      };\n      const resp = {\n        neededToProceed: [],\n        // OKTA-382410 so bad that has to leverage rawIdxState\n        rawIdxState: {\n          messages: messages\n        },\n        context: {\n          messages: messages\n        }\n      };\n      return resp;\n    }\n\n    // Proceed using the OTP code\n    const otp = settings.get('otp');\n    const idxResponse = yield authClient.idx.proceed({\n      ...idxOptions,\n      otp: otp\n    });\n    return idxResponse;\n  });\n  return _emailVerifyCallback.apply(this, arguments);\n}\nexport { emailVerifyCallback };","map":{"version":3,"names":["emailVerifyCallback","_x","_emailVerifyCallback","apply","arguments","_asyncToGenerator","settings","authClient","getAuthClient","idxOptions","exchangeCodeForTokens","meta","idx","getSavedTransactionMeta","interactionHandle","messages","type","value","resp","neededToProceed","rawIdxState","context","otp","get","idxResponse","proceed"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/client/emailVerifyCallback.js"],"sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nasync function emailVerifyCallback(settings) {\n  const authClient = settings.getAuthClient();\n  const idxOptions = {\n    exchangeCodeForTokens: false // we handle this in interactionCodeFlow.js\n  };\n\n  const meta = await authClient.idx.getSavedTransactionMeta(); // meta can load in another tab using state if it matches\n  if (!meta || !meta.interactionHandle) {\n    // Flow can not continue in this tab. Create a synthetic server response and use it to display a message to the user\n    const messages = {\n      type: 'array',\n      value: [\n      // terminal-return-otp-only-no-location.json\n      {\n        'message': 'Enter the OTP in your original browser or device.',\n        'i18n': {\n          'key': 'idx.enter.otp.in.original.tab'\n        },\n        'class': 'INFO'\n      }]\n    };\n    const resp = {\n      neededToProceed: [],\n      // OKTA-382410 so bad that has to leverage rawIdxState\n      rawIdxState: {\n        messages: messages\n      },\n      context: {\n        messages: messages\n      }\n    };\n    return resp;\n  }\n\n  // Proceed using the OTP code\n  const otp = settings.get('otp');\n  const idxResponse = await authClient.idx.proceed({\n    ...idxOptions,\n    otp: otp\n  });\n  return idxResponse;\n}\n\nexport { emailVerifyCallback };\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,SAYeA,mBAAmBA,CAAAC,EAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,qBAAA;EAAAA,oBAAA,GAAAG,iBAAA,CAAlC,WAAmCC,QAAQ,EAAE;IAC3C,MAAMC,UAAU,GAAGD,QAAQ,CAACE,aAAa,CAAC,CAAC;IAC3C,MAAMC,UAAU,GAAG;MACjBC,qBAAqB,EAAE,KAAK,CAAC;IAC/B,CAAC;IAED,MAAMC,IAAI,SAASJ,UAAU,CAACK,GAAG,CAACC,uBAAuB,CAAC,CAAC,CAAC,CAAC;IAC7D,IAAI,CAACF,IAAI,IAAI,CAACA,IAAI,CAACG,iBAAiB,EAAE;MACpC;MACA,MAAMC,QAAQ,GAAG;QACfC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE;QACP;QACA;UACE,SAAS,EAAE,mDAAmD;UAC9D,MAAM,EAAE;YACN,KAAK,EAAE;UACT,CAAC;UACD,OAAO,EAAE;QACX,CAAC;MACH,CAAC;MACD,MAAMC,IAAI,GAAG;QACXC,eAAe,EAAE,EAAE;QACnB;QACAC,WAAW,EAAE;UACXL,QAAQ,EAAEA;QACZ,CAAC;QACDM,OAAO,EAAE;UACPN,QAAQ,EAAEA;QACZ;MACF,CAAC;MACD,OAAOG,IAAI;IACb;;IAEA;IACA,MAAMI,GAAG,GAAGhB,QAAQ,CAACiB,GAAG,CAAC,KAAK,CAAC;IAC/B,MAAMC,WAAW,SAASjB,UAAU,CAACK,GAAG,CAACa,OAAO,CAAC;MAC/C,GAAGhB,UAAU;MACba,GAAG,EAAEA;IACP,CAAC,CAAC;IACF,OAAOE,WAAW;EACpB,CAAC;EAAA,OAAAtB,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASJ,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}