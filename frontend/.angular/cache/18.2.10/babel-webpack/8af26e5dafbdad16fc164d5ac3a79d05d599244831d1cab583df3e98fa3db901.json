{"ast":null,"code":"import { View } from '../../../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport { SHOW_RESEND_TIMEOUT } from '../../utils/Constants.js';\nimport sessionStorageHelper from '../../../client/sessionStorageHelper.js';\nvar BaseResendView = View.extend({\n  postRender: function () {\n    this.showCalloutAfterTimeout();\n  },\n  showCalloutAfterTimeout: function () {\n    const timeStamp = sessionStorageHelper.getResendTimestamp();\n    if (!timeStamp) {\n      sessionStorageHelper.setResendTimestamp(Date.now());\n    }\n\n    // We keep track of a 'global' timestamp in sessionStorage because if the SIW does a re-render,\n    // we don't want to force the user to wait another 30s again to see the resend link. With this\n    // the user will wait AT MOST 30s until they see the resend link.\n    this.showMeInterval = setInterval(() => {\n      const start = sessionStorageHelper.getResendTimestamp();\n      const now = Date.now();\n      if (now - start >= SHOW_RESEND_TIMEOUT) {\n        this.$el.removeClass('hide');\n        clearInterval(this.showMeInterval);\n        sessionStorageHelper.removeResendTimestamp();\n      }\n    }, 250);\n  },\n  remove: function () {\n    var _this$options$appStat, _this$options$appStat2;\n    View.prototype.remove.apply(this, arguments);\n    clearInterval(this.showMeInterval);\n    const formName = this.options.appState.get('currentFormName');\n    const resendContext = ((_this$options$appStat = this.options.appState.get('currentAuthenticator')) === null || _this$options$appStat === void 0 ? void 0 : _this$options$appStat.resend) || ((_this$options$appStat2 = this.options.appState.get('currentAuthenticatorEnrollment')) === null || _this$options$appStat2 === void 0 ? void 0 : _this$options$appStat2.resend);\n    const didFormNameChange = this.options.model.get('formName') !== formName;\n\n    // Clear resend timeStamp whenever we change views (this means we're navigating away from the resend view)\n    if (sessionStorageHelper.getResendTimestamp() && (!resendContext || didFormNameChange)) {\n      sessionStorageHelper.removeResendTimestamp();\n    }\n  }\n});\nexport { BaseResendView as default };","map":{"version":3,"names":["View","SHOW_RESEND_TIMEOUT","sessionStorageHelper","BaseResendView","extend","postRender","showCalloutAfterTimeout","timeStamp","getResendTimestamp","setResendTimestamp","Date","now","showMeInterval","setInterval","start","$el","removeClass","clearInterval","removeResendTimestamp","remove","_this$options$appStat","_this$options$appStat2","prototype","apply","arguments","formName","options","appState","get","resendContext","resend","didFormNameChange","model","default"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/view-builder/views/shared/BaseResendView.js"],"sourcesContent":["import { View } from '../../../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport { SHOW_RESEND_TIMEOUT } from '../../utils/Constants.js';\nimport sessionStorageHelper from '../../../client/sessionStorageHelper.js';\n\nvar BaseResendView = View.extend({\n  postRender: function () {\n    this.showCalloutAfterTimeout();\n  },\n  showCalloutAfterTimeout: function () {\n    const timeStamp = sessionStorageHelper.getResendTimestamp();\n    if (!timeStamp) {\n      sessionStorageHelper.setResendTimestamp(Date.now());\n    }\n\n    // We keep track of a 'global' timestamp in sessionStorage because if the SIW does a re-render,\n    // we don't want to force the user to wait another 30s again to see the resend link. With this\n    // the user will wait AT MOST 30s until they see the resend link.\n    this.showMeInterval = setInterval(() => {\n      const start = sessionStorageHelper.getResendTimestamp();\n      const now = Date.now();\n      if (now - start >= SHOW_RESEND_TIMEOUT) {\n        this.$el.removeClass('hide');\n        clearInterval(this.showMeInterval);\n        sessionStorageHelper.removeResendTimestamp();\n      }\n    }, 250);\n  },\n  remove: function () {\n    var _this$options$appStat, _this$options$appStat2;\n    View.prototype.remove.apply(this, arguments);\n    clearInterval(this.showMeInterval);\n    const formName = this.options.appState.get('currentFormName');\n    const resendContext = ((_this$options$appStat = this.options.appState.get('currentAuthenticator')) === null || _this$options$appStat === void 0 ? void 0 : _this$options$appStat.resend) || ((_this$options$appStat2 = this.options.appState.get('currentAuthenticatorEnrollment')) === null || _this$options$appStat2 === void 0 ? void 0 : _this$options$appStat2.resend);\n    const didFormNameChange = this.options.model.get('formName') !== formName;\n\n    // Clear resend timeStamp whenever we change views (this means we're navigating away from the resend view)\n    if (sessionStorageHelper.getResendTimestamp() && (!resendContext || didFormNameChange)) {\n      sessionStorageHelper.removeResendTimestamp();\n    }\n  }\n});\n\nexport { BaseResendView as default };\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,8EAA8E;AACnG,OAAO,+EAA+E;AACtF,OAAO,mFAAmF;AAC1F,OAAO,mFAAmF;AAC1F,OAAO,uFAAuF;AAC9F,OAAO,8FAA8F;AACrG,OAAO,4EAA4E;AACnF,OAAO,gFAAgF;AACvF,OAAO,8EAA8E;AACrF,OAAO,uFAAuF;AAC9F,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,oBAAoB,MAAM,yCAAyC;AAE1E,IAAIC,cAAc,GAAGH,IAAI,CAACI,MAAM,CAAC;EAC/BC,UAAU,EAAE,SAAAA,CAAA,EAAY;IACtB,IAAI,CAACC,uBAAuB,CAAC,CAAC;EAChC,CAAC;EACDA,uBAAuB,EAAE,SAAAA,CAAA,EAAY;IACnC,MAAMC,SAAS,GAAGL,oBAAoB,CAACM,kBAAkB,CAAC,CAAC;IAC3D,IAAI,CAACD,SAAS,EAAE;MACdL,oBAAoB,CAACO,kBAAkB,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IACrD;;IAEA;IACA;IACA;IACA,IAAI,CAACC,cAAc,GAAGC,WAAW,CAAC,MAAM;MACtC,MAAMC,KAAK,GAAGZ,oBAAoB,CAACM,kBAAkB,CAAC,CAAC;MACvD,MAAMG,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;MACtB,IAAIA,GAAG,GAAGG,KAAK,IAAIb,mBAAmB,EAAE;QACtC,IAAI,CAACc,GAAG,CAACC,WAAW,CAAC,MAAM,CAAC;QAC5BC,aAAa,CAAC,IAAI,CAACL,cAAc,CAAC;QAClCV,oBAAoB,CAACgB,qBAAqB,CAAC,CAAC;MAC9C;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;EACDC,MAAM,EAAE,SAAAA,CAAA,EAAY;IAClB,IAAIC,qBAAqB,EAAEC,sBAAsB;IACjDrB,IAAI,CAACsB,SAAS,CAACH,MAAM,CAACI,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAC5CP,aAAa,CAAC,IAAI,CAACL,cAAc,CAAC;IAClC,MAAMa,QAAQ,GAAG,IAAI,CAACC,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC7D,MAAMC,aAAa,GAAG,CAAC,CAACT,qBAAqB,GAAG,IAAI,CAACM,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,sBAAsB,CAAC,MAAM,IAAI,IAAIR,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACU,MAAM,MAAM,CAACT,sBAAsB,GAAG,IAAI,CAACK,OAAO,CAACC,QAAQ,CAACC,GAAG,CAAC,gCAAgC,CAAC,MAAM,IAAI,IAAIP,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACS,MAAM,CAAC;IAC3W,MAAMC,iBAAiB,GAAG,IAAI,CAACL,OAAO,CAACM,KAAK,CAACJ,GAAG,CAAC,UAAU,CAAC,KAAKH,QAAQ;;IAEzE;IACA,IAAIvB,oBAAoB,CAACM,kBAAkB,CAAC,CAAC,KAAK,CAACqB,aAAa,IAAIE,iBAAiB,CAAC,EAAE;MACtF7B,oBAAoB,CAACgB,qBAAqB,CAAC,CAAC;IAC9C;EACF;AACF,CAAC,CAAC;AAEF,SAASf,cAAc,IAAI8B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}