{"ast":null,"code":"import PrimaryAuthController from './PrimaryAuthController.js';\nimport IDPDiscoveryModel from '../models/IDPDiscovery.js';\nimport PrimaryAuthModel from '../models/PrimaryAuth.js';\nimport BaseLoginController from '../util/BaseLoginController.js';\nimport IDPDiscoveryForm from '../views/idp-discovery/IDPDiscoveryForm.js';\nimport CustomButtons from '../views/primary-auth/CustomButtons.js';\nimport DeviceFingerprint from '../util/DeviceFingerprint.js';\nimport fn from '../util/RouterUtil.js';\nimport Util from '../../util/Util.js';\n\n/*!\n * Copyright (c) 2015-2017, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar IDPDiscoveryController = PrimaryAuthController.extend({\n  className: 'idp-discovery',\n  View: IDPDiscoveryForm,\n  constructor: function (options) {\n    options.appState.unset('username');\n    let requestContext = options.settings.get('idpDiscovery.requestContext');\n    const lastAuthResponse = options.appState.get('lastAuthResponse');\n    const stateToken = lastAuthResponse && (lastAuthResponse === null || lastAuthResponse === void 0 ? void 0 : lastAuthResponse.stateToken);\n\n    //Update requestContext with last stateToken, if the context was stateToken and not a fromUri\n    if (Util.isV1StateToken(requestContext)) {\n      requestContext = stateToken;\n    }\n    this.model = new IDPDiscoveryModel({\n      requestContext: requestContext,\n      settings: options.settings,\n      appState: options.appState\n    }, {\n      parse: true\n    });\n    BaseLoginController.apply(this, arguments);\n    this.addListeners();\n\n    // If social auth is configured, 'socialAuthPositionTop' will determine\n    // the order in which the social auth and primary auth are shown on the screen.\n    if (options.settings.get('hasConfiguredButtons')) {\n      this.add(CustomButtons, {\n        prepend: options.settings.get('socialAuthPositionTop'),\n        options: {\n          // To trigger an afterError event, we require the current controller\n          currentController: this\n        }\n      });\n    }\n    this.addFooter(options);\n    this.setUsername();\n  },\n  initialize: function () {\n    PrimaryAuthController.prototype.initialize.apply(this);\n    this.listenTo(this.model, 'goToPrimaryAuth', function () {\n      this.settings.set('username', this.model.get('username'));\n      const self = this;\n      if (this.settings.get('features.deviceFingerprinting')) {\n        DeviceFingerprint.generateDeviceFingerprint(this.settings.getAuthClient(), this.$el[0]).then(function (fingerprint) {\n          self.options.appState.set('deviceFingerprint', fingerprint);\n          self.options.appState.set('username', self.model.get('username'));\n        }).catch(function () {\n          // Keep going even if device fingerprint fails\n          self.options.appState.set('username', self.model.get('username'));\n        }).finally(function () {\n          self.doPrimaryAuth();\n        });\n      } else {\n        self.doPrimaryAuth();\n      }\n    });\n  },\n  doPrimaryAuth: function () {\n    if (this.settings.get('features.passwordlessAuth')) {\n      const primaryAuthModel = new PrimaryAuthModel({\n        username: this.model.get('username'),\n        multiOptionalFactorEnroll: this.options.settings.get('features.multiOptionalFactorEnroll'),\n        settings: this.options.settings,\n        appState: this.options.appState\n      }, {\n        parse: true\n      });\n\n      // Events to set the transaction attributes on the app state.\n      this.listenTo(primaryAuthModel, 'error', function (src, errObj) {\n        this.toggleButtonState(false);\n        this.model.trigger('error', this.model, errObj);\n      });\n      this.addModelListeners(primaryAuthModel);\n      // Make the primary auth request\n      primaryAuthModel.save();\n    } else {\n      this.options.appState.set('disableUsername', true);\n      const url = fn.createSigninUrl(this.settings.get('features.prefillUsernameFromIdpDiscovery') && this.model.get('username'));\n      this.options.appState.trigger('navigate', url);\n    }\n  }\n});\nexport { IDPDiscoveryController as default };","map":{"version":3,"names":["PrimaryAuthController","IDPDiscoveryModel","PrimaryAuthModel","BaseLoginController","IDPDiscoveryForm","CustomButtons","DeviceFingerprint","fn","Util","IDPDiscoveryController","extend","className","View","constructor","options","appState","unset","requestContext","settings","get","lastAuthResponse","stateToken","isV1StateToken","model","parse","apply","arguments","addListeners","add","prepend","currentController","addFooter","setUsername","initialize","prototype","listenTo","set","self","generateDeviceFingerprint","getAuthClient","$el","then","fingerprint","catch","finally","doPrimaryAuth","primaryAuthModel","username","multiOptionalFactorEnroll","src","errObj","toggleButtonState","trigger","addModelListeners","save","url","createSigninUrl","default"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v1/controllers/IDPDiscoveryController.js"],"sourcesContent":["import PrimaryAuthController from './PrimaryAuthController.js';\nimport IDPDiscoveryModel from '../models/IDPDiscovery.js';\nimport PrimaryAuthModel from '../models/PrimaryAuth.js';\nimport BaseLoginController from '../util/BaseLoginController.js';\nimport IDPDiscoveryForm from '../views/idp-discovery/IDPDiscoveryForm.js';\nimport CustomButtons from '../views/primary-auth/CustomButtons.js';\nimport DeviceFingerprint from '../util/DeviceFingerprint.js';\nimport fn from '../util/RouterUtil.js';\nimport Util from '../../util/Util.js';\n\n/*!\n * Copyright (c) 2015-2017, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar IDPDiscoveryController = PrimaryAuthController.extend({\n  className: 'idp-discovery',\n  View: IDPDiscoveryForm,\n  constructor: function (options) {\n    options.appState.unset('username');\n    let requestContext = options.settings.get('idpDiscovery.requestContext');\n    const lastAuthResponse = options.appState.get('lastAuthResponse');\n    const stateToken = lastAuthResponse && (lastAuthResponse === null || lastAuthResponse === void 0 ? void 0 : lastAuthResponse.stateToken);\n\n    //Update requestContext with last stateToken, if the context was stateToken and not a fromUri\n    if (Util.isV1StateToken(requestContext)) {\n      requestContext = stateToken;\n    }\n    this.model = new IDPDiscoveryModel({\n      requestContext: requestContext,\n      settings: options.settings,\n      appState: options.appState\n    }, {\n      parse: true\n    });\n    BaseLoginController.apply(this, arguments);\n    this.addListeners();\n\n    // If social auth is configured, 'socialAuthPositionTop' will determine\n    // the order in which the social auth and primary auth are shown on the screen.\n    if (options.settings.get('hasConfiguredButtons')) {\n      this.add(CustomButtons, {\n        prepend: options.settings.get('socialAuthPositionTop'),\n        options: {\n          // To trigger an afterError event, we require the current controller\n          currentController: this\n        }\n      });\n    }\n    this.addFooter(options);\n    this.setUsername();\n  },\n  initialize: function () {\n    PrimaryAuthController.prototype.initialize.apply(this);\n    this.listenTo(this.model, 'goToPrimaryAuth', function () {\n      this.settings.set('username', this.model.get('username'));\n      const self = this;\n      if (this.settings.get('features.deviceFingerprinting')) {\n        DeviceFingerprint.generateDeviceFingerprint(this.settings.getAuthClient(), this.$el[0]).then(function (fingerprint) {\n          self.options.appState.set('deviceFingerprint', fingerprint);\n          self.options.appState.set('username', self.model.get('username'));\n        }).catch(function () {\n          // Keep going even if device fingerprint fails\n          self.options.appState.set('username', self.model.get('username'));\n        }).finally(function () {\n          self.doPrimaryAuth();\n        });\n      } else {\n        self.doPrimaryAuth();\n      }\n    });\n  },\n  doPrimaryAuth: function () {\n    if (this.settings.get('features.passwordlessAuth')) {\n      const primaryAuthModel = new PrimaryAuthModel({\n        username: this.model.get('username'),\n        multiOptionalFactorEnroll: this.options.settings.get('features.multiOptionalFactorEnroll'),\n        settings: this.options.settings,\n        appState: this.options.appState\n      }, {\n        parse: true\n      });\n\n      // Events to set the transaction attributes on the app state.\n      this.listenTo(primaryAuthModel, 'error', function (src, errObj) {\n        this.toggleButtonState(false);\n        this.model.trigger('error', this.model, errObj);\n      });\n      this.addModelListeners(primaryAuthModel);\n      // Make the primary auth request\n      primaryAuthModel.save();\n    } else {\n      this.options.appState.set('disableUsername', true);\n      const url = fn.createSigninUrl(this.settings.get('features.prefillUsernameFromIdpDiscovery') && this.model.get('username'));\n      this.options.appState.trigger('navigate', url);\n    }\n  }\n});\n\nexport { IDPDiscoveryController as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}