{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cartItems = [];\n    this.totalPrice = new Subject();\n    this.totalQuantity = new Subject();\n  }\n  addToCart(theCartItem) {\n    console.log(\"hey\");\n    let alreadyExistsInCart = false;\n    let existingCartItem = undefined;\n    if (this.cartItems.length > 0) {\n      for (let temCartItem of this.cartItems) {\n        if (temCartItem.id == theCartItem.id) {\n          existingCartItem = temCartItem;\n          break;\n        }\n      }\n      alreadyExistsInCart = existingCartItem != undefined;\n      if (alreadyExistsInCart) {\n        existingCartItem.quantity++;\n      } else {\n        this.cartItems.push(theCartItem);\n        console.log('i am here');\n      }\n      this.computeCartTotals();\n    }\n  }\n  computeCartTotals() {\n    let totalPriceValue = 0;\n    let totalQuantityValue = 0;\n    for (let currentCartItem of this.cartItems) {\n      totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n      totalQuantityValue += currentCartItem.quantity;\n    }\n    this.totalPrice.next(totalPriceValue);\n    this.totalQuantity.next(totalQuantityValue);\n    this.logCartData(totalPriceValue, totalQuantityValue);\n  }\n  logCartData(totalPriceValue, totalQuantityValue) {\n    console.log(\"contents of the cart\");\n    for (let temCartItem of this.cartItems) {\n      const subTotalPrice = temCartItem.quantity * temCartItem.unitPrice;\n      console.log(totalPriceValue + \" \" + totalQuantityValue + \" \" + subTotalPrice);\n    }\n    console.log(totalPriceValue.toFixed(2));\n  }\n  static {\n    this.ɵfac = function CartService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CartService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Subject","CartService","constructor","cartItems","totalPrice","totalQuantity","addToCart","theCartItem","console","log","alreadyExistsInCart","existingCartItem","undefined","length","temCartItem","id","quantity","push","computeCartTotals","totalPriceValue","totalQuantityValue","currentCartItem","unitPrice","next","logCartData","subTotalPrice","toFixed","factory","ɵfac","providedIn"],"sources":["C:\\SpringBOot\\ecommerce-project\\03-frontend\\angular-ecommerce\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CartItem } from '../common/cart-item';\nimport { Subject } from 'rxjs';\nimport { template } from '@babel/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  cartItems:CartItem[]=[];\n  totalPrice:Subject<number>=new Subject<number>();\n  totalQuantity:Subject<number>=new Subject<number>();\n  constructor() { }\n  addToCart(theCartItem:CartItem){\n    console.log(\"hey\");\n    let alreadyExistsInCart:boolean=false;\n    let existingCartItem: CartItem | undefined = undefined;\n    if(this.cartItems.length>0){\n      for(let temCartItem of this.cartItems){\n        if(temCartItem.id==theCartItem.id){\n          existingCartItem=temCartItem;\n          break;\n        }\n      }\n      alreadyExistsInCart=(existingCartItem!=undefined);\n      if(alreadyExistsInCart){\n        existingCartItem!.quantity++;\n      }\n      else{\n        this.cartItems.push(theCartItem);\n        console.log('i am here');\n      }\n      this.computeCartTotals();\n    }\n    \n  }\n  computeCartTotals() {\n    let totalPriceValue:number=0;\n    let totalQuantityValue:number=0;\n    for(let currentCartItem of this.cartItems){\n      totalPriceValue+=currentCartItem.quantity*currentCartItem.unitPrice;\n      totalQuantityValue+=currentCartItem.quantity;\n    }\n    this.totalPrice.next(totalPriceValue);\n    this.totalQuantity.next(totalQuantityValue);\n    this.logCartData(totalPriceValue,totalQuantityValue);\n  }\n  logCartData(totalPriceValue: number, totalQuantityValue: number) {\n   console.log(\"contents of the cart\");\n   for(let temCartItem of this.cartItems){\n    const subTotalPrice=temCartItem.quantity*temCartItem.unitPrice;\n    console.log(totalPriceValue+\" \"+totalQuantityValue+\" \"+subTotalPrice);\n   }\n   console.log(totalPriceValue.toFixed(2));\n  }\n\n}\n"],"mappings":"AAEA,SAASA,OAAO,QAAQ,MAAM;;AAM9B,OAAM,MAAOC,WAAW;EAItBC,YAAA;IAHA,KAAAC,SAAS,GAAY,EAAE;IACvB,KAAAC,UAAU,GAAiB,IAAIJ,OAAO,EAAU;IAChD,KAAAK,aAAa,GAAiB,IAAIL,OAAO,EAAU;EACnC;EAChBM,SAASA,CAACC,WAAoB;IAC5BC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;IAClB,IAAIC,mBAAmB,GAAS,KAAK;IACrC,IAAIC,gBAAgB,GAAyBC,SAAS;IACtD,IAAG,IAAI,CAACT,SAAS,CAACU,MAAM,GAAC,CAAC,EAAC;MACzB,KAAI,IAAIC,WAAW,IAAI,IAAI,CAACX,SAAS,EAAC;QACpC,IAAGW,WAAW,CAACC,EAAE,IAAER,WAAW,CAACQ,EAAE,EAAC;UAChCJ,gBAAgB,GAACG,WAAW;UAC5B;QACF;MACF;MACAJ,mBAAmB,GAAEC,gBAAgB,IAAEC,SAAU;MACjD,IAAGF,mBAAmB,EAAC;QACrBC,gBAAiB,CAACK,QAAQ,EAAE;MAC9B,CAAC,MACG;QACF,IAAI,CAACb,SAAS,CAACc,IAAI,CAACV,WAAW,CAAC;QAChCC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC1B;MACA,IAAI,CAACS,iBAAiB,EAAE;IAC1B;EAEF;EACAA,iBAAiBA,CAAA;IACf,IAAIC,eAAe,GAAQ,CAAC;IAC5B,IAAIC,kBAAkB,GAAQ,CAAC;IAC/B,KAAI,IAAIC,eAAe,IAAI,IAAI,CAAClB,SAAS,EAAC;MACxCgB,eAAe,IAAEE,eAAe,CAACL,QAAQ,GAACK,eAAe,CAACC,SAAS;MACnEF,kBAAkB,IAAEC,eAAe,CAACL,QAAQ;IAC9C;IACA,IAAI,CAACZ,UAAU,CAACmB,IAAI,CAACJ,eAAe,CAAC;IACrC,IAAI,CAACd,aAAa,CAACkB,IAAI,CAACH,kBAAkB,CAAC;IAC3C,IAAI,CAACI,WAAW,CAACL,eAAe,EAACC,kBAAkB,CAAC;EACtD;EACAI,WAAWA,CAACL,eAAuB,EAAEC,kBAA0B;IAC9DZ,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,KAAI,IAAIK,WAAW,IAAI,IAAI,CAACX,SAAS,EAAC;MACrC,MAAMsB,aAAa,GAACX,WAAW,CAACE,QAAQ,GAACF,WAAW,CAACQ,SAAS;MAC9Dd,OAAO,CAACC,GAAG,CAACU,eAAe,GAAC,GAAG,GAACC,kBAAkB,GAAC,GAAG,GAACK,aAAa,CAAC;IACtE;IACAjB,OAAO,CAACC,GAAG,CAACU,eAAe,CAACO,OAAO,CAAC,CAAC,CAAC,CAAC;EACxC;;;uCA9CWzB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}