{"ast":null,"code":"import { loc } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport Model from '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport fn from '../../util/CookieUtil.js';\nimport Enums from '../../util/Enums.js';\nimport BaseLoginModel from './BaseLoginModel.js';\n\n/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar PrimaryAuthModel = BaseLoginModel.extend({\n  props: function () {\n    const cookieUsername = fn.getCookieUsername();\n    const properties = this.getUsernameAndRemember(cookieUsername);\n    const props = {\n      username: {\n        type: 'string',\n        validate: function (value) {\n          if (oktaUnderscore.isEmpty(value)) {\n            return loc('error.username.required', 'login');\n          }\n        },\n        value: properties.username\n      },\n      lastUsername: ['string', false, cookieUsername],\n      context: ['object', false],\n      remember: ['boolean', true, properties.remember],\n      multiOptionalFactorEnroll: ['boolean', true]\n    };\n    if (!(this.settings && this.settings.get('features.passwordlessAuth'))) {\n      props.password = {\n        type: 'string',\n        validate: function (value) {\n          if (oktaUnderscore.isEmpty(value)) {\n            return loc('error.password.required', 'login');\n          }\n        }\n      };\n    }\n    return props;\n  },\n  getUsernameAndRemember: function (cookieUsername) {\n    const settingsUsername = this.settings && this.settings.get('username');\n    const rememberMeEnabled = this.settings && this.settings.get('features.rememberMe');\n    let remember = false;\n    let username;\n    if (settingsUsername) {\n      username = settingsUsername;\n      remember = rememberMeEnabled && username === cookieUsername;\n    } else if (rememberMeEnabled && cookieUsername) {\n      // Only respect the cookie if the feature is enabled.\n      // Allows us to force prompting when necessary, e.g. SAML ForceAuthn\n      username = cookieUsername;\n      remember = true;\n    }\n    return {\n      username: username,\n      remember: remember\n    };\n  },\n  constructor: function (options) {\n    this.settings = options && options.settings;\n    this.appState = options && options.appState;\n    Model.apply(this, arguments);\n    this.listenTo(this, 'change:username', function (model, username) {\n      this.set({\n        remember: username === this.get('lastUsername')\n      });\n    });\n  },\n  parse: function (options) {\n    return oktaUnderscore.omit(options, ['settings', 'appState']);\n  },\n  save: function () {\n    const username = this.settings.transformUsername(this.get('username'), Enums.PRIMARY_AUTH);\n    const remember = this.get('remember');\n    const lastUsername = this.get('lastUsername');\n    this.setUsernameCookie(username, remember, lastUsername);\n\n    //the 'save' event here is triggered and used in the BaseLoginController\n    //to disable the primary button on the primary auth form\n    this.trigger('save');\n    this.appState.trigger('loading', true);\n    const signInArgs = this.getSignInArgs(username);\n    let primaryAuthPromise;\n    if (this.appState.get('isUnauthenticated')) {\n      const authClient = this.appState.settings.getAuthClient();\n\n      // bootstrapped with stateToken\n      if (this.appState.get('isIdxStateToken')) {\n        // if its an idx stateToken, we send the parameter as identifier to login API\n        primaryAuthPromise = this.doTransaction(function (transaction) {\n          return this.doPrimaryAuth(authClient, signInArgs, transaction.login);\n        });\n      } else {\n        primaryAuthPromise = this.doTransaction(function (transaction) {\n          return this.doPrimaryAuth(authClient, signInArgs, transaction.authenticate);\n        }, true);\n      }\n    } else {\n      //normal username/password flow without stateToken\n      primaryAuthPromise = this.startTransaction(function (authClient) {\n        return this.doPrimaryAuth(authClient, signInArgs, oktaUnderscore.bind(authClient.signInWithCredentials, authClient));\n      });\n    }\n    return primaryAuthPromise.catch(() => {\n      // Specific event handled by the Header for the case where the security image is not\n      // enabled and we want to show a spinner. (Triggered only here and handled only by Header).\n      this.appState.trigger('removeLoading');\n      fn.removeUsernameCookie();\n    }).finally(() => {\n      this.appState.trigger('loading', false);\n    });\n  },\n  getSignInArgs: function (username) {\n    const multiOptionalFactorEnroll = this.get('multiOptionalFactorEnroll');\n    const signInArgs = {};\n    if (!this.settings.get('features.passwordlessAuth')) {\n      signInArgs.password = this.get('password');\n    }\n\n    // if its an idx stateToken, we send the parameter as identifier to login API\n    if (this.appState.get('isIdxStateToken')) {\n      signInArgs.identifier = username;\n    } else {\n      //only post options param for non-idx flows\n      signInArgs.username = username;\n      signInArgs.options = {\n        warnBeforePasswordExpired: true,\n        multiOptionalFactorEnroll: multiOptionalFactorEnroll\n      };\n    }\n    return signInArgs;\n  },\n  setUsernameCookie: function (username, remember, lastUsername) {\n    // Do not modify the cookie when feature is disabled, relevant for SAML ForceAuthn prompts\n    if (this.settings.get('features.rememberMe')) {\n      // Only delete the cookie if its owner says so. This allows other\n      // users to log in on a one-off basis.\n      if (!remember && lastUsername === username) {\n        fn.removeUsernameCookie();\n      } else if (remember) {\n        fn.setUsernameCookie(username);\n      }\n    }\n  },\n  doPrimaryAuth: function (authClient, signInArgs, func) {\n    const deviceFingerprintEnabled = this.settings.get('features.deviceFingerprinting');\n    const typingPatternEnabled = this.settings.get('features.trackTypingPattern');\n\n    // Add the custom header for fingerprint, typing pattern if needed, and then remove it afterwards\n    // Since we only need to send it for primary auth\n    if (deviceFingerprintEnabled && this.appState.get('deviceFingerprint')) {\n      authClient.http.setRequestHeader('X-Device-Fingerprint', this.appState.get('deviceFingerprint'));\n    }\n    if (typingPatternEnabled && this.appState.get('typingPattern')) {\n      authClient.http.setRequestHeader('X-Typing-Pattern', this.appState.get('typingPattern'));\n    }\n    const self = this;\n    return func(signInArgs).finally(function () {\n      if (deviceFingerprintEnabled) {\n        authClient.http.setRequestHeader('X-Device-Fingerprint', undefined);\n        self.appState.unset('deviceFingerprint'); //Fingerprint can only be used once\n      }\n      if (typingPatternEnabled) {\n        authClient.http.setRequestHeader('X-Typing-Pattern', undefined);\n        self.appState.unset('typingPattern');\n      }\n    });\n  }\n});\nexport { PrimaryAuthModel as default };","map":{"version":3,"names":["loc","oktaUnderscore","Model","fn","Enums","BaseLoginModel","PrimaryAuthModel","extend","props","cookieUsername","getCookieUsername","properties","getUsernameAndRemember","username","type","validate","value","isEmpty","lastUsername","context","remember","multiOptionalFactorEnroll","settings","get","password","settingsUsername","rememberMeEnabled","constructor","options","appState","apply","arguments","listenTo","model","set","parse","omit","save","transformUsername","PRIMARY_AUTH","setUsernameCookie","trigger","signInArgs","getSignInArgs","primaryAuthPromise","authClient","getAuthClient","doTransaction","transaction","doPrimaryAuth","login","authenticate","startTransaction","bind","signInWithCredentials","catch","removeUsernameCookie","finally","identifier","warnBeforePasswordExpired","func","deviceFingerprintEnabled","typingPatternEnabled","http","setRequestHeader","self","undefined","unset","default"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v1/models/PrimaryAuth.js"],"sourcesContent":["import { loc } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport Model from '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport fn from '../../util/CookieUtil.js';\nimport Enums from '../../util/Enums.js';\nimport BaseLoginModel from './BaseLoginModel.js';\n\n/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar PrimaryAuthModel = BaseLoginModel.extend({\n  props: function () {\n    const cookieUsername = fn.getCookieUsername();\n    const properties = this.getUsernameAndRemember(cookieUsername);\n    const props = {\n      username: {\n        type: 'string',\n        validate: function (value) {\n          if (oktaUnderscore.isEmpty(value)) {\n            return loc('error.username.required', 'login');\n          }\n        },\n        value: properties.username\n      },\n      lastUsername: ['string', false, cookieUsername],\n      context: ['object', false],\n      remember: ['boolean', true, properties.remember],\n      multiOptionalFactorEnroll: ['boolean', true]\n    };\n    if (!(this.settings && this.settings.get('features.passwordlessAuth'))) {\n      props.password = {\n        type: 'string',\n        validate: function (value) {\n          if (oktaUnderscore.isEmpty(value)) {\n            return loc('error.password.required', 'login');\n          }\n        }\n      };\n    }\n    return props;\n  },\n  getUsernameAndRemember: function (cookieUsername) {\n    const settingsUsername = this.settings && this.settings.get('username');\n    const rememberMeEnabled = this.settings && this.settings.get('features.rememberMe');\n    let remember = false;\n    let username;\n    if (settingsUsername) {\n      username = settingsUsername;\n      remember = rememberMeEnabled && username === cookieUsername;\n    } else if (rememberMeEnabled && cookieUsername) {\n      // Only respect the cookie if the feature is enabled.\n      // Allows us to force prompting when necessary, e.g. SAML ForceAuthn\n      username = cookieUsername;\n      remember = true;\n    }\n    return {\n      username: username,\n      remember: remember\n    };\n  },\n  constructor: function (options) {\n    this.settings = options && options.settings;\n    this.appState = options && options.appState;\n    Model.apply(this, arguments);\n    this.listenTo(this, 'change:username', function (model, username) {\n      this.set({\n        remember: username === this.get('lastUsername')\n      });\n    });\n  },\n  parse: function (options) {\n    return oktaUnderscore.omit(options, ['settings', 'appState']);\n  },\n  save: function () {\n    const username = this.settings.transformUsername(this.get('username'), Enums.PRIMARY_AUTH);\n    const remember = this.get('remember');\n    const lastUsername = this.get('lastUsername');\n    this.setUsernameCookie(username, remember, lastUsername);\n\n    //the 'save' event here is triggered and used in the BaseLoginController\n    //to disable the primary button on the primary auth form\n    this.trigger('save');\n    this.appState.trigger('loading', true);\n    const signInArgs = this.getSignInArgs(username);\n    let primaryAuthPromise;\n    if (this.appState.get('isUnauthenticated')) {\n      const authClient = this.appState.settings.getAuthClient();\n\n      // bootstrapped with stateToken\n      if (this.appState.get('isIdxStateToken')) {\n        // if its an idx stateToken, we send the parameter as identifier to login API\n        primaryAuthPromise = this.doTransaction(function (transaction) {\n          return this.doPrimaryAuth(authClient, signInArgs, transaction.login);\n        });\n      } else {\n        primaryAuthPromise = this.doTransaction(function (transaction) {\n          return this.doPrimaryAuth(authClient, signInArgs, transaction.authenticate);\n        }, true);\n      }\n    } else {\n      //normal username/password flow without stateToken\n      primaryAuthPromise = this.startTransaction(function (authClient) {\n        return this.doPrimaryAuth(authClient, signInArgs, oktaUnderscore.bind(authClient.signInWithCredentials, authClient));\n      });\n    }\n    return primaryAuthPromise.catch(() => {\n      // Specific event handled by the Header for the case where the security image is not\n      // enabled and we want to show a spinner. (Triggered only here and handled only by Header).\n      this.appState.trigger('removeLoading');\n      fn.removeUsernameCookie();\n    }).finally(() => {\n      this.appState.trigger('loading', false);\n    });\n  },\n  getSignInArgs: function (username) {\n    const multiOptionalFactorEnroll = this.get('multiOptionalFactorEnroll');\n    const signInArgs = {};\n    if (!this.settings.get('features.passwordlessAuth')) {\n      signInArgs.password = this.get('password');\n    }\n\n    // if its an idx stateToken, we send the parameter as identifier to login API\n    if (this.appState.get('isIdxStateToken')) {\n      signInArgs.identifier = username;\n    } else {\n      //only post options param for non-idx flows\n      signInArgs.username = username;\n      signInArgs.options = {\n        warnBeforePasswordExpired: true,\n        multiOptionalFactorEnroll: multiOptionalFactorEnroll\n      };\n    }\n    return signInArgs;\n  },\n  setUsernameCookie: function (username, remember, lastUsername) {\n    // Do not modify the cookie when feature is disabled, relevant for SAML ForceAuthn prompts\n    if (this.settings.get('features.rememberMe')) {\n      // Only delete the cookie if its owner says so. This allows other\n      // users to log in on a one-off basis.\n      if (!remember && lastUsername === username) {\n        fn.removeUsernameCookie();\n      } else if (remember) {\n        fn.setUsernameCookie(username);\n      }\n    }\n  },\n  doPrimaryAuth: function (authClient, signInArgs, func) {\n    const deviceFingerprintEnabled = this.settings.get('features.deviceFingerprinting');\n    const typingPatternEnabled = this.settings.get('features.trackTypingPattern');\n\n    // Add the custom header for fingerprint, typing pattern if needed, and then remove it afterwards\n    // Since we only need to send it for primary auth\n    if (deviceFingerprintEnabled && this.appState.get('deviceFingerprint')) {\n      authClient.http.setRequestHeader('X-Device-Fingerprint', this.appState.get('deviceFingerprint'));\n    }\n    if (typingPatternEnabled && this.appState.get('typingPattern')) {\n      authClient.http.setRequestHeader('X-Typing-Pattern', this.appState.get('typingPattern'));\n    }\n    const self = this;\n    return func(signInArgs).finally(function () {\n      if (deviceFingerprintEnabled) {\n        authClient.http.setRequestHeader('X-Device-Fingerprint', undefined);\n        self.appState.unset('deviceFingerprint'); //Fingerprint can only be used once\n      }\n\n      if (typingPatternEnabled) {\n        authClient.http.setRequestHeader('X-Typing-Pattern', undefined);\n        self.appState.unset('typingPattern');\n      }\n    });\n  }\n});\n\nexport { PrimaryAuthModel as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}