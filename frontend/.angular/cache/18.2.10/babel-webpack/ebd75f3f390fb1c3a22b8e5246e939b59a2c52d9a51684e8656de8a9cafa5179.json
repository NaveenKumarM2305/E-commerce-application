{"ast":null,"code":"import _ from '../../packages/@okta/courage-dist/esm/lib/underscore/underscore-min.js';\nimport { loc } from './loc.js';\nimport Enums from './Enums.js';\nimport Logger from './Logger.js';\nimport fn from './BrowserFeatures.js';\n\n/* eslint-disable max-statements */\nconst Util = {};\nconst ovDeepLink = 'redirect_uri=https://login.okta.com/oauth/callback';\nconst buildInputForParameter = function (name, value) {\n  const input = document.createElement('input');\n  input.name = name;\n  input.value = decodeURIComponent(value);\n  input.type = 'hidden';\n  return input;\n};\nconst buildSubmitInput = function () {\n  const input = document.createElement('input');\n  input.type = 'submit';\n  return input;\n};\nconst buildDynamicForm = function (url = '', method) {\n  const splitOnFragment = url.split('#');\n  const fragment = splitOnFragment[1];\n  const splitOnQuery = (splitOnFragment[0] || '').split('?');\n  const query = splitOnQuery[1];\n  let targetUrl = splitOnQuery[0];\n  if (fragment) {\n    targetUrl += '#' + fragment;\n  }\n  const form = document.createElement('form');\n  form.method = method;\n  form.style.display = 'none';\n  form.action = targetUrl;\n  if (query && query.length) {\n    const queryParts = query.split('&');\n    queryParts.forEach(queryPart => {\n      const parameterParts = queryPart.split('=');\n      const input = buildInputForParameter(parameterParts[0], parameterParts[1]);\n      form.appendChild(input);\n    });\n  }\n  form.appendChild(buildSubmitInput());\n  return form;\n};\n\n// eslint-disable-next-line complexity\nUtil.transformErrorXHR = function (xhr) {\n  // Handle network connection error\n  if (xhr.status === 0 && _.isEmpty(xhr.responseJSON)) {\n    xhr.responseJSON = {\n      errorSummary: loc('error.network.connection', 'login')\n    };\n    return xhr;\n  }\n  if (!xhr.responseJSON) {\n    if (!xhr.responseText) {\n      // Empty server response\n      xhr.responseJSON = {\n        errorSummary: loc('error.unsupported.response', 'login')\n      };\n      return xhr;\n    }\n    if (typeof xhr.responseText === 'string') {\n      try {\n        xhr.responseJSON = JSON.parse(xhr.responseText);\n      } catch (e) {\n        // Malformed server response\n        xhr.responseJSON = {\n          errorSummary: loc('error.unsupported.response', 'login')\n        };\n        return xhr;\n      }\n    } else if (typeof xhr.responseText === 'object') {\n      xhr.responseJSON = xhr.responseText;\n    }\n  }\n  // Temporary solution to display field errors\n  // Assuming there is only one field error in a response\n  if (xhr.responseJSON && xhr.responseJSON.errorCauses && xhr.responseJSON.errorCauses.length) {\n    xhr.responseJSON.errorSummary = xhr.responseJSON.errorCauses[0].errorSummary;\n  }\n  // Replace error messages\n  if (!_.isEmpty(xhr.responseJSON)) {\n    const {\n      errorCode: errorCode\n    } = xhr.responseJSON;\n    const untranslatedErrorCodes = [\n    // API already provides localized and factor specific error message in errorCauses\n    'E0000068',\n    // API provides localized error message for password requirements in errorCauses\n    'E0000014'];\n    const errorMsg = errorCode && !untranslatedErrorCodes.includes(errorCode)\n    // We don't pass parameters to the `loc()` util\n    // However some i18n keys like `errors.E0000001` require one parameter\n    // Don't dispatch custom 'okta-i18n-error' event in this case\n    ? loc('errors.' + errorCode, 'login', [], true) : undefined;\n    if ((errorMsg === null || errorMsg === void 0 ? void 0 : errorMsg.indexOf('L10N_ERROR[')) === -1) {\n      xhr.responseJSON.errorSummary = errorMsg;\n      if (xhr.responseJSON && xhr.responseJSON.errorCauses && xhr.responseJSON.errorCauses.length) {\n        // BaseForm will consume errorCauses before errorSummary if it is an array,\n        // so, we have to make sure to remove it when we have a valid error code\n        delete xhr.responseJSON.errorCauses;\n      }\n    }\n  }\n  return xhr;\n};\n\n// Simple helper function to lowercase all strings in the given array\nUtil.toLower = function (strings) {\n  return _.map(strings, function (str) {\n    return str.toLowerCase();\n  });\n};\n\n// A languageCode can be composed of multiple parts, i.e:\n// {{language}}-{{region}}-{{dialect}}\n//\n// In these cases, it's necessary to generate a list of other possible\n// combinations that we might support (in preferred order).\n//\n// For example:\n// en-US -> [en-US, en]\n// de-DE-bavarian -> [de-DE-bavarian, de-DE, de]\nfunction expandLanguage(language) {\n  const expanded = [language];\n  const parts = language.split('-');\n  while (parts.pop() && parts.length > 0) {\n    expanded.push(parts.join('-'));\n  }\n  return expanded;\n}\n\n// Following the rules of expanding one language, this will generate\n// all potential languages in the given order (where higher priority is\n// given to expanded languages over other downstream languages).\nUtil.expandLanguages = function (languages) {\n  return _.chain(languages).map(expandLanguage).flatten().uniq().value();\n};\n\n//helper to call setTimeout\nUtil.callAfterTimeout = function (callback, time) {\n  return setTimeout(callback, time);\n};\n\n// Helper function to provide consistent formatting of template literals\n// that are logged when in development mode.\nUtil.debugMessage = function (message) {\n  Logger.warn(`\\n${message.replace(/^(\\s)+/gm, '')}`);\n};\nUtil.logConsoleError = function (message) {\n  Logger.error(message);\n};\n\n// Trigger an afterError event\nUtil.triggerAfterError = function (controller, err = {}) {\n  if (!err.statusCode && err.xhr && err.xhr.status) {\n    // Bring the statusCode to the top-level of the Error\n    err.statusCode = err.xhr.status;\n  }\n  // Some controllers return the className as a function - process it here:\n  const className = _.isFunction(controller.className) ? controller.className() : controller.className;\n  const error = _.pick(err, 'name', 'message', 'statusCode', 'xhr');\n  controller.trigger('afterError', {\n    controller: className\n  }, error);\n  // Logs to console only in dev mode\n  Logger.warn('controller: ' + className + ', error: ' + error);\n};\nUtil.redirect = function (url, win = window, isAppLink = false) {\n  if (fn.isAndroid() && !isAppLink) {\n    Util.redirectWithFormGet(url);\n  } else {\n    Util.changeLocation(url, win);\n  }\n};\nUtil.changeLocation = function (url, win = window) {\n  if (!url) {\n    Logger.error(`Cannot redirect to empty URL: (${url})`);\n    return;\n  }\n  win.location.href = url;\n};\nUtil.executeOnVisiblePage = function (cb) {\n  if (document.visibilityState === 'hidden') {\n    const visibilityChangeHandler = () => {\n      if (document.visibilityState === 'visible') {\n        document.removeEventListener('visibilitychange', visibilityChangeHandler);\n        cb();\n      }\n    };\n    document.addEventListener('visibilitychange', visibilityChangeHandler);\n  } else {\n    cb();\n  }\n};\nUtil.isAndroidOVEnrollment = function () {\n  const ovEnrollment = decodeURIComponent(window.location.href).includes(ovDeepLink);\n  return fn.isAndroid() && ovEnrollment;\n};\n\n/**\n * Why redirect via Form get rather using `window.location.href`?\n * At the time of writing, Chrome (<72) in Android would block window location change\n * at following case\n * 1. An AJAX is trigger because of user action.\n * 2. 5+ seconds passed without any further user interaction.\n * 3. User takes an action results in window location change.\n *\n * Luckily we discovered that uses Form submit would work around this problem\n * even though it changed window location.\n *\n * Check the commit history for more details.\n */\nUtil.redirectWithFormGet = function (url) {\n  Util.redirectWithForm(url, 'get');\n};\nUtil.redirectWithForm = function (url, method = 'post') {\n  if (!url) {\n    Logger.error(`Cannot redirect to empty URL: (${url})`);\n    return;\n  }\n  const mainContainer = document.getElementById(Enums.WIDGET_CONTAINER_ID);\n  if (!mainContainer) {\n    Logger.error('Cannot find okta-sign-in container append to which a form');\n    return;\n  }\n  const form = buildDynamicForm(url, method);\n  mainContainer.appendChild(form);\n  form.querySelector('input[type=\"submit\"]').click();\n};\n\n/**\n * When we want to show an explain text, we need to check if this is different from\n * the label text, to not have an explain that look like a duplicated label.\n * okta-signin-widget gives the possibility to customize every i18n, so we cannot\n * know ahead if these two are equal or different, we need to call this function everytime.\n */\nUtil.createInputExplain = function (explainKey, labelKey, bundleName, explainParams, labelParams) {\n  const explain = explainParams ? loc(explainKey, bundleName, explainParams) : loc(explainKey, bundleName);\n  const label = labelParams ? loc(labelKey, bundleName, labelParams) : loc(labelKey, bundleName);\n  if (explain === label) {\n    return false;\n  }\n  return explain;\n};\nUtil.isV1StateToken = function (token) {\n  return !!(token && _.isString(token) && token.startsWith('00'));\n};\nUtil.getAutocompleteValue = function (settings, defaultValue) {\n  const shouldDisableAutocomplete = settings === null || settings === void 0 ? void 0 : settings.get('features.disableAutocomplete');\n  if (shouldDisableAutocomplete) {\n    return 'off';\n  }\n  return defaultValue;\n};\n\n/**\n * Equivalent of `new URLSearchParams(params).toString()` with broadest browser support.\n * Does not include params with nullish values.\n */\nUtil.searchParamsToString = function (params) {\n  return Object.keys(params).filter(key => {\n    const val = params[key];\n    return val !== undefined && val !== null;\n  }).map(key => {\n    return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n  }).join('&');\n};\nexport { Util as default };","map":{"version":3,"names":["_","loc","Enums","Logger","fn","Util","ovDeepLink","buildInputForParameter","name","value","input","document","createElement","decodeURIComponent","type","buildSubmitInput","buildDynamicForm","url","method","splitOnFragment","split","fragment","splitOnQuery","query","targetUrl","form","style","display","action","length","queryParts","forEach","queryPart","parameterParts","appendChild","transformErrorXHR","xhr","status","isEmpty","responseJSON","errorSummary","responseText","JSON","parse","e","errorCauses","errorCode","untranslatedErrorCodes","errorMsg","includes","undefined","indexOf","toLower","strings","map","str","toLowerCase","expandLanguage","language","expanded","parts","pop","push","join","expandLanguages","languages","chain","flatten","uniq","callAfterTimeout","callback","time","setTimeout","debugMessage","message","warn","replace","logConsoleError","error","triggerAfterError","controller","err","statusCode","className","isFunction","pick","trigger","redirect","win","window","isAppLink","isAndroid","redirectWithFormGet","changeLocation","location","href","executeOnVisiblePage","cb","visibilityState","visibilityChangeHandler","removeEventListener","addEventListener","isAndroidOVEnrollment","ovEnrollment","redirectWithForm","mainContainer","getElementById","WIDGET_CONTAINER_ID","querySelector","click","createInputExplain","explainKey","labelKey","bundleName","explainParams","labelParams","explain","label","isV1StateToken","token","isString","startsWith","getAutocompleteValue","settings","defaultValue","shouldDisableAutocomplete","get","searchParamsToString","params","Object","keys","filter","key","val","encodeURIComponent","default"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/util/Util.js"],"sourcesContent":["import _ from '../../packages/@okta/courage-dist/esm/lib/underscore/underscore-min.js';\nimport { loc } from './loc.js';\nimport Enums from './Enums.js';\nimport Logger from './Logger.js';\nimport fn from './BrowserFeatures.js';\n\n/* eslint-disable max-statements */\nconst Util = {};\nconst ovDeepLink = 'redirect_uri=https://login.okta.com/oauth/callback';\nconst buildInputForParameter = function (name, value) {\n  const input = document.createElement('input');\n  input.name = name;\n  input.value = decodeURIComponent(value);\n  input.type = 'hidden';\n  return input;\n};\nconst buildSubmitInput = function () {\n  const input = document.createElement('input');\n  input.type = 'submit';\n  return input;\n};\nconst buildDynamicForm = function (url = '', method) {\n  const splitOnFragment = url.split('#');\n  const fragment = splitOnFragment[1];\n  const splitOnQuery = (splitOnFragment[0] || '').split('?');\n  const query = splitOnQuery[1];\n  let targetUrl = splitOnQuery[0];\n  if (fragment) {\n    targetUrl += '#' + fragment;\n  }\n  const form = document.createElement('form');\n  form.method = method;\n  form.style.display = 'none';\n  form.action = targetUrl;\n  if (query && query.length) {\n    const queryParts = query.split('&');\n    queryParts.forEach(queryPart => {\n      const parameterParts = queryPart.split('=');\n      const input = buildInputForParameter(parameterParts[0], parameterParts[1]);\n      form.appendChild(input);\n    });\n  }\n  form.appendChild(buildSubmitInput());\n  return form;\n};\n\n// eslint-disable-next-line complexity\nUtil.transformErrorXHR = function (xhr) {\n  // Handle network connection error\n  if (xhr.status === 0 && _.isEmpty(xhr.responseJSON)) {\n    xhr.responseJSON = {\n      errorSummary: loc('error.network.connection', 'login')\n    };\n    return xhr;\n  }\n  if (!xhr.responseJSON) {\n    if (!xhr.responseText) {\n      // Empty server response\n      xhr.responseJSON = {\n        errorSummary: loc('error.unsupported.response', 'login')\n      };\n      return xhr;\n    }\n    if (typeof xhr.responseText === 'string') {\n      try {\n        xhr.responseJSON = JSON.parse(xhr.responseText);\n      } catch (e) {\n        // Malformed server response\n        xhr.responseJSON = {\n          errorSummary: loc('error.unsupported.response', 'login')\n        };\n        return xhr;\n      }\n    } else if (typeof xhr.responseText === 'object') {\n      xhr.responseJSON = xhr.responseText;\n    }\n  }\n  // Temporary solution to display field errors\n  // Assuming there is only one field error in a response\n  if (xhr.responseJSON && xhr.responseJSON.errorCauses && xhr.responseJSON.errorCauses.length) {\n    xhr.responseJSON.errorSummary = xhr.responseJSON.errorCauses[0].errorSummary;\n  }\n  // Replace error messages\n  if (!_.isEmpty(xhr.responseJSON)) {\n    const {\n      errorCode: errorCode\n    } = xhr.responseJSON;\n    const untranslatedErrorCodes = [\n    // API already provides localized and factor specific error message in errorCauses\n    'E0000068',\n    // API provides localized error message for password requirements in errorCauses\n    'E0000014'];\n    const errorMsg = errorCode && !untranslatedErrorCodes.includes(errorCode)\n    // We don't pass parameters to the `loc()` util\n    // However some i18n keys like `errors.E0000001` require one parameter\n    // Don't dispatch custom 'okta-i18n-error' event in this case\n    ? loc('errors.' + errorCode, 'login', [], true) : undefined;\n    if ((errorMsg === null || errorMsg === void 0 ? void 0 : errorMsg.indexOf('L10N_ERROR[')) === -1) {\n      xhr.responseJSON.errorSummary = errorMsg;\n      if (xhr.responseJSON && xhr.responseJSON.errorCauses && xhr.responseJSON.errorCauses.length) {\n        // BaseForm will consume errorCauses before errorSummary if it is an array,\n        // so, we have to make sure to remove it when we have a valid error code\n        delete xhr.responseJSON.errorCauses;\n      }\n    }\n  }\n  return xhr;\n};\n\n// Simple helper function to lowercase all strings in the given array\nUtil.toLower = function (strings) {\n  return _.map(strings, function (str) {\n    return str.toLowerCase();\n  });\n};\n\n// A languageCode can be composed of multiple parts, i.e:\n// {{language}}-{{region}}-{{dialect}}\n//\n// In these cases, it's necessary to generate a list of other possible\n// combinations that we might support (in preferred order).\n//\n// For example:\n// en-US -> [en-US, en]\n// de-DE-bavarian -> [de-DE-bavarian, de-DE, de]\nfunction expandLanguage(language) {\n  const expanded = [language];\n  const parts = language.split('-');\n  while (parts.pop() && parts.length > 0) {\n    expanded.push(parts.join('-'));\n  }\n  return expanded;\n}\n\n// Following the rules of expanding one language, this will generate\n// all potential languages in the given order (where higher priority is\n// given to expanded languages over other downstream languages).\nUtil.expandLanguages = function (languages) {\n  return _.chain(languages).map(expandLanguage).flatten().uniq().value();\n};\n\n//helper to call setTimeout\nUtil.callAfterTimeout = function (callback, time) {\n  return setTimeout(callback, time);\n};\n\n// Helper function to provide consistent formatting of template literals\n// that are logged when in development mode.\nUtil.debugMessage = function (message) {\n  Logger.warn(`\\n${message.replace(/^(\\s)+/gm, '')}`);\n};\nUtil.logConsoleError = function (message) {\n  Logger.error(message);\n};\n\n// Trigger an afterError event\nUtil.triggerAfterError = function (controller, err = {}) {\n  if (!err.statusCode && err.xhr && err.xhr.status) {\n    // Bring the statusCode to the top-level of the Error\n    err.statusCode = err.xhr.status;\n  }\n  // Some controllers return the className as a function - process it here:\n  const className = _.isFunction(controller.className) ? controller.className() : controller.className;\n  const error = _.pick(err, 'name', 'message', 'statusCode', 'xhr');\n  controller.trigger('afterError', {\n    controller: className\n  }, error);\n  // Logs to console only in dev mode\n  Logger.warn('controller: ' + className + ', error: ' + error);\n};\nUtil.redirect = function (url, win = window, isAppLink = false) {\n  if (fn.isAndroid() && !isAppLink) {\n    Util.redirectWithFormGet(url);\n  } else {\n    Util.changeLocation(url, win);\n  }\n};\nUtil.changeLocation = function (url, win = window) {\n  if (!url) {\n    Logger.error(`Cannot redirect to empty URL: (${url})`);\n    return;\n  }\n  win.location.href = url;\n};\nUtil.executeOnVisiblePage = function (cb) {\n  if (document.visibilityState === 'hidden') {\n    const visibilityChangeHandler = () => {\n      if (document.visibilityState === 'visible') {\n        document.removeEventListener('visibilitychange', visibilityChangeHandler);\n        cb();\n      }\n    };\n    document.addEventListener('visibilitychange', visibilityChangeHandler);\n  } else {\n    cb();\n  }\n};\nUtil.isAndroidOVEnrollment = function () {\n  const ovEnrollment = decodeURIComponent(window.location.href).includes(ovDeepLink);\n  return fn.isAndroid() && ovEnrollment;\n};\n\n/**\n * Why redirect via Form get rather using `window.location.href`?\n * At the time of writing, Chrome (<72) in Android would block window location change\n * at following case\n * 1. An AJAX is trigger because of user action.\n * 2. 5+ seconds passed without any further user interaction.\n * 3. User takes an action results in window location change.\n *\n * Luckily we discovered that uses Form submit would work around this problem\n * even though it changed window location.\n *\n * Check the commit history for more details.\n */\nUtil.redirectWithFormGet = function (url) {\n  Util.redirectWithForm(url, 'get');\n};\nUtil.redirectWithForm = function (url, method = 'post') {\n  if (!url) {\n    Logger.error(`Cannot redirect to empty URL: (${url})`);\n    return;\n  }\n  const mainContainer = document.getElementById(Enums.WIDGET_CONTAINER_ID);\n  if (!mainContainer) {\n    Logger.error('Cannot find okta-sign-in container append to which a form');\n    return;\n  }\n  const form = buildDynamicForm(url, method);\n  mainContainer.appendChild(form);\n  form.querySelector('input[type=\"submit\"]').click();\n};\n\n/**\n * When we want to show an explain text, we need to check if this is different from\n * the label text, to not have an explain that look like a duplicated label.\n * okta-signin-widget gives the possibility to customize every i18n, so we cannot\n * know ahead if these two are equal or different, we need to call this function everytime.\n */\nUtil.createInputExplain = function (explainKey, labelKey, bundleName, explainParams, labelParams) {\n  const explain = explainParams ? loc(explainKey, bundleName, explainParams) : loc(explainKey, bundleName);\n  const label = labelParams ? loc(labelKey, bundleName, labelParams) : loc(labelKey, bundleName);\n  if (explain === label) {\n    return false;\n  }\n  return explain;\n};\nUtil.isV1StateToken = function (token) {\n  return !!(token && _.isString(token) && token.startsWith('00'));\n};\nUtil.getAutocompleteValue = function (settings, defaultValue) {\n  const shouldDisableAutocomplete = settings === null || settings === void 0 ? void 0 : settings.get('features.disableAutocomplete');\n  if (shouldDisableAutocomplete) {\n    return 'off';\n  }\n  return defaultValue;\n};\n\n/**\n * Equivalent of `new URLSearchParams(params).toString()` with broadest browser support.\n * Does not include params with nullish values.\n */\nUtil.searchParamsToString = function (params) {\n  return Object.keys(params).filter(key => {\n    const val = params[key];\n    return val !== undefined && val !== null;\n  }).map(key => {\n    return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n  }).join('&');\n};\n\nexport { Util as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}