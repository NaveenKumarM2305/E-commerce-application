{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\nclass AuthenticatorVerificationData extends AuthenticatorData {\n  mapAuthenticator() {\n    return this.getAuthenticatorData();\n  }\n  getInputAuthenticator() {\n    const authenticator = this.getAuthenticatorFromRemediation();\n    const methodType = authenticator.form.value.find(({\n      name\n    }) => name === 'methodType');\n    if (methodType && methodType.options) {\n      return {\n        name: 'methodType',\n        type: 'string',\n        required: true,\n        options: methodType.options\n      };\n    }\n    const inputs = [...authenticator.form.value];\n    return inputs;\n  }\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n}\nAuthenticatorVerificationData.remediationName = 'authenticator-verification-data';\nexport { AuthenticatorVerificationData };","map":{"version":3,"names":["AuthenticatorData","AuthenticatorVerificationData","mapAuthenticator","getAuthenticatorData","getInputAuthenticator","authenticator","getAuthenticatorFromRemediation","methodType","form","value","find","name","options","type","required","inputs","getValuesAfterProceed","values","trimmedValues","Object","keys","filter","valueKey","reduce","assign","remediationName"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-auth-js/esm/browser/idx/remediators/AuthenticatorVerificationData.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\n\nclass AuthenticatorVerificationData extends AuthenticatorData {\n    mapAuthenticator() {\n        return this.getAuthenticatorData();\n    }\n    getInputAuthenticator() {\n        const authenticator = this.getAuthenticatorFromRemediation();\n        const methodType = authenticator.form.value.find(({ name }) => name === 'methodType');\n        if (methodType && methodType.options) {\n            return {\n                name: 'methodType',\n                type: 'string',\n                required: true,\n                options: methodType.options\n            };\n        }\n        const inputs = [...authenticator.form.value];\n        return inputs;\n    }\n    getValuesAfterProceed() {\n        this.values = super.getValuesAfterProceed();\n        let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n        return trimmedValues.reduce((values, valueKey) => (Object.assign(Object.assign({}, values), { [valueKey]: this.values[valueKey] })), {});\n    }\n}\nAuthenticatorVerificationData.remediationName = 'authenticator-verification-data';\n\nexport { AuthenticatorVerificationData };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,iBAAiB,QAAQ,6BAA6B;AAE/D,MAAMC,6BAA6B,SAASD,iBAAiB,CAAC;EAC1DE,gBAAgBA,CAAA,EAAG;IACf,OAAO,IAAI,CAACC,oBAAoB,CAAC,CAAC;EACtC;EACAC,qBAAqBA,CAAA,EAAG;IACpB,MAAMC,aAAa,GAAG,IAAI,CAACC,+BAA+B,CAAC,CAAC;IAC5D,MAAMC,UAAU,GAAGF,aAAa,CAACG,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC;MAAEC;IAAK,CAAC,KAAKA,IAAI,KAAK,YAAY,CAAC;IACrF,IAAIJ,UAAU,IAAIA,UAAU,CAACK,OAAO,EAAE;MAClC,OAAO;QACHD,IAAI,EAAE,YAAY;QAClBE,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE,IAAI;QACdF,OAAO,EAAEL,UAAU,CAACK;MACxB,CAAC;IACL;IACA,MAAMG,MAAM,GAAG,CAAC,GAAGV,aAAa,CAACG,IAAI,CAACC,KAAK,CAAC;IAC5C,OAAOM,MAAM;EACjB;EACAC,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAACC,MAAM,GAAG,KAAK,CAACD,qBAAqB,CAAC,CAAC;IAC3C,IAAIE,aAAa,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACH,MAAM,CAAC,CAACI,MAAM,CAACC,QAAQ,IAAIA,QAAQ,KAAK,eAAe,CAAC;IAC7F,OAAOJ,aAAa,CAACK,MAAM,CAAC,CAACN,MAAM,EAAEK,QAAQ,KAAMH,MAAM,CAACK,MAAM,CAACL,MAAM,CAACK,MAAM,CAAC,CAAC,CAAC,EAAEP,MAAM,CAAC,EAAE;MAAE,CAACK,QAAQ,GAAG,IAAI,CAACL,MAAM,CAACK,QAAQ;IAAE,CAAC,CAAE,EAAE,CAAC,CAAC,CAAC;EAC5I;AACJ;AACArB,6BAA6B,CAACwB,eAAe,GAAG,iCAAiC;AAEjF,SAASxB,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}