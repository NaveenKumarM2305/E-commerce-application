{"ast":null,"code":"import _asyncToGenerator from \"C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport Model from '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport Logger from '../../util/Logger.js';\nimport { FORMS_FOR_VERIFICATION, FORMS_WITHOUT_SIGNOUT, AUTHENTICATOR_KEY, FORMS, FORMS_WITH_STATIC_BACK_LINK } from '../ion/RemediationConstants.js';\nimport { createOVOptions } from '../ion/ui-schema/ion-object-handler.js';\nimport '../mixins/mixins.js';\nimport { executeHooksBefore, executeHooksAfter } from '../../util/Hooks.js';\nimport fn from '../../util/BrowserFeatures.js';\n\n/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst UNKNOWN_USER_I8N_KEY = \"idx.unknown.user\";\n/**\n * Keep track of stateMachine with this special model. Similar to `src/models/AppState.js`\n */\n\nconst local = {\n  user: 'object',\n  // optional\n  currentFormName: 'string',\n  idx: 'object',\n  remediations: 'array',\n  dynamicRefreshInterval: 'number',\n  deviceFingerprint: 'string',\n  hooks: 'object' // instance of models/Hooks\n};\nconst derived = {\n  authenticatorProfile: {\n    deps: ['currentAuthenticator', 'currentAuthenticatorEnrollment'],\n    fn: function (currentAuthenticator = {\n      profile: undefined\n    }, currentAuthenticatorEnrollment = {\n      profile: undefined\n    }) {\n      return currentAuthenticator.profile || currentAuthenticatorEnrollment.profile || {};\n    }\n  },\n  authenticatorKey: {\n    deps: ['currentAuthenticator', 'currentAuthenticatorEnrollment'],\n    fn: function (currentAuthenticator = {\n      key: undefined\n    }, currentAuthenticatorEnrollment = {\n      key: undefined\n    }) {\n      return currentAuthenticator.key || currentAuthenticatorEnrollment.key || '';\n    }\n  },\n  authenticatorMethodType: {\n    deps: ['currentAuthenticator', 'currentAuthenticatorEnrollment'],\n    fn: function (currentAuthenticator = {\n      methods: undefined\n    }, currentAuthenticatorEnrollment = {\n      methods: undefined\n    }) {\n      return currentAuthenticator.methods && currentAuthenticator.methods[0].type || currentAuthenticatorEnrollment.methods && currentAuthenticatorEnrollment.methods[0].type || '';\n    }\n  },\n  isPasswordRecovery: {\n    deps: ['recoveryAuthenticator'],\n    fn: function (recoveryAuthenticator = {\n      type: undefined\n    }) {\n      return (recoveryAuthenticator === null || recoveryAuthenticator === void 0 ? void 0 : recoveryAuthenticator.type) === 'password';\n    }\n  }\n};\nclass AppState extends Model {\n  constructor(attributes, options) {\n    super(attributes, options);\n    this.settings = void 0;\n    this.hooks = void 0;\n    this.settings = options.settings;\n    this.hooks = options.hooks;\n  }\n  get(attributeName) {\n    return Model.prototype.get.call(this, attributeName);\n  }\n  preinitialize(...args) {\n    this.local = local;\n    this.derived = derived;\n    Model.prototype.preinitialize.apply(this, args);\n  }\n  isIdentifierOnlyView() {\n    var _this$get, _this$get$find, _this$get$find$uiSche;\n    return !((_this$get = this.get('remediations')) !== null && _this$get !== void 0 && (_this$get$find = _this$get.find(({\n      name: name\n    }) => name === 'identify')) !== null && _this$get$find !== void 0 && (_this$get$find$uiSche = _this$get$find.uiSchema) !== null && _this$get$find$uiSche !== void 0 && _this$get$find$uiSche.find(({\n      name: name\n    }) => name === 'credentials.passcode'));\n  }\n  hasRemediationObject(formName) {\n    return this.get('idx').neededToProceed.find(remediation => remediation.name === formName);\n  }\n  hasActionObject(actionName) {\n    var _this$get2, _this$get2$actions;\n    return !!((_this$get2 = this.get('idx')) !== null && _this$get2 !== void 0 && (_this$get2$actions = _this$get2.actions) !== null && _this$get2$actions !== void 0 && _this$get2$actions[actionName]);\n  }\n  getRemediationAuthenticationOptions(formName) {\n    const form = this.hasRemediationObject(formName);\n    if (!form) {\n      return [];\n    }\n    const authenticator = form.value.find(value => value.name === 'authenticator');\n    let authenticatorOptions = (authenticator === null || authenticator === void 0 ? void 0 : authenticator.options) || [];\n    // OV is a special case, so process OV options\n    authenticatorOptions = [...authenticatorOptions]; //clone it since we are changing it for OV\n    createOVOptions(authenticatorOptions);\n    return authenticatorOptions;\n  }\n  getActionByPath(actionPath) {\n    const paths = actionPath.split('.');\n    let targetObject;\n    if (paths.length === 1) {\n      targetObject = this.get('idx').actions;\n    } else {\n      targetObject = this.get(paths.shift());\n    }\n    // Limitation\n    // At the time of writting, action only lives in first level of state objects.\n    const actionName = paths.shift();\n    if (targetObject && oktaUnderscore.isFunction(targetObject[actionName])) {\n      return targetObject[actionName];\n    } else {\n      return null;\n    }\n  }\n  getCurrentViewState() {\n    const currentFormName = this.get('currentFormName');\n    if (!currentFormName) {\n      return;\n    }\n\n    // didn't expect `remediations` is empty. See `setIonResponse`.\n    const currentViewState = this.get('remediations').filter(r => r.name === currentFormName)[0];\n    if (!currentViewState) {\n      Logger.error('Panic!!');\n      Logger.error(`\\tCannot find view state for form ${currentFormName}.`);\n      const allFormNames = this.get('remediations').map(r => r.name);\n      Logger.error(`\\tAll available form names: ${allFormNames}`);\n    }\n    return currentViewState;\n  }\n\n  /**\n   * Returns ui schema of the form field from current view state\n   * @param {string} fieldName\n   * @returns {}\n   */\n  getSchemaByName(fieldName) {\n    const currentViewState = this.getCurrentViewState();\n    if (currentViewState) {\n      const uiSchema = currentViewState.uiSchema;\n      return uiSchema.find(({\n        name: name\n      }) => name === fieldName);\n    }\n  }\n\n  /**\n   * Returns the displayName of the authenticator\n   * @returns {string}\n   */\n  getAuthenticatorDisplayName() {\n    const currentAuthenticator = this.get('currentAuthenticator') || {};\n    const currentAuthenticatorEnrollment = this.get('currentAuthenticatorEnrollment') || {};\n\n    // For enrollment and certain verification flows, the currentAuthenticator object will be present.\n    // If not, we're likely in a traditional verify/challenge flow.\n    return currentAuthenticator.displayName || currentAuthenticatorEnrollment.displayName;\n  }\n\n  /**\n   * Checks to see if we're in an authenticator challenge flow.\n   * @returns {boolean}\n   */\n  isAuthenticatorChallenge() {\n    const currentFormName = this.get('currentFormName');\n    return FORMS_FOR_VERIFICATION.includes(currentFormName);\n  }\n  shouldReRenderView(transformedResponse) {\n    var _transformedResponse$;\n    if (transformedResponse !== null && transformedResponse !== void 0 && (_transformedResponse$ = transformedResponse.idx) !== null && _transformedResponse$ !== void 0 && _transformedResponse$.hasFormError) {\n      return false;\n    }\n    const previousRawState = this.has('idx') ? this.get('idx').rawIdxState : null;\n    const identicalResponse = oktaUnderscore.isEqual(oktaUnderscore.nestedOmit(transformedResponse.idx.rawIdxState, ['expiresAt', 'refresh', 'stateHandle', 'headers']), oktaUnderscore.nestedOmit(previousRawState, ['expiresAt', 'refresh', 'stateHandle', 'headers']));\n    if (identicalResponse) {\n      this.set('dynamicRefreshInterval', this.getRefreshInterval(transformedResponse));\n    }\n    return this._isReRenderRequired(identicalResponse, transformedResponse, previousRawState);\n  }\n  getRefreshInterval(transformedResponse) {\n    var _transformedResponse$2, _transformedResponse$3, _transformedResponse$4, _transformedResponse$5;\n    // Only polling refresh interval has changed in the response,\n    // make sure to update the correct poll view's refresh value\n    const currentFormName = this.get('currentFormName');\n    const currentViewState = transformedResponse.remediations.filter(r => r.name === currentFormName)[0];\n    // Get new refresh interval for either: remediations, authenticator, or authenticator enrollment\n    return currentViewState.refresh || ((_transformedResponse$2 = transformedResponse.currentAuthenticatorEnrollment) === null || _transformedResponse$2 === void 0 ? void 0 : (_transformedResponse$3 = _transformedResponse$2.poll) === null || _transformedResponse$3 === void 0 ? void 0 : _transformedResponse$3.refresh) || ((_transformedResponse$4 = transformedResponse.currentAuthenticator) === null || _transformedResponse$4 === void 0 ? void 0 : (_transformedResponse$5 = _transformedResponse$4.poll) === null || _transformedResponse$5 === void 0 ? void 0 : _transformedResponse$5.refresh);\n  }\n\n  // Sign Out link will be displayed in the footer of a form, unless:\n  // - widget configuration set hideSignOutLinkInMFA or mfaOnlyFlow to true\n  // - cancel remediation form is not present in the response\n  // - form is part of our list FORMS_WITHOUT_SIGNOUT\n  shouldShowSignOutLinkInCurrentForm(hideSignOutLinkInMFA) {\n    const idxActions = this.get('idx') && this.get('idx').actions;\n    const currentFormName = this.get('currentFormName');\n    return !hideSignOutLinkInMFA && oktaUnderscore.isFunction(idxActions === null || idxActions === void 0 ? void 0 : idxActions.cancel) && !FORMS_WITHOUT_SIGNOUT.includes(currentFormName);\n  }\n  containsMessageWithI18nKey(keys) {\n    if (!Array.isArray(keys)) {\n      keys = [keys];\n    }\n    const messagesObjs = this.get('messages');\n    return messagesObjs && Array.isArray(messagesObjs.value) && messagesObjs.value.some(messagesObj => {\n      var _messagesObj$i18n;\n      return oktaUnderscore.contains(keys, (_messagesObj$i18n = messagesObj.i18n) === null || _messagesObj$i18n === void 0 ? void 0 : _messagesObj$i18n.key);\n    });\n  }\n  containsMessageStartingWithI18nKey(keySubStr) {\n    const messagesObjs = this.get('messages');\n    return messagesObjs && Array.isArray(messagesObjs.value) && messagesObjs.value.some(messagesObj => {\n      var _messagesObj$i18n2;\n      return (_messagesObj$i18n2 = messagesObj.i18n) === null || _messagesObj$i18n2 === void 0 ? void 0 : _messagesObj$i18n2.key.startsWith(keySubStr);\n    });\n  }\n  clearAppStateCache() {\n    // clear appState before setting new values\n    const attrs = {};\n    for (const key in this.attributes) {\n      if (key !== 'currentFormName') {\n        attrs[key] = void 0;\n      }\n    }\n    this.set(attrs, Object.assign({}, {\n      unset: true,\n      silent: true\n    }));\n    // clear cache for derived props.\n    this.trigger('cache:clear');\n  }\n  chooseRemediation(transformedResponse) {\n    var _transformedResponse$6, _transformedResponse$7;\n    if (oktaUnderscore.isEmpty(transformedResponse.remediations)) {\n      return;\n    }\n    const firstRemediation = transformedResponse.remediations[0];\n\n    // Special case: Okta Verify: show select enrollment channel instead of QR code on mobile\n    if (firstRemediation.name === 'enroll-poll' && this.get('authenticatorKey') === AUTHENTICATOR_KEY.OV && (fn.isAndroid() || fn.isIOS()) && ((_transformedResponse$6 = transformedResponse.currentAuthenticator) === null || _transformedResponse$6 === void 0 ? void 0 : (_transformedResponse$7 = _transformedResponse$6.contextualData) === null || _transformedResponse$7 === void 0 ? void 0 : _transformedResponse$7.selectedChannel) === 'qrcode') {\n      return transformedResponse.remediations.find(r => r.name === 'select-enrollment-channel');\n    }\n\n    // Default case: return the first remediation in the list\n    return firstRemediation;\n  }\n  setIonResponse(transformedResponse) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const doRerender = _this.shouldReRenderView(transformedResponse);\n      _this.clearAppStateCache();\n      // set new app state properties\n      _this.set(transformedResponse);\n      if (doRerender) {\n        var _this$hooks;\n        const remediation = _this.chooseRemediation(transformedResponse);\n        let currentFormName = null;\n        if (remediation) {\n          currentFormName = remediation.name;\n        } else {\n          Logger.error('Panic!!');\n          Logger.error('\\tNo remediation found.');\n          Logger.error('\\tHere is the entire response');\n          Logger.error(JSON.stringify(transformedResponse, null, 2));\n        }\n        const hook = (_this$hooks = _this.hooks) === null || _this$hooks === void 0 ? void 0 : _this$hooks.getHook(currentFormName); // may be undefined\n        yield executeHooksBefore(hook);\n        _this.unset('currentFormName', {\n          silent: true\n        });\n        // make sure change `currentFormName` is last step.\n        // change `currentFormName` will re-render FormController,\n        // which may depend on other derived properties hence\n        // those derived properties must be re-computed before\n        // re-rendering controller.\n        _this.set({\n          currentFormName: currentFormName\n        });\n        yield executeHooksAfter(hook);\n      }\n    })();\n  }\n  setNonIdxError(error) {\n    this.set('remediations', [{\n      name: FORMS.TERMINAL\n    }]);\n    this.set('messages', {\n      value: [{\n        message: error.errorDetails.errorSummary,\n        class: 'ERROR'\n      }]\n    });\n    this.set('currentFormName', FORMS.TERMINAL);\n  }\n  getUser() {\n    return this.get('user');\n  }\n  _isReRenderRequired(identicalResponse, transformedResponse, previousRawState) {\n    var _this$get3;\n    let reRender = true;\n    const isPreviousStateError = (_this$get3 = this.get('idx')) === null || _this$get3 === void 0 ? void 0 : _this$get3.hasFormError;\n    if (isPreviousStateError && this._isChallengeAuthenticatorPoll(transformedResponse, previousRawState)) {\n      reRender = false;\n    }\n    if (identicalResponse) {\n      /**\n       * returns false: When new response is same as last.\n       * usually happens during polling when pipeline doesn't proceed to next step.\n       * expiresAt will be different for each response, hence compare objects without that property\n       */\n      reRender = false;\n      if (this.get('currentFormName') === 'poll') {\n        /**\n         * returns true: We want to force reRender when currentForm is poll because request has to reinitiate\n         * based on new refresh and UI has to reflect new timer.\n         * We dont technical poll here we just make a request after the specified refresh time each time\n         * we get a new response.\n         */\n        reRender = true;\n      } else if (FORMS_WITH_STATIC_BACK_LINK.includes(this.get('currentFormName'))) {\n        /**\n         * returns true: We want to force reRender if you go back to selection screen from challenge or enroll screen\n         * and re-select the same authenticator for challenge. In this case also new response will be identical\n         * to the old response.\n         */\n        reRender = true;\n      } else if (this.containsMessageWithI18nKey(UNKNOWN_USER_I8N_KEY)) {\n        /**\n         * Need to re-render or else form will be stuck in saving mode.\n         * This message is a form warning that can result in identical responses if the user enters the same\n         * username as the one in the last message warning.\n         */\n        reRender = true;\n      }\n    }\n    return reRender;\n  }\n\n  /**\n   * This is to account for the edge case introduced by this issue: OKTA-419210. With the current idx remediations,\n   * there's no good way to generalize this as the backend handles the authenticators for phone, sms and \n   * email differently. Although not ideal, we have to keep this check in for now until we find a better solution.\n   */\n  _isChallengeAuthenticatorPoll(transformedResponse, previousRawState) {\n    var _this$get4;\n    const isSameExceptMessages = oktaUnderscore.isEqual(oktaUnderscore.nestedOmit(transformedResponse.idx.rawIdxState, ['expiresAt', 'refresh', 'stateHandle', 'headers']), oktaUnderscore.nestedOmit(previousRawState, ['expiresAt', 'refresh', 'stateHandle', 'messages', 'headers']));\n    const isChallengeAuthenticator = this.get('currentFormName') === 'challenge-authenticator';\n    const isCurrentAuthenticatorEmail = ((_this$get4 = this.get('currentAuthenticatorEnrollment')) === null || _this$get4 === void 0 ? void 0 : _this$get4.key) === AUTHENTICATOR_KEY.EMAIL;\n    return isSameExceptMessages && isChallengeAuthenticator && isCurrentAuthenticatorEmail;\n  }\n}\nexport { AppState as default };","map":{"version":3,"names":["oktaUnderscore","Model","Logger","FORMS_FOR_VERIFICATION","FORMS_WITHOUT_SIGNOUT","AUTHENTICATOR_KEY","FORMS","FORMS_WITH_STATIC_BACK_LINK","createOVOptions","executeHooksBefore","executeHooksAfter","fn","UNKNOWN_USER_I8N_KEY","local","user","currentFormName","idx","remediations","dynamicRefreshInterval","deviceFingerprint","hooks","derived","authenticatorProfile","deps","currentAuthenticator","profile","undefined","currentAuthenticatorEnrollment","authenticatorKey","key","authenticatorMethodType","methods","type","isPasswordRecovery","recoveryAuthenticator","AppState","constructor","attributes","options","settings","get","attributeName","prototype","call","preinitialize","args","apply","isIdentifierOnlyView","_this$get","_this$get$find","_this$get$find$uiSche","find","name","uiSchema","hasRemediationObject","formName","neededToProceed","remediation","hasActionObject","actionName","_this$get2","_this$get2$actions","actions","getRemediationAuthenticationOptions","form","authenticator","value","authenticatorOptions","getActionByPath","actionPath","paths","split","targetObject","length","shift","isFunction","getCurrentViewState","currentViewState","filter","r","error","allFormNames","map","getSchemaByName","fieldName","getAuthenticatorDisplayName","displayName","isAuthenticatorChallenge","includes","shouldReRenderView","transformedResponse","_transformedResponse$","hasFormError","previousRawState","has","rawIdxState","identicalResponse","isEqual","nestedOmit","set","getRefreshInterval","_isReRenderRequired","_transformedResponse$2","_transformedResponse$3","_transformedResponse$4","_transformedResponse$5","refresh","poll","shouldShowSignOutLinkInCurrentForm","hideSignOutLinkInMFA","idxActions","cancel","containsMessageWithI18nKey","keys","Array","isArray","messagesObjs","some","messagesObj","_messagesObj$i18n","contains","i18n","containsMessageStartingWithI18nKey","keySubStr","_messagesObj$i18n2","startsWith","clearAppStateCache","attrs","Object","assign","unset","silent","trigger","chooseRemediation","_transformedResponse$6","_transformedResponse$7","isEmpty","firstRemediation","OV","isAndroid","isIOS","contextualData","selectedChannel","setIonResponse","_this","_asyncToGenerator","doRerender","_this$hooks","JSON","stringify","hook","getHook","setNonIdxError","TERMINAL","message","errorDetails","errorSummary","class","getUser","_this$get3","reRender","isPreviousStateError","_isChallengeAuthenticatorPoll","_this$get4","isSameExceptMessages","isChallengeAuthenticator","isCurrentAuthenticatorEmail","EMAIL","default"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v2/models/AppState.js"],"sourcesContent":["import '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport Model from '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport Logger from '../../util/Logger.js';\nimport { FORMS_FOR_VERIFICATION, FORMS_WITHOUT_SIGNOUT, AUTHENTICATOR_KEY, FORMS, FORMS_WITH_STATIC_BACK_LINK } from '../ion/RemediationConstants.js';\nimport { createOVOptions } from '../ion/ui-schema/ion-object-handler.js';\nimport '../mixins/mixins.js';\nimport { executeHooksBefore, executeHooksAfter } from '../../util/Hooks.js';\nimport fn from '../../util/BrowserFeatures.js';\n\n/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst UNKNOWN_USER_I8N_KEY = \"idx.unknown.user\";\n/**\n * Keep track of stateMachine with this special model. Similar to `src/models/AppState.js`\n */\n\nconst local = {\n  user: 'object',\n  // optional\n  currentFormName: 'string',\n  idx: 'object',\n  remediations: 'array',\n  dynamicRefreshInterval: 'number',\n  deviceFingerprint: 'string',\n  hooks: 'object' // instance of models/Hooks\n};\n\nconst derived = {\n  authenticatorProfile: {\n    deps: ['currentAuthenticator', 'currentAuthenticatorEnrollment'],\n    fn: function (currentAuthenticator = {\n      profile: undefined\n    }, currentAuthenticatorEnrollment = {\n      profile: undefined\n    }) {\n      return currentAuthenticator.profile || currentAuthenticatorEnrollment.profile || {};\n    }\n  },\n  authenticatorKey: {\n    deps: ['currentAuthenticator', 'currentAuthenticatorEnrollment'],\n    fn: function (currentAuthenticator = {\n      key: undefined\n    }, currentAuthenticatorEnrollment = {\n      key: undefined\n    }) {\n      return currentAuthenticator.key || currentAuthenticatorEnrollment.key || '';\n    }\n  },\n  authenticatorMethodType: {\n    deps: ['currentAuthenticator', 'currentAuthenticatorEnrollment'],\n    fn: function (currentAuthenticator = {\n      methods: undefined\n    }, currentAuthenticatorEnrollment = {\n      methods: undefined\n    }) {\n      return currentAuthenticator.methods && currentAuthenticator.methods[0].type || currentAuthenticatorEnrollment.methods && currentAuthenticatorEnrollment.methods[0].type || '';\n    }\n  },\n  isPasswordRecovery: {\n    deps: ['recoveryAuthenticator'],\n    fn: function (recoveryAuthenticator = {\n      type: undefined\n    }) {\n      return (recoveryAuthenticator === null || recoveryAuthenticator === void 0 ? void 0 : recoveryAuthenticator.type) === 'password';\n    }\n  }\n};\nclass AppState extends Model {\n  constructor(attributes, options) {\n    super(attributes, options);\n    this.settings = void 0;\n    this.hooks = void 0;\n    this.settings = options.settings;\n    this.hooks = options.hooks;\n  }\n  get(attributeName) {\n    return Model.prototype.get.call(this, attributeName);\n  }\n  preinitialize(...args) {\n    this.local = local;\n    this.derived = derived;\n    Model.prototype.preinitialize.apply(this, args);\n  }\n  isIdentifierOnlyView() {\n    var _this$get, _this$get$find, _this$get$find$uiSche;\n    return !((_this$get = this.get('remediations')) !== null && _this$get !== void 0 && (_this$get$find = _this$get.find(({\n      name: name\n    }) => name === 'identify')) !== null && _this$get$find !== void 0 && (_this$get$find$uiSche = _this$get$find.uiSchema) !== null && _this$get$find$uiSche !== void 0 && _this$get$find$uiSche.find(({\n      name: name\n    }) => name === 'credentials.passcode'));\n  }\n  hasRemediationObject(formName) {\n    return this.get('idx').neededToProceed.find(remediation => remediation.name === formName);\n  }\n  hasActionObject(actionName) {\n    var _this$get2, _this$get2$actions;\n    return !!((_this$get2 = this.get('idx')) !== null && _this$get2 !== void 0 && (_this$get2$actions = _this$get2.actions) !== null && _this$get2$actions !== void 0 && _this$get2$actions[actionName]);\n  }\n  getRemediationAuthenticationOptions(formName) {\n    const form = this.hasRemediationObject(formName);\n    if (!form) {\n      return [];\n    }\n    const authenticator = form.value.find(value => value.name === 'authenticator');\n    let authenticatorOptions = (authenticator === null || authenticator === void 0 ? void 0 : authenticator.options) || [];\n    // OV is a special case, so process OV options\n    authenticatorOptions = [...authenticatorOptions]; //clone it since we are changing it for OV\n    createOVOptions(authenticatorOptions);\n    return authenticatorOptions;\n  }\n  getActionByPath(actionPath) {\n    const paths = actionPath.split('.');\n    let targetObject;\n    if (paths.length === 1) {\n      targetObject = this.get('idx').actions;\n    } else {\n      targetObject = this.get(paths.shift());\n    }\n    // Limitation\n    // At the time of writting, action only lives in first level of state objects.\n    const actionName = paths.shift();\n    if (targetObject && oktaUnderscore.isFunction(targetObject[actionName])) {\n      return targetObject[actionName];\n    } else {\n      return null;\n    }\n  }\n  getCurrentViewState() {\n    const currentFormName = this.get('currentFormName');\n    if (!currentFormName) {\n      return;\n    }\n\n    // didn't expect `remediations` is empty. See `setIonResponse`.\n    const currentViewState = this.get('remediations').filter(r => r.name === currentFormName)[0];\n    if (!currentViewState) {\n      Logger.error('Panic!!');\n      Logger.error(`\\tCannot find view state for form ${currentFormName}.`);\n      const allFormNames = this.get('remediations').map(r => r.name);\n      Logger.error(`\\tAll available form names: ${allFormNames}`);\n    }\n    return currentViewState;\n  }\n\n  /**\n   * Returns ui schema of the form field from current view state\n   * @param {string} fieldName\n   * @returns {}\n   */\n  getSchemaByName(fieldName) {\n    const currentViewState = this.getCurrentViewState();\n    if (currentViewState) {\n      const uiSchema = currentViewState.uiSchema;\n      return uiSchema.find(({\n        name: name\n      }) => name === fieldName);\n    }\n  }\n\n  /**\n   * Returns the displayName of the authenticator\n   * @returns {string}\n   */\n  getAuthenticatorDisplayName() {\n    const currentAuthenticator = this.get('currentAuthenticator') || {};\n    const currentAuthenticatorEnrollment = this.get('currentAuthenticatorEnrollment') || {};\n\n    // For enrollment and certain verification flows, the currentAuthenticator object will be present.\n    // If not, we're likely in a traditional verify/challenge flow.\n    return currentAuthenticator.displayName || currentAuthenticatorEnrollment.displayName;\n  }\n\n  /**\n   * Checks to see if we're in an authenticator challenge flow.\n   * @returns {boolean}\n   */\n  isAuthenticatorChallenge() {\n    const currentFormName = this.get('currentFormName');\n    return FORMS_FOR_VERIFICATION.includes(currentFormName);\n  }\n  shouldReRenderView(transformedResponse) {\n    var _transformedResponse$;\n    if (transformedResponse !== null && transformedResponse !== void 0 && (_transformedResponse$ = transformedResponse.idx) !== null && _transformedResponse$ !== void 0 && _transformedResponse$.hasFormError) {\n      return false;\n    }\n    const previousRawState = this.has('idx') ? this.get('idx').rawIdxState : null;\n    const identicalResponse = oktaUnderscore.isEqual(oktaUnderscore.nestedOmit(transformedResponse.idx.rawIdxState, ['expiresAt', 'refresh', 'stateHandle', 'headers']), oktaUnderscore.nestedOmit(previousRawState, ['expiresAt', 'refresh', 'stateHandle', 'headers']));\n    if (identicalResponse) {\n      this.set('dynamicRefreshInterval', this.getRefreshInterval(transformedResponse));\n    }\n    return this._isReRenderRequired(identicalResponse, transformedResponse, previousRawState);\n  }\n  getRefreshInterval(transformedResponse) {\n    var _transformedResponse$2, _transformedResponse$3, _transformedResponse$4, _transformedResponse$5;\n    // Only polling refresh interval has changed in the response,\n    // make sure to update the correct poll view's refresh value\n    const currentFormName = this.get('currentFormName');\n    const currentViewState = transformedResponse.remediations.filter(r => r.name === currentFormName)[0];\n    // Get new refresh interval for either: remediations, authenticator, or authenticator enrollment\n    return currentViewState.refresh || ((_transformedResponse$2 = transformedResponse.currentAuthenticatorEnrollment) === null || _transformedResponse$2 === void 0 ? void 0 : (_transformedResponse$3 = _transformedResponse$2.poll) === null || _transformedResponse$3 === void 0 ? void 0 : _transformedResponse$3.refresh) || ((_transformedResponse$4 = transformedResponse.currentAuthenticator) === null || _transformedResponse$4 === void 0 ? void 0 : (_transformedResponse$5 = _transformedResponse$4.poll) === null || _transformedResponse$5 === void 0 ? void 0 : _transformedResponse$5.refresh);\n  }\n\n  // Sign Out link will be displayed in the footer of a form, unless:\n  // - widget configuration set hideSignOutLinkInMFA or mfaOnlyFlow to true\n  // - cancel remediation form is not present in the response\n  // - form is part of our list FORMS_WITHOUT_SIGNOUT\n  shouldShowSignOutLinkInCurrentForm(hideSignOutLinkInMFA) {\n    const idxActions = this.get('idx') && this.get('idx').actions;\n    const currentFormName = this.get('currentFormName');\n    return !hideSignOutLinkInMFA && oktaUnderscore.isFunction(idxActions === null || idxActions === void 0 ? void 0 : idxActions.cancel) && !FORMS_WITHOUT_SIGNOUT.includes(currentFormName);\n  }\n  containsMessageWithI18nKey(keys) {\n    if (!Array.isArray(keys)) {\n      keys = [keys];\n    }\n    const messagesObjs = this.get('messages');\n    return messagesObjs && Array.isArray(messagesObjs.value) && messagesObjs.value.some(messagesObj => {\n      var _messagesObj$i18n;\n      return oktaUnderscore.contains(keys, (_messagesObj$i18n = messagesObj.i18n) === null || _messagesObj$i18n === void 0 ? void 0 : _messagesObj$i18n.key);\n    });\n  }\n  containsMessageStartingWithI18nKey(keySubStr) {\n    const messagesObjs = this.get('messages');\n    return messagesObjs && Array.isArray(messagesObjs.value) && messagesObjs.value.some(messagesObj => {\n      var _messagesObj$i18n2;\n      return (_messagesObj$i18n2 = messagesObj.i18n) === null || _messagesObj$i18n2 === void 0 ? void 0 : _messagesObj$i18n2.key.startsWith(keySubStr);\n    });\n  }\n  clearAppStateCache() {\n    // clear appState before setting new values\n    const attrs = {};\n    for (const key in this.attributes) {\n      if (key !== 'currentFormName') {\n        attrs[key] = void 0;\n      }\n    }\n    this.set(attrs, Object.assign({}, {\n      unset: true,\n      silent: true\n    }));\n    // clear cache for derived props.\n    this.trigger('cache:clear');\n  }\n  chooseRemediation(transformedResponse) {\n    var _transformedResponse$6, _transformedResponse$7;\n    if (oktaUnderscore.isEmpty(transformedResponse.remediations)) {\n      return;\n    }\n    const firstRemediation = transformedResponse.remediations[0];\n\n    // Special case: Okta Verify: show select enrollment channel instead of QR code on mobile\n    if (firstRemediation.name === 'enroll-poll' && this.get('authenticatorKey') === AUTHENTICATOR_KEY.OV && (fn.isAndroid() || fn.isIOS()) && ((_transformedResponse$6 = transformedResponse.currentAuthenticator) === null || _transformedResponse$6 === void 0 ? void 0 : (_transformedResponse$7 = _transformedResponse$6.contextualData) === null || _transformedResponse$7 === void 0 ? void 0 : _transformedResponse$7.selectedChannel) === 'qrcode') {\n      return transformedResponse.remediations.find(r => r.name === 'select-enrollment-channel');\n    }\n\n    // Default case: return the first remediation in the list\n    return firstRemediation;\n  }\n  async setIonResponse(transformedResponse) {\n    const doRerender = this.shouldReRenderView(transformedResponse);\n    this.clearAppStateCache();\n    // set new app state properties\n    this.set(transformedResponse);\n    if (doRerender) {\n      var _this$hooks;\n      const remediation = this.chooseRemediation(transformedResponse);\n      let currentFormName = null;\n      if (remediation) {\n        currentFormName = remediation.name;\n      } else {\n        Logger.error('Panic!!');\n        Logger.error('\\tNo remediation found.');\n        Logger.error('\\tHere is the entire response');\n        Logger.error(JSON.stringify(transformedResponse, null, 2));\n      }\n      const hook = (_this$hooks = this.hooks) === null || _this$hooks === void 0 ? void 0 : _this$hooks.getHook(currentFormName); // may be undefined\n      await executeHooksBefore(hook);\n      this.unset('currentFormName', {\n        silent: true\n      });\n      // make sure change `currentFormName` is last step.\n      // change `currentFormName` will re-render FormController,\n      // which may depend on other derived properties hence\n      // those derived properties must be re-computed before\n      // re-rendering controller.\n      this.set({\n        currentFormName: currentFormName\n      });\n      await executeHooksAfter(hook);\n    }\n  }\n  setNonIdxError(error) {\n    this.set('remediations', [{\n      name: FORMS.TERMINAL\n    }]);\n    this.set('messages', {\n      value: [{\n        message: error.errorDetails.errorSummary,\n        class: 'ERROR'\n      }]\n    });\n    this.set('currentFormName', FORMS.TERMINAL);\n  }\n  getUser() {\n    return this.get('user');\n  }\n  _isReRenderRequired(identicalResponse, transformedResponse, previousRawState) {\n    var _this$get3;\n    let reRender = true;\n    const isPreviousStateError = (_this$get3 = this.get('idx')) === null || _this$get3 === void 0 ? void 0 : _this$get3.hasFormError;\n    if (isPreviousStateError && this._isChallengeAuthenticatorPoll(transformedResponse, previousRawState)) {\n      reRender = false;\n    }\n    if (identicalResponse) {\n      /**\n       * returns false: When new response is same as last.\n       * usually happens during polling when pipeline doesn't proceed to next step.\n       * expiresAt will be different for each response, hence compare objects without that property\n       */\n      reRender = false;\n      if (this.get('currentFormName') === 'poll') {\n        /**\n         * returns true: We want to force reRender when currentForm is poll because request has to reinitiate\n         * based on new refresh and UI has to reflect new timer.\n         * We dont technical poll here we just make a request after the specified refresh time each time\n         * we get a new response.\n         */\n        reRender = true;\n      } else if (FORMS_WITH_STATIC_BACK_LINK.includes(this.get('currentFormName'))) {\n        /**\n         * returns true: We want to force reRender if you go back to selection screen from challenge or enroll screen\n         * and re-select the same authenticator for challenge. In this case also new response will be identical\n         * to the old response.\n         */\n        reRender = true;\n      } else if (this.containsMessageWithI18nKey(UNKNOWN_USER_I8N_KEY)) {\n        /**\n         * Need to re-render or else form will be stuck in saving mode.\n         * This message is a form warning that can result in identical responses if the user enters the same\n         * username as the one in the last message warning.\n         */\n        reRender = true;\n      }\n    }\n    return reRender;\n  }\n\n  /**\n   * This is to account for the edge case introduced by this issue: OKTA-419210. With the current idx remediations,\n   * there's no good way to generalize this as the backend handles the authenticators for phone, sms and \n   * email differently. Although not ideal, we have to keep this check in for now until we find a better solution.\n   */\n  _isChallengeAuthenticatorPoll(transformedResponse, previousRawState) {\n    var _this$get4;\n    const isSameExceptMessages = oktaUnderscore.isEqual(oktaUnderscore.nestedOmit(transformedResponse.idx.rawIdxState, ['expiresAt', 'refresh', 'stateHandle', 'headers']), oktaUnderscore.nestedOmit(previousRawState, ['expiresAt', 'refresh', 'stateHandle', 'messages', 'headers']));\n    const isChallengeAuthenticator = this.get('currentFormName') === 'challenge-authenticator';\n    const isCurrentAuthenticatorEmail = ((_this$get4 = this.get('currentAuthenticatorEnrollment')) === null || _this$get4 === void 0 ? void 0 : _this$get4.key) === AUTHENTICATOR_KEY.EMAIL;\n    return isSameExceptMessages && isChallengeAuthenticator && isCurrentAuthenticatorEmail;\n  }\n}\n\nexport { AppState as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}