{"ast":null,"code":"import { internal } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport oktaJQueryStatic from '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport TextBox from '../views/shared/TextBox.js';\n\n/* eslint max-statements: [2, 23],  max-depth: [2, 3], complexity: [2, 13] */\nlet {\n  SchemaFormFactory: SchemaFormFactory\n} = internal.views.forms.helpers;\nlet {\n  CheckBox: CheckBox\n} = internal.views.forms.inputs;\nconst getParts = function (username) {\n  const usernameArr = username.split('');\n  const minPartsLength = 4;\n  const userNameParts = [];\n  const delimiters = [',', '.', '-', '_', '#', '@'];\n  let userNamePart = '';\n  oktaUnderscore.each(usernameArr, function (part) {\n    if (delimiters.indexOf(part) === -1) {\n      userNamePart += part;\n    } else {\n      if (userNamePart.length >= minPartsLength) {\n        userNameParts.push(oktaUnderscore.clone(userNamePart));\n      }\n      userNamePart = '';\n    }\n  });\n  if (userNamePart.length >= minPartsLength) {\n    userNameParts.push(oktaUnderscore.clone(userNamePart));\n  }\n  return userNameParts.filter(Boolean);\n};\nconst passwordContainsFormField = function (formField, password) {\n  if (!formField) {\n    return false;\n  }\n  formField = formField.toLowerCase();\n  password = password.toLowerCase();\n  const formFieldArr = getParts(formField);\n\n  //check if each formField part contains password\n  for (var i = 0; i < formFieldArr.length; i++) {\n    const formFieldPart = formFieldArr[i];\n    if (password.indexOf(formFieldPart) !== -1) {\n      return true;\n    }\n  }\n  return false;\n};\nconst checkSubSchema = function (subSchema, value, model) {\n  const minLength = subSchema.get('minLength');\n  const maxLength = subSchema.get('maxLength');\n  const regex = subSchema.get('format');\n  if (oktaUnderscore.isNumber(minLength)) {\n    if (value.length < minLength) {\n      return false;\n    }\n  }\n  if (oktaUnderscore.isNumber(maxLength)) {\n    if (value.length > maxLength) {\n      return false;\n    }\n  }\n  const password = value;\n  if (oktaUnderscore.isString(regex)) {\n    // call passwordContainsFormField if regex is userName, firstName, lastName\n    if (regex === '^[#/userName]' || regex === '^[#/firstName]' || regex === '^[#/lastName]') {\n      const fieldName = regex.split('^[#/')[1].split(']')[0];\n      let fieldValue = model.get(fieldName);\n      if (fieldName === 'userName') {\n        // with email as login enabled, we only have email populated\n        // Therefore we fallback and run validation with email attribute.\n        fieldValue = model.has('userName') ? model.get('userName') : model.get('email');\n      }\n      return !passwordContainsFormField(fieldValue, password);\n    } else {\n      if (!new RegExp(regex).test(value)) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\nconst checkSubSchemas = function (fieldName, model, subSchemas, showError) {\n  const value = model.get(fieldName);\n  if (!oktaUnderscore.isString(value)) {\n    return;\n  }\n  subSchemas.each(function (subSchema, index) {\n    const ele = oktaJQueryStatic('#subschemas-' + fieldName + ' .subschema-' + index);\n\n    //hide password complexity if no password\n    if (value) {\n      ele.children('p').removeClass('default-schema');\n    } else {\n      ele.children('p').addClass('default-schema');\n    }\n\n    // clear aria role and live-region for re-validation\n    ele.children('p').removeAttr('role').removeAttr('aria-live');\n\n    // reset errors\n    ele.removeClass('subschema-satisfied subschema-unsatisfied subschema-error');\n\n    // validate\n    if (checkSubSchema(subSchema, value, model)) {\n      // passed\n      ele.addClass('subschema-satisfied');\n      ele.find('p span').removeClass('error error-16-small');\n      ele.find('p span').addClass('confirm-16');\n    } else {\n      // failed\n      if (showError) {\n        ele.find('p span').removeClass('confirm-16');\n        ele.find('p span').addClass('error error-16-small');\n        ele.addClass('subschema-error subschema-unsatisfied');\n        ele.find('p')\n        // set role=\"alert\" so the password requirement is read by\n        // screen-readers\n        .attr('role', 'alert')\n        // set aria-live=\"polite\" so it will \"debounce\" and wait to read the\n        // message between keystrokes\n        .attr('aria-live', 'polite');\n      }\n    }\n  });\n};\nconst fnCreateInputOptions = function (schemaProperty) {\n  var _schemaProperty$optio;\n  let inputOptions = SchemaFormFactory.createInputOptions(schemaProperty);\n  if (((_schemaProperty$optio = schemaProperty.options) === null || _schemaProperty$optio === void 0 ? void 0 : _schemaProperty$optio.type) === 'boolean') {\n    // change BooleanSelect to CheckBox\n    inputOptions.input = CheckBox;\n  }\n  if (inputOptions.type === 'select') {\n    inputOptions = oktaUnderscore.extend(inputOptions, {\n      label: schemaProperty.get('title')\n    });\n  } else {\n    let placeholder = schemaProperty.get('title');\n    if (schemaProperty.get('required')) {\n      placeholder += ' *';\n    }\n    inputOptions = oktaUnderscore.extend(inputOptions, {\n      label: false,\n      'label-top': true,\n      placeholder: placeholder\n    });\n  }\n  const fieldName = schemaProperty.get('name');\n  switch (fieldName) {\n    case 'userName':\n      inputOptions.input = TextBox;\n      inputOptions.params = {\n        icon: 'person-16-gray'\n      };\n      break;\n    case 'password':\n      inputOptions.type = 'password';\n      inputOptions.input = TextBox;\n      inputOptions.params = {\n        icon: 'remote-lock-16'\n      };\n  }\n  const subSchemas = schemaProperty.get('subSchemas');\n  if (subSchemas) {\n    inputOptions.events = {\n      input: function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      },\n      focusout: function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      },\n      'change:userName': function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      },\n      'change:firstName': function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      },\n      'change:lastName': function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      },\n      'change:email': function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      }\n    };\n  }\n  return inputOptions;\n};\nvar RegistrationFormFactory = {\n  createInputOptions: fnCreateInputOptions,\n  getUsernameParts: getParts,\n  passwordContainsFormField: passwordContainsFormField\n};\nexport { RegistrationFormFactory as default };","map":{"version":3,"names":["internal","oktaJQueryStatic","oktaUnderscore","TextBox","SchemaFormFactory","views","forms","helpers","CheckBox","inputs","getParts","username","usernameArr","split","minPartsLength","userNameParts","delimiters","userNamePart","each","part","indexOf","length","push","clone","filter","Boolean","passwordContainsFormField","formField","password","toLowerCase","formFieldArr","i","formFieldPart","checkSubSchema","subSchema","value","model","minLength","get","maxLength","regex","isNumber","isString","fieldName","fieldValue","has","RegExp","test","checkSubSchemas","subSchemas","showError","index","ele","children","removeClass","addClass","removeAttr","find","attr","fnCreateInputOptions","schemaProperty","_schemaProperty$optio","inputOptions","createInputOptions","options","type","input","extend","label","placeholder","params","icon","events","focusout","change:userName","change:firstName","change:lastName","change:email","RegistrationFormFactory","getUsernameParts","default"],"sources":["C:/SpringBOot/ecommerce-project/03-frontend/angular-ecommerce/node_modules/@okta/okta-signin-widget/dist/esm/src/v1/util/RegistrationFormFactory.js"],"sourcesContent":["import { internal } from '../../../packages/@okta/courage-dist/esm/src/CourageForSigninWidget.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/vendor/lib/backbone.js';\nimport oktaJQueryStatic from '../../../packages/@okta/courage-dist/esm/src/courage/util/jquery-wrapper.js';\nimport oktaUnderscore from '../../../packages/@okta/courage-dist/esm/src/courage/util/underscore-wrapper.js';\nimport '../../../packages/@okta/courage-dist/esm/lib/handlebars/dist/cjs/handlebars.runtime.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/Model.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/models/BaseModel.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/framework/View.js';\nimport '../../../packages/@okta/courage-dist/esm/src/courage/views/Backbone.ListView.js';\nimport TextBox from '../views/shared/TextBox.js';\n\n/* eslint max-statements: [2, 23],  max-depth: [2, 3], complexity: [2, 13] */\nlet {\n  SchemaFormFactory: SchemaFormFactory\n} = internal.views.forms.helpers;\nlet {\n  CheckBox: CheckBox\n} = internal.views.forms.inputs;\nconst getParts = function (username) {\n  const usernameArr = username.split('');\n  const minPartsLength = 4;\n  const userNameParts = [];\n  const delimiters = [',', '.', '-', '_', '#', '@'];\n  let userNamePart = '';\n  oktaUnderscore.each(usernameArr, function (part) {\n    if (delimiters.indexOf(part) === -1) {\n      userNamePart += part;\n    } else {\n      if (userNamePart.length >= minPartsLength) {\n        userNameParts.push(oktaUnderscore.clone(userNamePart));\n      }\n      userNamePart = '';\n    }\n  });\n  if (userNamePart.length >= minPartsLength) {\n    userNameParts.push(oktaUnderscore.clone(userNamePart));\n  }\n  return userNameParts.filter(Boolean);\n};\nconst passwordContainsFormField = function (formField, password) {\n  if (!formField) {\n    return false;\n  }\n  formField = formField.toLowerCase();\n  password = password.toLowerCase();\n  const formFieldArr = getParts(formField);\n\n  //check if each formField part contains password\n  for (var i = 0; i < formFieldArr.length; i++) {\n    const formFieldPart = formFieldArr[i];\n    if (password.indexOf(formFieldPart) !== -1) {\n      return true;\n    }\n  }\n  return false;\n};\nconst checkSubSchema = function (subSchema, value, model) {\n  const minLength = subSchema.get('minLength');\n  const maxLength = subSchema.get('maxLength');\n  const regex = subSchema.get('format');\n  if (oktaUnderscore.isNumber(minLength)) {\n    if (value.length < minLength) {\n      return false;\n    }\n  }\n  if (oktaUnderscore.isNumber(maxLength)) {\n    if (value.length > maxLength) {\n      return false;\n    }\n  }\n  const password = value;\n  if (oktaUnderscore.isString(regex)) {\n    // call passwordContainsFormField if regex is userName, firstName, lastName\n    if (regex === '^[#/userName]' || regex === '^[#/firstName]' || regex === '^[#/lastName]') {\n      const fieldName = regex.split('^[#/')[1].split(']')[0];\n      let fieldValue = model.get(fieldName);\n      if (fieldName === 'userName') {\n        // with email as login enabled, we only have email populated\n        // Therefore we fallback and run validation with email attribute.\n        fieldValue = model.has('userName') ? model.get('userName') : model.get('email');\n      }\n      return !passwordContainsFormField(fieldValue, password);\n    } else {\n      if (!new RegExp(regex).test(value)) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\nconst checkSubSchemas = function (fieldName, model, subSchemas, showError) {\n  const value = model.get(fieldName);\n  if (!oktaUnderscore.isString(value)) {\n    return;\n  }\n  subSchemas.each(function (subSchema, index) {\n    const ele = oktaJQueryStatic('#subschemas-' + fieldName + ' .subschema-' + index);\n\n    //hide password complexity if no password\n    if (value) {\n      ele.children('p').removeClass('default-schema');\n    } else {\n      ele.children('p').addClass('default-schema');\n    }\n\n    // clear aria role and live-region for re-validation\n    ele.children('p').removeAttr('role').removeAttr('aria-live');\n\n    // reset errors\n    ele.removeClass('subschema-satisfied subschema-unsatisfied subschema-error');\n\n    // validate\n    if (checkSubSchema(subSchema, value, model)) {\n      // passed\n      ele.addClass('subschema-satisfied');\n      ele.find('p span').removeClass('error error-16-small');\n      ele.find('p span').addClass('confirm-16');\n    } else {\n      // failed\n      if (showError) {\n        ele.find('p span').removeClass('confirm-16');\n        ele.find('p span').addClass('error error-16-small');\n        ele.addClass('subschema-error subschema-unsatisfied');\n        ele.find('p')\n        // set role=\"alert\" so the password requirement is read by\n        // screen-readers\n        .attr('role', 'alert')\n        // set aria-live=\"polite\" so it will \"debounce\" and wait to read the\n        // message between keystrokes\n        .attr('aria-live', 'polite');\n      }\n    }\n  });\n};\nconst fnCreateInputOptions = function (schemaProperty) {\n  var _schemaProperty$optio;\n  let inputOptions = SchemaFormFactory.createInputOptions(schemaProperty);\n  if (((_schemaProperty$optio = schemaProperty.options) === null || _schemaProperty$optio === void 0 ? void 0 : _schemaProperty$optio.type) === 'boolean') {\n    // change BooleanSelect to CheckBox\n    inputOptions.input = CheckBox;\n  }\n  if (inputOptions.type === 'select') {\n    inputOptions = oktaUnderscore.extend(inputOptions, {\n      label: schemaProperty.get('title')\n    });\n  } else {\n    let placeholder = schemaProperty.get('title');\n    if (schemaProperty.get('required')) {\n      placeholder += ' *';\n    }\n    inputOptions = oktaUnderscore.extend(inputOptions, {\n      label: false,\n      'label-top': true,\n      placeholder: placeholder\n    });\n  }\n  const fieldName = schemaProperty.get('name');\n  switch (fieldName) {\n    case 'userName':\n      inputOptions.input = TextBox;\n      inputOptions.params = {\n        icon: 'person-16-gray'\n      };\n      break;\n    case 'password':\n      inputOptions.type = 'password';\n      inputOptions.input = TextBox;\n      inputOptions.params = {\n        icon: 'remote-lock-16'\n      };\n  }\n  const subSchemas = schemaProperty.get('subSchemas');\n  if (subSchemas) {\n    inputOptions.events = {\n      input: function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      },\n      focusout: function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      },\n      'change:userName': function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      },\n      'change:firstName': function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      },\n      'change:lastName': function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      },\n      'change:email': function () {\n        checkSubSchemas(fieldName, this.model, subSchemas, true);\n      }\n    };\n  }\n  return inputOptions;\n};\nvar RegistrationFormFactory = {\n  createInputOptions: fnCreateInputOptions,\n  getUsernameParts: getParts,\n  passwordContainsFormField: passwordContainsFormField\n};\n\nexport { RegistrationFormFactory as default };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,wEAAwE;AACjG,OAAO,yEAAyE;AAChF,OAAO,6EAA6E;AACpF,OAAOC,gBAAgB,MAAM,6EAA6E;AAC1G,OAAOC,cAAc,MAAM,iFAAiF;AAC5G,OAAO,wFAAwF;AAC/F,OAAO,sEAAsE;AAC7E,OAAO,0EAA0E;AACjF,OAAO,wEAAwE;AAC/E,OAAO,iFAAiF;AACxF,OAAOC,OAAO,MAAM,4BAA4B;;AAEhD;AACA,IAAI;EACFC,iBAAiB,EAAEA;AACrB,CAAC,GAAGJ,QAAQ,CAACK,KAAK,CAACC,KAAK,CAACC,OAAO;AAChC,IAAI;EACFC,QAAQ,EAAEA;AACZ,CAAC,GAAGR,QAAQ,CAACK,KAAK,CAACC,KAAK,CAACG,MAAM;AAC/B,MAAMC,QAAQ,GAAG,SAAAA,CAAUC,QAAQ,EAAE;EACnC,MAAMC,WAAW,GAAGD,QAAQ,CAACE,KAAK,CAAC,EAAE,CAAC;EACtC,MAAMC,cAAc,GAAG,CAAC;EACxB,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,UAAU,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EACjD,IAAIC,YAAY,GAAG,EAAE;EACrBf,cAAc,CAACgB,IAAI,CAACN,WAAW,EAAE,UAAUO,IAAI,EAAE;IAC/C,IAAIH,UAAU,CAACI,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MACnCF,YAAY,IAAIE,IAAI;IACtB,CAAC,MAAM;MACL,IAAIF,YAAY,CAACI,MAAM,IAAIP,cAAc,EAAE;QACzCC,aAAa,CAACO,IAAI,CAACpB,cAAc,CAACqB,KAAK,CAACN,YAAY,CAAC,CAAC;MACxD;MACAA,YAAY,GAAG,EAAE;IACnB;EACF,CAAC,CAAC;EACF,IAAIA,YAAY,CAACI,MAAM,IAAIP,cAAc,EAAE;IACzCC,aAAa,CAACO,IAAI,CAACpB,cAAc,CAACqB,KAAK,CAACN,YAAY,CAAC,CAAC;EACxD;EACA,OAAOF,aAAa,CAACS,MAAM,CAACC,OAAO,CAAC;AACtC,CAAC;AACD,MAAMC,yBAAyB,GAAG,SAAAA,CAAUC,SAAS,EAAEC,QAAQ,EAAE;EAC/D,IAAI,CAACD,SAAS,EAAE;IACd,OAAO,KAAK;EACd;EACAA,SAAS,GAAGA,SAAS,CAACE,WAAW,CAAC,CAAC;EACnCD,QAAQ,GAAGA,QAAQ,CAACC,WAAW,CAAC,CAAC;EACjC,MAAMC,YAAY,GAAGpB,QAAQ,CAACiB,SAAS,CAAC;;EAExC;EACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,YAAY,CAACT,MAAM,EAAEU,CAAC,EAAE,EAAE;IAC5C,MAAMC,aAAa,GAAGF,YAAY,CAACC,CAAC,CAAC;IACrC,IAAIH,QAAQ,CAACR,OAAO,CAACY,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1C,OAAO,IAAI;IACb;EACF;EACA,OAAO,KAAK;AACd,CAAC;AACD,MAAMC,cAAc,GAAG,SAAAA,CAAUC,SAAS,EAAEC,KAAK,EAAEC,KAAK,EAAE;EACxD,MAAMC,SAAS,GAAGH,SAAS,CAACI,GAAG,CAAC,WAAW,CAAC;EAC5C,MAAMC,SAAS,GAAGL,SAAS,CAACI,GAAG,CAAC,WAAW,CAAC;EAC5C,MAAME,KAAK,GAAGN,SAAS,CAACI,GAAG,CAAC,QAAQ,CAAC;EACrC,IAAIpC,cAAc,CAACuC,QAAQ,CAACJ,SAAS,CAAC,EAAE;IACtC,IAAIF,KAAK,CAACd,MAAM,GAAGgB,SAAS,EAAE;MAC5B,OAAO,KAAK;IACd;EACF;EACA,IAAInC,cAAc,CAACuC,QAAQ,CAACF,SAAS,CAAC,EAAE;IACtC,IAAIJ,KAAK,CAACd,MAAM,GAAGkB,SAAS,EAAE;MAC5B,OAAO,KAAK;IACd;EACF;EACA,MAAMX,QAAQ,GAAGO,KAAK;EACtB,IAAIjC,cAAc,CAACwC,QAAQ,CAACF,KAAK,CAAC,EAAE;IAClC;IACA,IAAIA,KAAK,KAAK,eAAe,IAAIA,KAAK,KAAK,gBAAgB,IAAIA,KAAK,KAAK,eAAe,EAAE;MACxF,MAAMG,SAAS,GAAGH,KAAK,CAAC3B,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACtD,IAAI+B,UAAU,GAAGR,KAAK,CAACE,GAAG,CAACK,SAAS,CAAC;MACrC,IAAIA,SAAS,KAAK,UAAU,EAAE;QAC5B;QACA;QACAC,UAAU,GAAGR,KAAK,CAACS,GAAG,CAAC,UAAU,CAAC,GAAGT,KAAK,CAACE,GAAG,CAAC,UAAU,CAAC,GAAGF,KAAK,CAACE,GAAG,CAAC,OAAO,CAAC;MACjF;MACA,OAAO,CAACZ,yBAAyB,CAACkB,UAAU,EAAEhB,QAAQ,CAAC;IACzD,CAAC,MAAM;MACL,IAAI,CAAC,IAAIkB,MAAM,CAACN,KAAK,CAAC,CAACO,IAAI,CAACZ,KAAK,CAAC,EAAE;QAClC,OAAO,KAAK;MACd;IACF;EACF;EACA,OAAO,IAAI;AACb,CAAC;AACD,MAAMa,eAAe,GAAG,SAAAA,CAAUL,SAAS,EAAEP,KAAK,EAAEa,UAAU,EAAEC,SAAS,EAAE;EACzE,MAAMf,KAAK,GAAGC,KAAK,CAACE,GAAG,CAACK,SAAS,CAAC;EAClC,IAAI,CAACzC,cAAc,CAACwC,QAAQ,CAACP,KAAK,CAAC,EAAE;IACnC;EACF;EACAc,UAAU,CAAC/B,IAAI,CAAC,UAAUgB,SAAS,EAAEiB,KAAK,EAAE;IAC1C,MAAMC,GAAG,GAAGnD,gBAAgB,CAAC,cAAc,GAAG0C,SAAS,GAAG,cAAc,GAAGQ,KAAK,CAAC;;IAEjF;IACA,IAAIhB,KAAK,EAAE;MACTiB,GAAG,CAACC,QAAQ,CAAC,GAAG,CAAC,CAACC,WAAW,CAAC,gBAAgB,CAAC;IACjD,CAAC,MAAM;MACLF,GAAG,CAACC,QAAQ,CAAC,GAAG,CAAC,CAACE,QAAQ,CAAC,gBAAgB,CAAC;IAC9C;;IAEA;IACAH,GAAG,CAACC,QAAQ,CAAC,GAAG,CAAC,CAACG,UAAU,CAAC,MAAM,CAAC,CAACA,UAAU,CAAC,WAAW,CAAC;;IAE5D;IACAJ,GAAG,CAACE,WAAW,CAAC,2DAA2D,CAAC;;IAE5E;IACA,IAAIrB,cAAc,CAACC,SAAS,EAAEC,KAAK,EAAEC,KAAK,CAAC,EAAE;MAC3C;MACAgB,GAAG,CAACG,QAAQ,CAAC,qBAAqB,CAAC;MACnCH,GAAG,CAACK,IAAI,CAAC,QAAQ,CAAC,CAACH,WAAW,CAAC,sBAAsB,CAAC;MACtDF,GAAG,CAACK,IAAI,CAAC,QAAQ,CAAC,CAACF,QAAQ,CAAC,YAAY,CAAC;IAC3C,CAAC,MAAM;MACL;MACA,IAAIL,SAAS,EAAE;QACbE,GAAG,CAACK,IAAI,CAAC,QAAQ,CAAC,CAACH,WAAW,CAAC,YAAY,CAAC;QAC5CF,GAAG,CAACK,IAAI,CAAC,QAAQ,CAAC,CAACF,QAAQ,CAAC,sBAAsB,CAAC;QACnDH,GAAG,CAACG,QAAQ,CAAC,uCAAuC,CAAC;QACrDH,GAAG,CAACK,IAAI,CAAC,GAAG;QACZ;QACA;QAAA,CACCC,IAAI,CAAC,MAAM,EAAE,OAAO;QACrB;QACA;QAAA,CACCA,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC;MAC9B;IACF;EACF,CAAC,CAAC;AACJ,CAAC;AACD,MAAMC,oBAAoB,GAAG,SAAAA,CAAUC,cAAc,EAAE;EACrD,IAAIC,qBAAqB;EACzB,IAAIC,YAAY,GAAG1D,iBAAiB,CAAC2D,kBAAkB,CAACH,cAAc,CAAC;EACvE,IAAI,CAAC,CAACC,qBAAqB,GAAGD,cAAc,CAACI,OAAO,MAAM,IAAI,IAAIH,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACI,IAAI,MAAM,SAAS,EAAE;IACvJ;IACAH,YAAY,CAACI,KAAK,GAAG1D,QAAQ;EAC/B;EACA,IAAIsD,YAAY,CAACG,IAAI,KAAK,QAAQ,EAAE;IAClCH,YAAY,GAAG5D,cAAc,CAACiE,MAAM,CAACL,YAAY,EAAE;MACjDM,KAAK,EAAER,cAAc,CAACtB,GAAG,CAAC,OAAO;IACnC,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,IAAI+B,WAAW,GAAGT,cAAc,CAACtB,GAAG,CAAC,OAAO,CAAC;IAC7C,IAAIsB,cAAc,CAACtB,GAAG,CAAC,UAAU,CAAC,EAAE;MAClC+B,WAAW,IAAI,IAAI;IACrB;IACAP,YAAY,GAAG5D,cAAc,CAACiE,MAAM,CAACL,YAAY,EAAE;MACjDM,KAAK,EAAE,KAAK;MACZ,WAAW,EAAE,IAAI;MACjBC,WAAW,EAAEA;IACf,CAAC,CAAC;EACJ;EACA,MAAM1B,SAAS,GAAGiB,cAAc,CAACtB,GAAG,CAAC,MAAM,CAAC;EAC5C,QAAQK,SAAS;IACf,KAAK,UAAU;MACbmB,YAAY,CAACI,KAAK,GAAG/D,OAAO;MAC5B2D,YAAY,CAACQ,MAAM,GAAG;QACpBC,IAAI,EAAE;MACR,CAAC;MACD;IACF,KAAK,UAAU;MACbT,YAAY,CAACG,IAAI,GAAG,UAAU;MAC9BH,YAAY,CAACI,KAAK,GAAG/D,OAAO;MAC5B2D,YAAY,CAACQ,MAAM,GAAG;QACpBC,IAAI,EAAE;MACR,CAAC;EACL;EACA,MAAMtB,UAAU,GAAGW,cAAc,CAACtB,GAAG,CAAC,YAAY,CAAC;EACnD,IAAIW,UAAU,EAAE;IACda,YAAY,CAACU,MAAM,GAAG;MACpBN,KAAK,EAAE,SAAAA,CAAA,EAAY;QACjBlB,eAAe,CAACL,SAAS,EAAE,IAAI,CAACP,KAAK,EAAEa,UAAU,EAAE,IAAI,CAAC;MAC1D,CAAC;MACDwB,QAAQ,EAAE,SAAAA,CAAA,EAAY;QACpBzB,eAAe,CAACL,SAAS,EAAE,IAAI,CAACP,KAAK,EAAEa,UAAU,EAAE,IAAI,CAAC;MAC1D,CAAC;MACD,iBAAiB,EAAE,SAAAyB,CAAA,EAAY;QAC7B1B,eAAe,CAACL,SAAS,EAAE,IAAI,CAACP,KAAK,EAAEa,UAAU,EAAE,IAAI,CAAC;MAC1D,CAAC;MACD,kBAAkB,EAAE,SAAA0B,CAAA,EAAY;QAC9B3B,eAAe,CAACL,SAAS,EAAE,IAAI,CAACP,KAAK,EAAEa,UAAU,EAAE,IAAI,CAAC;MAC1D,CAAC;MACD,iBAAiB,EAAE,SAAA2B,CAAA,EAAY;QAC7B5B,eAAe,CAACL,SAAS,EAAE,IAAI,CAACP,KAAK,EAAEa,UAAU,EAAE,IAAI,CAAC;MAC1D,CAAC;MACD,cAAc,EAAE,SAAA4B,CAAA,EAAY;QAC1B7B,eAAe,CAACL,SAAS,EAAE,IAAI,CAACP,KAAK,EAAEa,UAAU,EAAE,IAAI,CAAC;MAC1D;IACF,CAAC;EACH;EACA,OAAOa,YAAY;AACrB,CAAC;AACD,IAAIgB,uBAAuB,GAAG;EAC5Bf,kBAAkB,EAAEJ,oBAAoB;EACxCoB,gBAAgB,EAAErE,QAAQ;EAC1BgB,yBAAyB,EAAEA;AAC7B,CAAC;AAED,SAASoD,uBAAuB,IAAIE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}